prontera,147,172,4	script	Collector	4_M_HUMERCHANT,{    
	mes .@npc_name$ = "[^0080FFCollector^000000]";    
	mes "Do you need something ?";	    
	.@stor_count = getcollectionstore();    
	for (.@i = 0; .@i < .@stor_count; .@i++)    
		.@menu2$[.@i] = sprintf("[-] Collection Box %s", .@stor_name$[.@i]);    
	    
	// Updated main menu with combo options    
	.@s = select("[-] See Collection Book:[-] See Collection Benefit:[-] Open Collection Storage:[-] Check Combo Status");    
	clear;    
	mes .@npc_name$;    
	    
	if (.@s == 1) {    
		// Existing collection book code...    
		mes "Please select collection Box";    
		.@s2 = select(implode(.@menu2$, ":")) - 1;    
		.@s = getcollectionlist(.@stor_id[.@s2]);    
		.@menu$[0] = sprintf("All List (%s)", F_InsertComma(.@s));    
		.@menu$[1] = sprintf("Collected List (%s/%s)", F_InsertComma(.@count), F_InsertComma(.@s));    
		.@menu$[2] = sprintf("Uncollected List (%s/%s)", F_InsertComma(.@s - .@count), F_InsertComma(.@s));    
		mes "Do you want to see all collection list or collected or uncollected only list?";    
		.@t = select("[-] "+ implode(.@menu$, ":[-] "));    
		clear;    
		mes .@npc_name$;    
		for (.@i = 0; .@i < .@s; .@i++) {    
			if ((.@t == 2 && !.@flag[.@i]) || (.@t == 3 && .@flag[.@i]))    
				continue;    
  
			++.@j;    
			.@itemname$ = "";    
			if (.@refine[.@i])    
				.@itemname$ = sprintf("+%d ", .@refine[.@i]);    
			.@itemname$ += mesitemicon(.@nameid[.@i]);    
			.@itemname$ += getitemname(.@nameid[.@i]);    
			mes sprintf("[%d/%d] %s ", .@amount2[.@i], .@amount[.@i], .@itemname$);    
			if (.@j % 7 == 0 && (.@i + 1) < .@s) {    
				if (.@page)    
					.@next = select("[-] Next Page:[-] Previous Page");    
				else    
					.@next = select("[-] Next Page");    
				if (.@next == 2) {    
					.@page--;    
					.@i = .@page * 6 - 1;    
				}    
				else    
					.@page++;    
				clear;    
				mes .@npc_name$;    
			}    
		}    
	}    
	else if (.@s == 2) {    
		// Existing collection benefit code...    
		.@s = getcollectionbonus();    
		if (.@s < 1) {    
			mes "You didn't have any collection item yet.";    
			close;    
		}    
		for (.@i = 0; .@i < .@s; .@i++) {    
			mes callsub(S_PreProcess, .@type[.@i], .@val1[.@i], .@val2[.@i]);    
			.@j = .@i + 1;    
			if (.@j % 7 == 0 && .@j < .@s) {    
				next;    
				mes .@npc_name$;    
			}    
		}		    
	}    
	else if (.@s == 3) {    
		// Existing storage opening code...    
		mes "You can put in collection item when it is unused to get the benefit or take it out if you want to use it.";    
		next;    
		mes .@npc_name$;    
		mes "Please select collection Box";    
		.@s2 = select(implode(.@menu2$, ":")) - 1;    
		openstorage2 .@stor_id[.@s2], STOR_MODE_PUT | STOR_MODE_GET;    
		end;    
	}      
	else if (.@s == 4) {    
		// Simplified combo menu showing only status  
		mes "Please select collection Box for combo management";    
		.@s2 = select(implode(.@menu2$, ":")) - 1;    
			
		// Get available combos for this storage    
		.@combo_list_count = getcollectioncombos(.@stor_id[.@s2]);    
			
		if (.@combo_list_count <= 0) {    
			mes "No combos available for this collection box.";    
			close;    
		}    
		  
		// BATCH PROCESSING: Get all combo statuses at once  
		.@total_combos = checkallcombos(.@stor_id[.@s2]);  
		  
		mes sprintf("^0080FF%s Combo Management^000000", .@stor_name$[.@s2]);    
		mes "";    
		mes "Available combos:";    
			
		// Build simplified combo menu showing only status  
		for (.@i = 0; .@i < .@combo_list_count; .@i++) {    
			.@combo_status = .@combo_active[.@i];  
			.@status_text$ = (.@combo_status) ? "^00FF00[ACTIVE]^000000" : "^FF0000[INACTIVE]^000000";    
			  
			// Simplified menu - only show combo number and status   
			.@combo_menu$[.@i] = sprintf("Combo %d %s", .@i + 1, .@status_text$);    
		}    
			
		.@combo_menu$[.@combo_list_count] = "Back";    
			
		mes "";    
		mes "Select a combo to view requirements:";    
		.@combo_choice = select(implode(.@combo_menu$, ":")) - 1;    
			
		if (.@combo_choice == .@combo_list_count) {    
			close;    
		}    
		  
		// Show combo requirements in dialogue  
		clear;  
		mes .@npc_name$;  
		mes sprintf("^0080FFCombo %d Requirements^000000", .@combo_choice + 1);  
		mes "";  
		  
		// Display required items  
		.@combo_desc$ = "Required items:\n";  
		for (.@j = 0; .@j < .@combo_item_count[.@combo_choice]; .@j++) {    
			.@item_id = .@combo_items[.@combo_choice * 10 + .@j];    
			.@combo_desc$ += sprintf("     ->^0000FF%s^000000\n", getitemname(.@item_id));  
		}    
		mes .@combo_desc$;  
		  
		// Show current status  
		.@current_status = checkspecificcombo(.@stor_id[.@s2], .@combo_choice);    
		.@status_text$ = (.@current_status) ? "^00FF00ACTIVE^000000" : "^FF0000INACTIVE^000000";  
		mes sprintf("\nStatus: %s", .@status_text$);  
		  
		mes "";  
		mes "What would you like to do?";  
		  
		if (.@current_status) {    
			.@action = select("Deactivate Combo:Back");  
			if (.@action == 1) {  
				.@result = deactivatespecificcombo(.@stor_id[.@s2], .@combo_choice);    
				if (.@result) {    
					mes sprintf("Combo %d has been deactivated.", .@combo_choice + 1);    
				} else {    
					mes "Failed to deactivate combo.";    
				}    
			}  
		} else {    
			.@action = select("Activate Combo:Back");  
			if (.@action == 1) {  
				.@result = activatespecificcombo(.@stor_id[.@s2], .@combo_choice);    
				if (.@result) {    
					mes sprintf("Combo %d has been activated!", .@combo_choice + 1);    
				} else {    
					mes "Failed to activate combo. Check if you have all required items.";    
				}    
			}  
		}  
	}          
	close;

S_PreProcess:
	.@type  = getarg(0, 0);
	.@val1  = getarg(1, 0);
	.@val2  = getarg(2, 0);
	.@type$ = "";

	setarray .@bElement[0], bAddEle, bSubEle, bMagicAddEle, bMagicAtkEle;
	setarray .@bRace[0], bAddRace, bSubRace, bMagicAddRace, bCriticalAddRace, bIgnoreMDefRace, bIgnoreDefRace;
	setarray .@bClass[0], bAddClass, bSubClass, bMagicAddClass, bAddDamageClass, bAddMagicDamageClass, bIgnoreMdefClassRate, bIgnoreDefClassRate;
	setarray .@bSize[0], bAddSize, bMagicAddSize, bSubSize;

	if (.Param[.@type] == 2) {
		if (.@type == bResEff)
			.@type$ = .Effect$[.@val1];
		else if (inarray(.@bElement, .@type) > -1)
			.@type$ = .Element$[.@val1];
		else if (inarray(.@bRace, .@type) > -1)
			.@type$ = .Race$[.@val1];
		else if (inarray(.@bClass, .@type) > -1)
			.@type$ = .Class$[.@val1];
		else if (inarray(.@bSize, .@type) > -1)
			.@type$ = .Size$[.@val1];

		if (.@type$ != "")
			return sprintf(.Bonus$[.@type], .@type$, .@val2);
		else
			return sprintf(.Bonus$[.@type], .@val1, .@val2);
	}
	else if (.Param[.@type] == 1) {
		if (inarray(.@bElement, .@type) > -1)
			.@type$ = .Element$[.@val1];
		else if (inarray(.@bRace, .@type) > -1)
			.@type$ = .Race$[.@val1];
		else if (inarray(.@bClass, .@type) > -1)
			.@type$ = .Class$[.@val1];

		if (.@type$ != "")
			return sprintf(.Bonus$[.@type], .@type$);
		else
			return sprintf(.Bonus$[.@type], .@val1);
	}
	else
		return "Undefined - "+ .@type +" "+ .@val1 +" "+ .@val2;

OnInit:
	/* Classes */
	.Class$[CLASS_NORMAL] = "Normal";
	.Class$[CLASS_BOSS] = "Boss";
	.Class$[CLASS_GUARDIAN] = "Guardian";
	.Class$[CLASS_BATTLEFIELD] = "Battlefield";
	.Class$[CLASS_ALL] = "All";

	/* Sizes */
	.Size$[Size_Small] = "Small";
	.Size$[Size_Medium] = "Medium";
	.Size$[Size_Large] = "Large";
	.Size$[Size_All] = "All";

	/* Statuses effect */
	.Effect$[SC_STONE] = "Stone";
	.Effect$[SC_FREEZE] = "Freeze";
	.Effect$[SC_STUN] = "Stun";
	.Effect$[SC_SLEEP] = "Sleep";
	.Effect$[SC_POISON] = "Poison";
	.Effect$[SC_CURSE] = "Curse";
	.Effect$[SC_SILENCE] = "Silence";
	.Effect$[SC_CONFUSION] = "Confusion";
	.Effect$[SC_BLIND] = "Blind";
	.Effect$[SC_BLEEDING] = "Bleeding";
	.Effect$[SC_DPOISON] = "DPoison";
	.Effect$[SC_FEAR] = "Fear";
	.Effect$[SC_BURNING] = "Burning";
	.Effect$[SC_CRYSTALIZE] = "Crystalize";

	/* Elements */
	.Element$[ELE_NEUTRAL] = "Neutral";
	.Element$[ELE_WATER] = "Water";
	.Element$[ELE_EARTH] = "Earth";
	.Element$[ELE_FIRE] = "Fire";
	.Element$[ELE_WIND] = "Wind";
	.Element$[ELE_POISON] = "Poison";
	.Element$[ELE_HOLY] = "Holy";
	.Element$[ELE_DARK] = "Dark";
	.Element$[ELE_GHOST] = "Ghost";
	.Element$[ELE_UNDEAD] = "Undead";
	.Element$[ELE_ALL] = "All";

	/* Races */
	.Race$[RC_FORMLESS] = "Formless";
	.Race$[RC_UNDEAD] = "Undead";
	.Race$[RC_BRUTE] = "Brute";
	.Race$[RC_PLANT] = "Plant";
	.Race$[RC_INSECT] = "Insect";
	.Race$[RC_FISH] = "Fish";
	.Race$[RC_DEMON] = "Demon";
	.Race$[RC_DEMIHUMAN] = "DemiHuman";
	.Race$[RC_ANGEL] = "Angel";
	.Race$[RC_DRAGON] = "Dragon";
	.Race$[RC_PLAYER_HUMAN] = "Player (Human)";
	.Race$[RC_PLAYER_DORAM] = "Player (Doram)";
	.Race$[RC_ALL] = "All";
	function Add;

	freeloop(1);

	Add(bStr, 1, "STR +%d");
	Add(bAgi, 1, "AGI +%d");
	Add(bVit, 1, "VIT +%d");
	Add(bInt, 1, "INT +%d");
	Add(bDex, 1, "DEX +%d");
	Add(bLuk, 1, "LUK +%d");
	Add(bAllStats, 1, "All Status +%d");
	Add(bAtk, 1, "ATK +%d");
	Add(bAtk2, 1, "ATK +%d");
	Add(bAtkRate, 1, "ATK +%d%%");
	Add(bBaseAtk, 1, "Base ATK +%d");
	Add(bMatk, 1, "MATK +%d");
	Add(bMatkRate, 1, "MATK +%d%%");
	Add(bDef, 1, "Hard DEF +%d");
	Add(bDefRate, 1, "Hard DEF +%d%%");
	Add(bDef2, 1, "Soft DEF +%d");
	Add(bDef2Rate, 1, "Soft DEF +%d%%");
	Add(bMdef, 1, "Hard MDEF +%d");
	Add(bMdefRate, 1, "Hard MDEF +%d%%");
	Add(bMdef2, 1, "Soft MDEF +%d");
	Add(bMdef2Rate, 1, "Soft MDEF +%d%%");
	Add(bHit, 1, "Hit +%d");
	Add(bHitRate, 1, "Hit +%d%%");
	Add(bFlee, 1, "Flee +%d");
	Add(bFleeRate, 1, "Flee +%d%%");
	Add(bFlee2, 1, "Perfect Dodge +%d");
	Add(bFlee2Rate, 1, "Perfect Dodge +%d%%");
	Add(bCritical, 1, "Critical +%d");
	Add(bCriticalRate, 1, "Critical +%d%%");
	Add(bAtkEle, 1, "ATK ELE +%s");
	Add(bDefEle, 1, "DEF ELE +%s");
	Add(bMaxHP, 1, "MAX HP +%d");
	Add(bMaxSP, 1, "MAX SP +%d");
	Add(bMaxHPrate, 1, "Max HP +%d%%");
	Add(bMaxSPrate, 1, "Max SP +%d%%");
	Add(bUseSPrate, 1, "SP Consumsion +%d%%");
	Add(bSpeedRate, 1, "Movement Speed Fix +%d%%");
	Add(bSpeedAddRate, 1, "Movement Speed +%d%%");
	Add(bAspd, 1, "ASPD +%d");;
	Add(bAspdRate, 1, "ASPD +%d%%");
	Add(bHPrecovRate, 1, "HP Recovery +%d%%");
	Add(bSPrecovRate, 1, "SP Recovery +%d%%");
	Add(bCriticalDef, 1, "Critical Resist +%d%%");
	Add(bNearAtkDef, 1, "Red. Melee Damage +%d");
	Add(bLongAtkDef, 1, "Red. Ranged Damage +%d");
	Add(bIgnoreDefEle, 1, "Ignore Def Ele +%s");
	Add(bIgnoreDefRace, 1, "Ignore Def Race +%s");
	Add(bIgnoreDefClass, 1, "Ignore Def Class +%s");
	Add(bMagicAtkDef, 1, "Reduce Magic Damage +%d%%");
	Add(bMiscAtkDef, 1, "Reduce Misc Damage +%d%%");
	Add(bIgnoreMDefEle, 1, "Ignore MDEF Ele +%s");
	Add(bIgnoreMDefRace, 1, "Ignore MDEF Race +%s");
	Add(bShortWeaponDamageReturn, 1, "Reflect Melee Damage +%d%%");
	Add(bLongWeaponDamageReturn, 1, "Reflect Long Damage +%d%%");
	Add(bMagicDamageReturn, 1, "Reflect Magic Damage +%d%%");
	Add(bLongAtkRate, 1, "Long Attack +%d%%");
	Add(bBreakWeaponRate, 1, "Chance Break Weapon +%d%%");
	Add(bBreakArmorRate, 1, "Chance Break Armor +%d%%");
	Add(bDelayRate, 1, "After Cast Delay -%d%%");
	Add(bCritAtkRate, 1, "Critical Damage +%d%%");
	Add(bFixedCastrate, 1, "Fixed Cast Time -%d%%");
	Add(bCastrate, 1, "Skill Cast Time -%d%%");
	Add(bVariableCastrate, 1, "Variable Cast Time -%d%%");
	Add(bAddMaxWeight, 1, "Max Weight +%d");
	Add(bCriticalLong, 1, "Critical Range Atk +%d");
	Add(bWeaponAtkRate, 1, "Weapon Attack +%d%%");
	Add(bWeaponMatkRate, 1, "Weapon MATK +%d%%");

	Add(bAddEle, 2, "P. Damage Against %s +%d%%");
	Add(bAddRace, 2, "P. Damage Against %s +%d%%");
	Add(bAddClass, 2, "P. Damage Against %s +%d%%");
	Add(bAddSize, 2, "P. Damage Against %s Size +%d%%");
	Add(bSubEle, 2, "%s Reduc +%d%%");
	Add(bSubRace, 2, "%s Reduc +%d%%");
	Add(bSubClass, 2, "%s Reduc +%d%%");
	Add(bResEff, 2, "%s Reduc +%d%%");
	Add(bSubSize, 2, "%s Reduc +%d%%");
	Add(bMagicAddEle, 2, "M. Damage Against %s +%d%%");
	Add(bMagicAddRace, 2, "M. Damage Against %s +%d%%");
	Add(bMagicAddClass, 2, "M. Damage Againste %s +%d%%");
	Add(bMagicAddSize, 2, "M. Damage Against %s +%d%%");
	Add(bMagicAtkEle, 2, "Increases damage of %s element magic by +%d%%");
	Add(bHPDrainRate, 2, "Chance Drain HP +%d%%");
	Add(bSPDrainRate, 2, "Chance Drain SP +%d%%");
	Add(bCriticalAddRace, 2, "Critical +%d against %s Race");
	Add(bIgnoreMdefRaceRate, 2, "Disregard MDEF %s Race %d%%");
	Add(bIgnoreMdefClassRate, 2, "Disregard MDEF %s Class %d%% ");
	Add(bIgnoreDefRaceRate, 2, "Disregard DEF %s Race %d%%");
	Add(bIgnoreDefClassRate, 2, "Disregard DEF %s Class +%d%%");

	freeloop(0);

	questinfo QTYPE_CLICKME;
	end;

	function	Add	{
		.@idx  = getarg(0, -1);
		.@arg  = getarg(1, -1);
		.@str$ = getarg(2, "");
		if (.@str$ == "" || .@idx == -1 || .@arg == -1)
		{
			debugmes sprintf("%s : invalid data %d, %d, %s", strnpcinfo(1), .@idx, .@arg, .@str$);
			return;
		}
		.Param[.@idx]  = .@arg;
		.Bonus$[.@idx] = .@str$;
		return;
	}
}
