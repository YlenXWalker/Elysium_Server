//===== rAthena Script =======================================
//= Eden Group Quest - Quests NPCs
//===== Description: =========================================
//= Eden Group Headquarter NPCs.
//===== Changelogs: ==========================================
//= 1.0 First Version. [L0ne_W0lf]
//= 1.1 Removed unencoded comments (Korean -> Gibberish)
//=     Readded the GM helper NPC, commented out.
//= 1.2 Some little optimization here and there. [Masao]
//= 1.3 Added Instructor Ur and the new Quests which come
//=     alongside him. Special thanks to Chilly for the base. [Masao]
//= 1.4 Partial cleaning and bug fixing. [Euphy]
//= 1.4a Added 'npcskill' command. [Euphy]
//= 1.4b Added 'disable_items' command. [Euphy]
//= 1.5 Added GM management function. [Euphy]
//= 1.6 Kagerou/Oboro support (Class -> BaseClass) [Euphy]
//= 2.0 Updated Instructor Ur's quests. [Capuche]
//= 2.1 Updated Blacksmith Thorn and Weapons Expert NPC. [Capuche]
//= 2.2 Added support to Para_Team_Mark_ in Eden Group. [Ragno]
//= 2.3 Added use of F_HasEdenGroupMark function. [Ragno]
//= 2.4 Adds quest management, progression, and warp points to 
//=		support multi-step training quests for players.. [Louis T Steinhil]
//============================================================

moc_para01,13,26,5	script	[ Instructor ]#2nd01	4_M_KNIGHT_BLACK,{  
	mes "[Instructor Ur]";  
	  
	// Check Eden Group membership  
	if (!callfunc("F_HasEdenGroupMark")) {  
		callsub S_NonMemberMessage;  
		close;  
	}  
	  
	// Route to appropriate quest state handler  
	switch(para_2nd01) {  
		case 0: callsub S_InitialConversation; break;  
		case 1: case 2: case 3: case 4: callsub S_QuestInProgress, "Comodo"; break;  
		case 5: callsub S_ComodoComplete; break;  
		case 6: callsub S_SecondStageOffer; break;  
		case 7: case 8: case 9: callsub S_QuestInProgress, "Glast Heim Castle"; break;  
		case 10: callsub S_GlastHeimComplete; break;  
		case 11: callsub S_ThirdStageOffer; break;  
		case 12: case 13: case 14: callsub S_QuestInProgress, "Einbroch"; break;  
		case 15: callsub S_EinbrochComplete; break;  
		case 16: callsub S_FourthStageOffer; break;  
		case 17: case 18: case 19: callsub S_QuestInProgress, "Ice Dungeon"; break;  
		case 20: callsub S_IceDungeonComplete; break;  
		case 22: case 23: case 24: case 25: case 26: case 27: case 28: callsub S_QuestInProgress, "Midgard Expedition Camp"; break;  
		case 29: callsub S_ExpeditionComplete; break;  
		case 30: callsub S_AllTrainingComplete; break;  
		default: callsub S_UnknownState; break;  
	}  
	close;  
  
// Subroutines  
S_NonMemberMessage:  
	mes "Hey there!";  
	mes "I see you're not one of our agents?";  
	mes "Are you interested in joining us?";  
	next;  
	mes "[Instructor Ur]";  
	mes "There are no fees to join!";  
	mes "We are brokers that send help where help is needed. More adventurers like you means more profit.";  
	next;  
	mes "[Instructor Ur]";  
	mes "If you're interested, talk to Raim.";  
	mes "Raim's a good guy.";  
	mes "Hahaha..";  
	return;  
  
S_InitialConversation:  
	mes "Hello?";  
	mes "Do you need help?";  
	mes "This is a general request in order to receive the next board's request.";  
	next;  
	switch(select("What are you doing here?:It's nothing.:Quest Management")) {  
		case 1: callsub S_ExplainRole; break;  
		case 2:  
			mes "[Instructor Ur]";  
			mes "I guess I have no business with you then.";  
			break;  
		case 3: callsub S_QuestManagement; break;  
	}  
	return;  
  
S_ExplainRole:  
	mes "[Instructor Ur]";  
	mes "Well, I'm an instructor for Eden Group.";  
	next;  
	mes "[Instructor Ur]";  
	mes "I'm here to give you missions based on your current base level.";  
	mes "These missions are not very difficult to do.";  
	next;  
	mes "[Instructor Ur]";  
	mes "I am the senior instructor here at Eden Group.";  
	mes "What do you say are you up for the challenge?";  
	next;  
	switch(select("Not today I'm not.:Okay, I'll try.:Quest Help")) {  
		case 1:  
			mes "[Instructor Ur]";  
			mes "Really?";  
			mes "That's so sad.";  
			mes "When you finish these missions I will even give you a pretty decent reward.";  
			break;  
		case 2: callsub S_AssignInitialQuest; break;  
		case 3: callsub S_QuestManagement; break;  
	}  
	return;  
  
S_AssignInitialQuest:  
	mes "[Instructor Ur]";  
	mes "Yeah!";  
	mes "Ok, let me check what mission you should get ok?";  
	next;  
	mes "[Instructor Ur]";  
	  
	if (BaseLevel < 60) {  
		mes "Well... I know that you've got the heart but you're just a little too weak to help.";  
		next;  
		mes "[Instructor Ur]";  
		mes "Sorry, but your basic level should be at least 60 to help with these missions.";  
	}  
	else if (BaseLevel < 70) {  
		callsub S_AssignComodo;  
	}  
	else if (BaseLevel < 80) {  
		callsub S_AssignGlastHeim;  
	}  
	else if (BaseLevel < 90) {  
		callsub S_AssignEinbroch;  
	}  
	else {  
		callsub S_Quest89100;  
	}  
	return;  
  
S_AssignComodo:  
	mes "Ok, I guess you're the bare minimum level for these missions.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Based on your level, I think that the Comodo area suits you.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Do you know where Comodo is?";  
	mes "You can get there by going to Morocc and then through Pharos Lighthouse.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Comodo is a small city on the coast with many caves.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Look for the cave located to the north. There's someone there named Romeo.";  
	mes "You know? As in Romeo, Romeo, wherefore art thou Romeo.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Go there and get the mission from him.";  
	mes "Well, then come back here alive when you're done!";  
	para_2nd01 = 1;  
	setquest 7214;// Advanced Training at Comodo  
	return;  
  
S_AssignGlastHeim:  
	mes "Let's see...";  
	mes "Your level would suggest that Comodo is just too easy for you.";  
	mes "Yeah, here we go.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Do you know where Glast Heim is?";  
	mes "If there was a tragic accident now, the capital of the Rune-Midgarts Kingdom could revert back to there.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Well, if it wasn't infested with undead monsters, it would become the new capitol of Rune-Midgarts.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Please, come back alive.";  
	para_2nd01 = 7;  
	setquest 7219;// Advanced Training at Glast Heim  
	return;  
  
S_AssignEinbroch:  
	mes "Ah, ok so for you...";  
	mes "Hmm where do I send you?";  
	next;  
	mes "[Instructor Ur]";  
	mes "There is an industrial city called Einbroch.";  
	mes "You know it? It's a city covered in smog.";  
	mes "It's a pretty gloomy city come to think of it.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Anyways, go to Einbroch and find the Dispatched Instructor there. He should be in the field south of the main city.";  
	setquest 7223;// Advanced Training in Einbroch  
	para_2nd01 = 12;  
	return;  
  
S_QuestInProgress:  
	mes "So, have you been in ^4d4dff"+ getarg(0) +"^000000 yet?";  
	mes "Didn't I tell you to go there?";  
	mes "Go there first and then come back to me. Okay?";  
	next;  
	switch(select("Quest Management:I'm on my way:Leave")) {  
		case 1: callsub S_QuestManagement; break;  
		case 2:  
			mes "[Instructor Ur]";  
			mes "Good luck out there!";  
			break;  
		case 3: break;  
	}  
	return;  
  
S_ComodoComplete:  
	mes "Oh, there he is.";  
	mes "Romeo seems to be back from his field report.";  
	next;  
	mes "[Instructor Ur]";  
	mes "We have rewards for you.";  
	mes "I'm sure Romeo gave you some items, but we brought more useful things.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Do you know where the weapon storage is at?";  
	mes "Go out through that large blue door and walk to the end of the hallway.";  
	mes "Ask the Blacksmith, and he will give you new equipment.";  
	next;  
	mes "[Instructor Ur]";  
	mes "And the 2nd stage training and missions start at level 70, so come back then.";  
	mes "Don't forget, I'll be waiting for you.";  
	para_2nd01 = 6;  
	para_2nd02 = 1;  
	erasequest 7218;// Report to Instructor Ur  
	return;  
  
S_SecondStageOffer:  
	if (BaseLevel > 69) {  
		mes "Hey, buddy~";  
		mes "What's going on?";  
		next;  
		switch(select("I want to start training.:I'm just visiting.:Quest Management")) {  
			case 1: callsub S_AssignSecondStage; break;  
			case 2:  
				mes "[Instructor Ur]";  
				mes "Really? At your level, I think you can easily complete the top class missions..";  
				mes "I'll be here if you change your mind.";  
				break;  
			case 3: callsub S_QuestManagement; break;  
		}  
	}  
	else {  
		mes "2nd stage training missions start at level 70.";  
		mes "I'll see you then.";  
		mes "Did you pick up the necessary equipment from the storage?";  
		mes "Hahaha!";  
		next;  
		switch(select("Quest Management:Just checking:Leave")) {  
			case 1: callsub S_QuestManagement; break;  
			case 2:  
				mes "[Instructor Ur]";  
				mes "Come back when you're ready!";  
				break;  
			case 3: break;  
		}  
	}  
	return;  
  
S_AssignSecondStage:  
	mes "[Instructor Ur]";  
	mes "Hmm... You have a good form!";  
	mes "Let me see....";  
	mes "Which location would suit you...?";  
	next;  
	mes "[Instructor Ur]";  
	if (BaseLevel < 80) {  
		callsub S_AssignGlastHeimSecond;  
	}  
	else if (BaseLevel < 90) {  
		callsub S_Quest7990;  
	}  
	else {  
		callsub S_Quest89100;  
	}  
	return;  
  
S_AssignGlastHeimSecond:  
	mes "Ah, this place should be good!";  
	mes "Do you know where Glast Heim is?";  
	mes "If it wasn't for that terrible accident, Glast Heim would still be";  
	mes "the capital of Rune-Midgarts, not Prontera.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Anyways, that ancient castle is now full of undead monsters.";  
	mes "It's especially bad around the Abbey in the south.";  
	next;  
	mes "[Instructor Ur]";  
	mes "All of those undead monsters come from the underground graveyard";  
	mes "Well... I guess you don't have to go all the way into the graveyard...";  
	next;  
	mes "[Instructor Ur]";  
	mes "Once you get to the Abbey you'll see our unit member stationed in front of the entrance.";  
	mes "Follow his instructions to help clear out that area.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Please come back alive.";  
	para_2nd01 = 7;  
	setquest 7219;// Advanced Training at Glast Heim  
	return;  
  
S_GlastHeimComplete:  
	mes "Oh! You're here!";  
	mes "I just got a message from Johan.";  
	mes "I think he's not telling me something, but I can't figure out what that is.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Anyways, good job. I'm glad you're not hurt";  
	mes "The Blacksmith BK said he'll reinforce your weapon.";  
	next;  
	callsub S_Para2;  
	mes "[Instructor Ur]";  
	mes "You know where the Blacksmith is at right??";  
	mes "Go out through the blue door, to the end of the hallway.";  
	mes "BK is a great blacksmith, he'll make your weapon stronger.";  
	mes "What are you waiting for?";  
	para_2nd01 = 11;  
	erasequest 7222;  
	return;  
  
S_ThirdStageOffer:  
	if (BaseLevel > 79) {  
		mes "Ah, ever so improving "+ strcharinfo(0) +"?";  
		mes "To what do I owe this pleasure?";  
		next;  
		switch(select("I came for more training.:I'm just visiting.:Quest Management")) {  
			case 1: callsub S_AssignThirdStage; break;  
			case 2:  
				mes "[Instructor Ur]";  
				mes "Really? At your level, I think you can easily complete the top class missions..";  
				mes "I'll be here if you change your mind.";  
				break;  
			case 3: callsub S_QuestManagement; break;  
		}  
	}  
	else {  
		mes "3rd stage training starts at level 80.";  
		mes "I'll see you then.";  
		mes "Oh, if you haven't reinforced your weapon yet, go talk to BK.";  
		next;  
		switch(select("Quest Management:Just checking:Leave")) {  
			case 1: callsub S_QuestManagement; break;  
			case 2:  
				mes "[Instructor Ur]";  
				mes "Come back when you're ready!";  
				break;  
			case 3: break;  
		}  
	}  
	return;  
  
S_AssignThirdStage:  
	mes "[Instructor Ur]";  
	mes "Hmm... You have a good form!";  
	mes "Let me see....";  
	next;  
	mes "[Instructor Ur]";  
	if (BaseLevel < 90) {  
		callsub S_Quest7990;  
	}  
	else {  
		callsub S_Quest89100;  
	}  
	return;  
  
S_EinbrochComplete:  
	mes "Ah, you've come.";  
	mes "I just received a message from Kiren.";  
	mes "How was he? He didn't throw a tantrum for waking him up?";  
	next;  
	mes "[Instructor Ur]";  
	mes "Anyways, good job. I'm glad you're not hurt.";  
	mes "The Blacksmith BK said he'll reinforce your weapon.";  
	next;  
	callsub S_Para2;  
	mes "[Instructor Ur]";  
	mes "You know where the Blacksmith is at right?";  
	mes "Go out through the blue door, to the end of the hallway.";  
	mes "BK is a great blacksmith, he'll make your weapon stronger.";  
	mes "What are you waiting for?";  
	para_2nd01 = 16;  
	erasequest 7228;  
	return;  
  
S_FourthStageOffer:  
	if (BaseLevel > 89) {  
		mes "It's nice to see you still strong!";  
		mes "What brings you today?";  
		next;  
		switch(select("I want to continue training.:I'm just visiting.:Quest Management")) {  
			case 1: callsub S_AssignFourthStage; break;  
			case 2:  
				mes "[Instructor Ur]";  
				mes "Really? At your level, I think you can easily complete the top class missions...";  
				mes "I'll be here if you change your mind.";  
				break;  
			case 3: callsub S_QuestManagement; break;  
		}  
	}  
	else {  
		mes "4th stage training starts at level 90.";  
		mes "I'll see you then.";  
		mes "Oh, if you haven't reinforced your weapon yet, go talk to BK.";  
		next;  
		switch(select("Quest Management:Just checking:Leave")) {  
			case 1: callsub S_QuestManagement; break;  
			case 2:  
				mes "[Instructor Ur]";  
				mes "Come back when you're ready!";  
				break;  
			case 3: break;  
		}  
	}  
	return;  
  
S_AssignFourthStage:  
	mes "[Instructor Ur]";  
	callsub S_Quest89100;  
	return;  
  
S_IceDungeonComplete:  
	mes "Congratulations on completing all training stages!";  
	mes "That took quite a bit of time huh?";  
	mes "The Blacksmith BK said he'll reinforce your weapon.";  
	next;  
	callsub S_Para2;  
	mes "[Instructor Ur]";  
	mes "You know where the Blacksmith is at right?";  
	mes "Go out through the blue door, to the end of the hallway.";  
	mes "BK is a great blacksmith, he'll make your weapon stronger.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Good job!";  
	para_2nd01 = 21;  
	erasequest 7232;  
	return;  
  
S_ExpeditionComplete:  
	mes "Congratulations on completing all training stages!";  
	mes "How was the Expedition? From the looks of it, it must've been pretty tough.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Good job...";  
	mes "The Blacksmith BK said he'll reinforce your weapon.";  
	next;  
	callsub S_Para2;  
	mes "[Instructor Ur]";  
	mes "You know where the Blacksmith is at right?";  
	mes "Go out through the blue door, to the end of the hallway.";  
	mes "BK is a great blacksmith, he'll make your weapon stronger.";  
	next;  
	mes "[Instructor Ur]";  
	mes "By the way, it looked like Michael had something to tell you as well";  
	mes "Go talk to him, he's at the weapon storage as well.";  
	mes "Go ahead.";  
	para_2nd01 = 30;  
	erasequest 7237;  
	return;  
  
S_AllTrainingComplete:  
	mes "Good job.";  
	mes "Oh, if you haven't reinforced your weapon yet, go talk to BK.";  
	next;  
	mes "[Instructor Ur]";  
	mes "You've completed all available training missions.";  
	mes "Keep up the excellent work!";  
	next;  
	switch(select("Quest Management:Just chatting:Leave")) {  
		case 1: callsub S_QuestManagement; break;  
		case 2:  
			mes "[Instructor Ur]";  
			mes "Keep making Eden Group proud!";  
			break;  
		case 3: break;  
	}  
	return;  
  
S_UnknownState:  
	mes "I'm not sure what training stage you're at.";  
	mes "This might be a system error. Please report this.";  
	next;  
	switch(select("Quest Management:Report Issue:Leave")) {  
		case 1: callsub S_QuestManagement; break;  
		case 2:  
			mes "[Instructor Ur]";  
			mes "Please contact a GM about your quest state.";  
			break;  
		case 3: break;  
	}  
	return;  
  
// Quest Management Functions  
S_QuestManagement:  
	mes "[Instructor Ur]";  
	mes "What do you need help with regarding your advanced training?";  
	next;  
    switch(select("View Available Quests:View Active Quests:Abandon Quest:Cancel")) {  
        case 1: callsub S_ViewAvailableQuests; break;  
        case 2: callsub S_ViewActiveQuests; break;  
        case 3: callsub S_AbandonQuest; break;  
        case 4: mes "Come back if you need help with quests."; break;  
    } 
	return;  
  
S_ViewAvailableQuests:  
	mes "[Instructor Ur]";  
	mes "Your current advanced training progress:";  
	mes " ";  
	  
	switch(para_2nd01) {  
		case 0:  
			mes "^0000FFNo Active Training^000000";  
			mes "  Status: Ready to begin advanced training";  
			break;  
		case 1: case 2: case 3: case 4:  
			mes "^00FF00Comodo Training: In Progress^000000";  
			mes "  Status: Complete missions with Romeo";  
			break;  
		case 5:  
			mes "^0000FFComodo Training Complete^000000";  
			mes "  Status: Report back for next assignment";  
			break;  
		case 7: case 8: case 9:  
			mes "^00FF00Glast Heim Training: In Progress^000000";  
			mes "  Status: Complete missions with Johan";  
			break;  
		case 10:  
			mes "^0000FFGlast Heim Training Complete^000000";  
			mes "  Status: Report back for next assignment";  
			break;  
		case 12: case 13: case 14:  
			mes "^00FF00Einbroch Training: In Progress^000000";  
			mes "  Status: Complete missions with Kiren";  
			break;  
		case 15:  
			mes "^0000FFEinbroch Training Complete^000000";  
			mes "  Status: Report back for next assignment";  
			break;  
		case 17: case 18: case 19:  
			mes "^00FF00Ice Dungeon Training: In Progress^000000";  
			mes "  Status: Complete missions with Naomi";  
			break;  
		case 20:  
			mes "^0000FFIce Dungeon Training Complete^000000";  
			mes "  Status: Report back for final assignment";  
			break;  
		case 22: case 23: case 24: case 25: case 26: case 27: case 28:  
			mes "^00FF00Expedition Training: In Progress^000000";  
			mes "  Status: Complete missions at Midgard Camp";  
			break;  
		case 29:  
			mes "^0000FFExpedition Training Complete^000000";  
			mes "  Status: All advanced training completed";  
			break;  
		default:  
			mes "^0000FFAll Training Complete^000000";  
			mes "  Status: Advanced training program finished";  
			break;  
	}  
	return;  
  
S_ViewActiveQuests:  
	mes "[Instructor Ur]";  
	mes "Let me check your current training status...";  
	mes " ";  
	  
	if (para_2nd01 == 0) {  
		mes "^FFFFFFNo active advanced training.^000000";  
		mes "You can begin when you're ready.";  
	}  
	else if (para_2nd01 >= 30) {  
		mes "^00FF00All Advanced Training: COMPLETE!^000000";  
		mes "You've mastered all available training programs.";  
	}  
	else {  
		mes "^FFFFFFAdvanced Training: In Progress^000000";  
		mes "Continue with your current assignment.";  
	}  
	return;  

S_AbandonQuest:  
	if (para_2nd01 < 1 || para_2nd01 > 31) {  
		mes "[Instructor Ur]";  
		mes "You don't have any active advanced training to abandon.";  
		return;  
	}  
	  
	mes "[Instructor Ur]";  
	mes "^FF0000Warning:^000000 Abandoning will only clear your current mission progress!";  
	mes "Are you sure you want to give up your current assignment?";  
	next;  
	  
	if (select("Yes, abandon current mission:No, continue training") == 2) {  
		mes "[Instructor Ur]";  
		mes "Good choice! Complete your current assignment!";  
		return;  
	}  
	  
	// Only erase current mission quest, preserve overall progression  
	switch(para_2nd01) {  
		case 2: case 3: case 4:  
			// Don't erase 7214 (main quest), only current hunting quests  
			if (checkquest(7215) >= 0) erasequest 7215;  
			if (checkquest(7216) >= 0) erasequest 7216;  
			if (checkquest(7217) >= 0) erasequest 7217;  
			para_2nd01 = 1;  // Back to Comodo introduction  
			break;  
		case 8: case 9:  
			// Don't erase 7219 (main quest)  
			if (checkquest(7220) >= 0) erasequest 7220;  
			if (checkquest(7221) >= 0) erasequest 7221;  
			para_2nd01 = 7;  // Back to Glast Heim introduction  
			break;  
		case 13: case 14:  
			// Don't erase 7223 (main quest)  
			if (checkquest(7224) >= 0) erasequest 7224;  
			if (checkquest(7225) >= 0) erasequest 7225;  
			if (checkquest(7226) >= 0) erasequest 7226;  
			if (checkquest(7227) >= 0) erasequest 7227;  
			para_2nd01 = 12;  // Back to Einbroch introduction  
			break;  
		case 18: case 19:  
			// Don't erase 7229 (main quest)  
			if (checkquest(7230) >= 0) erasequest 7230;  
			if (checkquest(7231) >= 0) erasequest 7231;  
			para_2nd01 = 17;  // Back to Ice Dungeon introduction  
			break;  
		case 23: case 24: case 25: case 26: case 27: case 28:  
			// Don't erase 7233 (main quest)  
			if (checkquest(7234) >= 0) erasequest 7234;  
			if (checkquest(7235) >= 0) erasequest 7235;  
			if (checkquest(7236) >= 0) erasequest 7236;  
			para_2nd01 = 22;  // Back to Expedition introduction  
			break;  
	}  
	  
	mes "[Instructor Ur]";  
	mes "Current mission abandoned. You can restart this step anytime.";  
	return;
	
S_TrainingInfo:  
	mes "[Instructor Ur]";  
	mes "Advanced Training Information:";  
	mes " ";  
	mes "^0000FF1st Stage^000000: Comodo (Level 60-69)";  
	mes "^0000FF2nd Stage^000000: Glast Heim (Level 70-79)";  
	mes "^0000FF3rd Stage^000000: Einbroch (Level 80-89)";  
	mes "^0000FF4th Stage^000000: Ice Dungeon (Level 90-99)";  
	mes "^0000FF5th Stage^000000: Expedition (Level 100+)";  
	next;  
	mes "[Instructor Ur]";  
	mes "Each stage provides valuable experience and equipment upgrades.";  
	mes "Complete them in order for the best results.";  
	return;  
  
S_Para2:  
	if (para_2nd02 == 0) {  
		mes "[Instructor Ur]";  
		mes "I just realized... this was your first mission, wasn't it?";  
		mes "You must not have gotten the basic equipment yet, right?";  
		mes "Pick them up at the weapon storage.";  
		mes "Ask the Blacksmith Michael and he'll give you the equipment.";  
		para_2nd02 = 1;  
		next;  
	}  
	return;  
  
S_Quest7990:  
	mes "Hmm... Not bad...";  
	mes "You must be getting a hang of this...";  
	mes "Let's go with a simple mission this time";  
	next;  
	mes "[Instructor Ur]";  
	mes "There is an industrial city called Einbroch.";  
	mes "You've heard of it? It's a city clouded with pollution.";  
	mes "You'll appreciate the environment here so much more after visiting that city...";  
	mes "We should all be thankful.";  
	next;  
	mes "[Instructor Ur]";  
	mes "Anyways, go out to the field south of Einbroch and you'll see the Dispatched Instructor.";  
	mes "I'm sure he'll recognize you first.";  
	mes "Don't forget to bring the Eden Group badge.";  
	next;  
	mes "[Instructor Ur]";  
	mes "The city's pollution is unbearable";  
	mes "But the surrounding fields are relatively clean...";  
	mes "This should be pretty easy for you.";  
	para_2nd01 = 12;  
	setquest 7223;  
	return;  
  
S_Quest89100:  
	if (BaseLevel < 100) {  
		mes "Uh-huh....";  
		mes "Hmm...";  
		mes "You seem like a cool-headed person. What do you think about the ice caves?";  
		next;  
		mes "[Instructor Ur]";  
		mes "North of the city of Rachel is a cave filled with ice.";  
		mes "Find the Dispatched Instructor there.";  
		para_2nd01 = 17;  
		setquest 7229;  
	}  
	else {  
		mes "Well, well...";  
		mes "I don't even know where to send you now.";  
		mes "I'm sure you are familiar with most places around here";  
		next;  
		mes "[Instructor Ur]";  
		mes "Then, should I send you somewhere farther this time?";  
		mes "There is a Cat Paw Agent here.";  
		mes "Do you see him over there?";  
		next;  
		mes "[Instructor Ur]";  
		mes "Through him, you can get to Ash Vacuum pretty easily.";  
		mes "Since there is an Expedition Camp there...";  
		next;  
		mes "[Instructor Ur]";  
		mes "All you have to do is find the Eden Group agent there.";  
		mes "Tell him I sent you, and he'll give you instructions.";  
		mes "You can explore the new world";  
		mes "It's like a vacation isn't it?";  
		next;  
		mes "[Instructor Ur]";  
		mes "Hahaha!";  
		mes ".. Maybe I'll go instead of sending you.";  
		mes "Anyways, their names are Ma~ something... I don't know.";  
		next;  
		mes "[Instructor Ur]";  
		mes "So, the mission, once again, is finding our agent at the Midgard Expedition Camp.";  
		mes "Isn't this the easiest mission you've ever had?";  
		mes "Don't forget my present when you come back~!";  
		para_2nd01 = 22;  
		setquest 7233;  
	}  
	return;  
  
OnInit:  
	setunitdata(getnpcid(0), UNPC_GROUP_ID, 6);  
	setunittitle(getnpcid(0), "Ur");  
	end;  
}
