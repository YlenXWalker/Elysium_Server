/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2023 Neo Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-18                                             *
*   Last Modified : 2023-08-26                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Extract Packet Keys to an output file
///
GetPacketKeys = function(_)
{
	$$(_, 1.1, `Need a valid Exe loaded`)
	if (Exe.FileSize == 0)
		throw NO_EXE;

	$$(_, 1.2, `Open the output file for writing`)
	const fileName = Exe.GetUserInput("$$keyOutput", D_OutFile, "Target File", "Enter the target file path", OUTDIR + "PacketKeys_" + ROC.BaseName + ".txt");
	if (fileName === false)
		return true;

	let fp = new TextFile(fileName, 'w');
	if (!fp.Valid)
		throw NO_OUTPUT;

	$$(_, 2.1, `Ensure PACKET Object is loaded`)
	PACKET.load();

	let keys;
	if (PACKET.KS_Type === PACKET.Virtual)
	{
		$$(_, 2.2, `Check if it is a patched client`)
		let addr = Exe.FindHex(JMP(POS4WC), PACKET.Assigner, PACKET.Assigner + 6);
		if (addr > 0)
		{
			$$(_, 2.3, `Goto the JMP address`)
			addr = Exe.GetTgtAddr(addr + 1, PHYSICAL);

			$$(_, 2.4, `Now find the position where the assignment is done`)
			addr = Exe.FindHex(MOV([R32, ' 0?'], ALLWC).repeat(3), addr, addr + 0x50);
		}
		if (addr > 0)
		{
			$$(_, 2.5, `Extract the assigned keys`)
			keys = [];
			for (let i = 0; i < 3; i++)
			{
				const ins = Instr.FromAddr(addr);
				keys[ins.Disp/4 - 1] = ins.Immd; //order can be any so this mechanism is needed
				addr = ins.NextAddr;
			}
		}
	}

	$$(_, 2.6, `Otherwise retrieve the packet keys found`)
	if (keys == undefined)
		keys = PACKET.Keys;

	$$(_, 2.7, `Convert to hex`)
	const hexKeys = keys.map( (val, idx) => "0x" + val.toHex(true) );

	$$(_, 3.1, `Write the essentials & the keys in hex to the file`)
	fp.WriteLine("Extracted with WARP")
	fp.WriteLine("===================")
	fp.WriteLine("Client: " + Exe.FilePath);
	fp.WriteLine("BuildDate: " + Exe.BuildDate);
	fp.WriteLine("Packet Keys : (" + hexKeys.join(', ') + ")");

	$$(_, 3.2, `Close the file`)
	fp.Close();

	$$(_, 3.3, `Show the success message or display the file requested`)
	if (!Warp.TestMode && UserChoice("Show File", "Display the generated file?"))
	{
		Warp.Show(fp.Path);
		return true;
	}
	else
	{
		return "Packet Keys have been extracted";
	}
};