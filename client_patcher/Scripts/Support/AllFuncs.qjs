/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-10-29                                             *
*   Last Modified : 2024-08-07                                             *
*                                                                          *
\**************************************************************************/

  //=====================//
 // Special Function(s) //
//=====================//

///
/// \brief Receives the information of a change from Warp tool for reporting purpose.
///        You can override this function if you want to do something else with the data.
///
PatchReporter = (name, begin, end, changes) =>
{
	const from = begin.toHex(true);
	const fromVir = Exe.Phy2Vir(begin).toHex(true)

	const to   = end.toHex(true);
	const toVir = Exe.Phy2Vir(end).toHex(true);

	const msg = `Change for ${name} :\n\tPHY = [0x${from} , 0x${to}]\n\tVIR = (0x${fromVir} , 0x${toVir})\n\tDATA = ${changes}\n`;
	Log.write(msg);
	console.info(msg);
};

  //=========//
 // Testers //
//=========//

///
/// \brief Tests for primitive types & array (alias)
///
IsNum  = v => typeof v === 'number';
IsStr  = v => typeof v === 'string';
IsBool = v => typeof v === 'boolean';
IsArr = v => v != undefined && v.join != undefined;

IsNumOrStr = v =>
	typeof v === 'number' || typeof v === 'string';

///
/// \brief Tests whether given variable contains a word either as number or hex string
///        (for hex string it will be 2 bytes inside)
///
IsWord = (v, signed = true) =>
{
	switch (typeof v)
	{
		case 'number':
			return signed ?
				(v >= -0x8000 && v < -0x80) || (v > 0x7F && v <= 0x7FFF) :
				(v >= 0 && v <= 0xFFFF)
			;

		case 'string':
			return v.byteCount() === 2;
	}

	return false;
};

///
/// \brief Tests whether given variable contains a byte either as number of hex string
///        (for hex string it will be 1 byte inside)
///
IsByte = (v, signed = true) =>
{
	switch (typeof v)
	{
		case 'number':
			return signed ?
				(v >= -0x80 && v <= 0x7F) :
				(v >= 0 && v <= 0xFF)
			;

		case 'string':
			return v.byteCount() === 1;
	}

	return false;
};

  //==================//
 // Filler functions //
//==================//

///
/// \brief Creates a filler hex string with the given index and byte count
///
Filler = (idx, bc = 4) =>
	' __'.repeat(bc - 1) + (' _' + (bc === 1 ? '.' : '') + (idx < 16 ? '0' : '') + idx.toString(16))
;

///
/// \brief Background function for performing multiple swaps
///
_swap_ = (str, find, repl, cnt, bc) =>
{
	if (repl == undefined)
		return str;

	let data, dataSet;

	const needNext = Array.isArray(repl);
	if (needNext)
	{
		dataSet = [...repl]; //create a deep copy
		cnt = dataSet.length;
		data = dataSet.shift();
	}
	else
	{
		data = repl;
	}

	if (typeof data === 'number')
		data = data.toHex(bc);
	else if (data != undefined) //can be undefined to skip a match in an array
		data = data.toString();

	for (let pos = 0; cnt != 0; cnt--)
	{
		pos = str.indexOf(find, pos);
		if (pos < 0)
			break;

		if (data == undefined)
			pos += find.length;
		else
			str = str.replaceAt(pos, data, find.length);

		if (needNext)
		{
			data = dataSet.shift();

			if (typeof data === 'number')
				data = data.toHex(bc);
			else if (data != undefined)
				data = data.toString();
		}
	}

	return str;
};

///
/// \brief Swaps out each filler hex string with the corresponding actual data. Input can be single hex string or split up into parts.
///
SwapFillers = (str, ...args) =>
{
	const _ = Log.dive('SwapFillers');

	$$(_, 1.1, `Retrieve the count if provided`)
	const cnt = args.take_if('number', -1);

	$$(_, 1.2, `If specified as an array, then concatenate it`)
	if (IsArr(str))
		str = str.join('');

	$$(_, 1.3, `Ensure we actually have a string`)
	if (!IsStr(str))
		return Log.rise(str);

	$$(_, 1.4, `Retrieve the id map`)
	const idMap = args.take_if('object', null);
	if (!idMap)
		return Log.rise(str);

	for (key in idMap)
	{
		let idx, bc;
		if (typeof key === 'string')
		{
			$$(_, 2.1, `Split up the key to idx & bytecount if it is a string`)
			const parts = key.split(',');

			idx = parseInt(parts[0]);
			bc = parseInt(parts[1]);

			if (Object.is(bc, NaN))
				bc = 4;
		}
		else
		{
			$$(_, 2.2, `Otherwise just get the idx alone and setup the default bytecount`);
			idx = parseInt(key);
			bc = 4;
		}

		$$(_, 2.3, `Ensure the idx is a proper integer`)
		if (Object.is(idx, NaN))
			continue;

		$$(_, 2.4, `Get the dataSet corresponding to the id`)
		const dataSet = idMap[key];
		if (dataSet == undefined)
			continue;

		$$(_, 2.5, `Create the filler string to search`)
		const find = Filler(idx, bc);

		$$(_, 2.6, `Make the substitution`)
		str = _swap_(str, find, dataSet, cnt, bc);
	}

	return Log.rise(str);
};

///
/// \brief Background function for performing multiple swaps for same target address
///
_settgt_ = (strParts, pat, target, start, cnt, bc) =>
{
	const patParts = pat.trim().split(/ +/g);

	let pos = 0, swapped = false;
	while (pos <= strParts.length - patParts.length && cnt != 0)
	{
		if (patParts.find( (elem, i) => elem !== strParts[pos + i] ) == undefined)
		{
			swapped = true;

			const repl = (target - (start + pos + bc)).toHex(bc).trim().split(' ');
			repl.forEach( (elem, i) => strParts[pos + i] = elem);

			cnt--;
			pos += bc;
		}
		else
		{
			pos++;
		}
	}

	return swapped;
};

///
/// \brief Same as SwapFiller but with multiple substitutions at once.
///
SetFillTargets = (str, ...args) =>
{
	const _ = Log.dive('SetFillTargets');

	$$(_, 1.1, `Retrieve the count if provided`)
	const cnt = args.take_if('number', -1);

	$$(_, 1.2, `If specified as an array, then concatenate it`)
	if (IsArr(str))
		str = str.join('');

	$$(_, 1.3, `Ensure we actually have a string`)
	if (!IsStr(str))
		return Log.rise(str);

	$$(_, 1.4, `Retrieve the id map`)
	let idMap = args.take_if('object', null);
	if (!idMap)
		return Log.rise(str);

	$$(_, 1.5, `Extract the start position`);
	const start = idMap['start'] ?? 0;
	if (typeof start !== 'number')
		return Log.rise(str);

	delete idMap['start'];

	$$(_, 1.6, `Split the string into parts based on spacing`)
	let strParts = str.trim().split(/ +/g);

	let swapped = false;
	for (key in idMap)
	{
		let idx, bc;
		if (typeof key === 'string')
		{
			$$(_, 2.1, `Split up the key to idx & bytecount if it is a string`)
			const parts = key.split(',');

			idx = parseInt(parts[0]);
			bc = parseInt(parts[1]);

			if (Object.is(bc, NaN) || bc < 0 || bc > 4)
				bc = 4;
		}
		else
		{
			$$(_, 2.2, `Otherwise just get the idx alone and setup the default bytecount`);
			idx = parseInt(key);
			bc = 4;
		}

		$$(_, 2.3, `Ensure the idx is a proper integer`)
		if (Object.is(idx, NaN))
			continue;

		$$(_, 2.4, `Get the target corresponding to the id & ensure its an integer`)
		let target = idMap[key];
		if (target == undefined) //undefined or null
			continue;

		if (typeof target === 'object')
			target = target.valueOf();

		if (typeof target !== 'number')
			continue;

		$$(_, 2.3, `Create the filler string to search`)
		const find = Filler(idx, bc);

		$$(_, 2.4, `Update the array`)
		swapped = _settgt_(strParts, find, target, start, cnt, bc) || swapped;
	}

	$$(_, 3, `Reconstitute the string and return if any swap happened. Otherwise return the original`)
	return Log.rise(
		swapped
		?	' ' + strParts.join(' ')
		:	str
	);
};

  //============//
 // Converters //
//============//

///
/// \brief Wraps the given value into an array unless its already one.
///
Wrap = v =>
	v == undefined      ? [ ] :
	v.join != undefined ?  v  :
	                      [v] ;

  //=============//
 // Calculators //
//=============//

///
/// \brief Calculate the bit width of the argument which can be a number, string or register object
///
BitWidth = v =>
{
	const _ = Log.dive(`BitWidth (${v})`);

	$$(_, 1, `If the value provided is a register then simply return its width`)
	if (IsReg(v))
		return Log.rise(v.Width);

	switch (typeof v)
	{
		case 'object':
			let result = v.valueOf();
			if (typeof result !== 'number')
				result = v.toString();

			return Log.rise(BitWidth(result));

		case 'number':

			$$(_, 2, `For numbers, check within specific limits for each size`)
			return Log.rise(
				v >= -0x80 && v <= 0x7F ? 8 :
				v >= -0x8000 && v <= 0x7FFF ? 16 :
				32
			);

		case 'string':

			$$(_, 3, `For hex string return the byte count * 8`)
			let bc = v.byteCount();
			if (bc >= 0)
				return Log.rise(8 * bc);
	}

	$$(_, 4, `Return -1 for invalid cases`)
	return Log.rise(-1);
};

///
/// \brief Calculates the Distance between the given target and source (if not numbers then then target itself is returned)
///
Distance = (tgt, src) =>
	typeof tgt === 'number' && typeof src === 'number' ? tgt - src : tgt;

///
/// \brief Calculate the addresses for various indices in the array of hex strings (instructions).
///
MapAddrs = (start, arr) =>
{
	if (IsArr(start))
	{
		arr = start;
		start = 0;
	}
	if (!IsArr(arr))
		return [];

	let offset = 0;
	let result = arr.map( hex =>
	{
		const addr = start + offset;

		if (typeof hex === 'string')
			offset += hex.byteCount();

		return addr;
	});

	result.push(start + offset);

	return result;
};

  //============//
 // Extractors //
//============//

///
/// \brief Extract the switch jump address for the specified case
///
CaseAddr = (num, ...args) =>
{
	const _ = Log.dive('CaseAddr');

	$$(_, 1.1, `Extract the arguments`);
	const retnType = args.take_if('object', PHYSICAL);
	const movzxAddr = args.shift();
	let jmpDpAddr = args.take_if('number', null);
	const reflect = args.take_if('boolean', false);

	$$(_, 1.2, `Extract the MOVZX instruction`)
	const movzxIns = movzxAddr ? Instr.FromAddr(movzxAddr) : null;

	$$(_, 1.3, `Ensure the address for JMP DWORD PTR is valid`)
	if (!jmpDpAddr)
	{
		if (!movzxIns)
			Log.rise(-1);

		jmpDpAddr = movzxIns.NextAddr;
	}

	$$(_, 1.4, `Extract the JMP DWORD PTR instruction`)
	const jmpDpIns = Instr.FromAddr(jmpDpAddr);

	$$(_, 2.1, `Based on the case extract the byte being used in JMP DWORD PTR`)
	let caseByte = num;
	if (movzxIns)
	{
		const offset = Exe.Vir2Phy(movzxIns.Disp);
		if (offset < 0)
			return Log.rise(-1);

		caseByte = Exe.GetUint8(offset + num, reflect);
	}

	$$(_, 2.2, `Use the byte retrieved to extract the case target address (VIRTUAL)`)
	const offset = Exe.Vir2Phy(jmpDpIns.Disp);
	if (offset < 0)
		return Log.rise(-1);

	const caseAddr = Exe.GetInt32(offset + caseByte*4, reflect);

	$$(_, 2.3, `Return the physical address if VIRTUAL is not explicity requested`)
	return Log.rise(
		retnType === VIRTUAL
		?	caseAddr
		:	Exe.Vir2Phy(caseAddr)
	);
};

///
/// \brief Search for a particular instruction using a testing function provided
///
FindInstr = (testFn, from, to) =>
{
	_$_(`FindInstr (${testFn}}, ${from}, ${to})`, true);

	if (typeof testFn !== 'function' || typeof from !== 'number')
		return null;

	to = to ?? Exe.GetSectEnd(CODE);
	if (from >= to)
		to = Exe.GetSectEnd(DIFF);

	if (from >= to)
		return null;

	let ins = Instr.FromAddr(from);

	do
	{
		if (testFn(ins))
			return ins;

		ins.moveToNext();

	} while (ins.Addr < to);

	return null;
};

///
/// \brief Get the 'nth' instruction after the specified one. You can specify either the address or the Instr object itself
///
GetInstr = (current, n) =>
{
	let result = typeof current === 'number'
		? Instr.FromAddr(current)
		: current
		;

	if (! (result instanceof Instr) )
		return null;

	if (n > 0)
	{
		result.moveToNext();

		for (n--; n > 0; n--)
			result.moveToNext();
	}

	return result;
};

///
/// \brief Retrieves the references of an imported function
///
GetImpRefs = (funcName, dllName = null, ordinal = null) =>
{
	if (typeof FnStore !== 'undefined' && FnStore.has(funcName))
		return FnStore.get(funcName);

	const funcAddr = IsNum(ordinal)
	?	Exe.FindFunc(funcName, ordinal, dllName ?? "")
	:	Exe.FindFunc(funcName, dllName ?? "")
	;
	if (funcAddr < 0)
		return {funcAddr};

	let refAddrs = [];
	for (const pat of [
		CALL([funcAddr]),       //call dword ptr [<&func>]
		MOV(R32, [funcAddr]),   //mov regA, dword ptr [<&func>]
		MOV(EAX, [funcAddr]),   //mov eax, dword ptr [<&func>]
		PUSH([funcAddr])        //push dword ptr [<&func>]
	])
	{
		refAddrs = refAddrs.concat( Exe.FindHexN(pat) );
	}

	const result = {funcAddr, refAddrs};
	if (typeof FnStore !== 'undefined')
		FnStore.set(funcName, result);

	return result;
};

///
/// \brief Initializes the reference storage map used above. Invoke this in some 'Init' script
///
InitFnStore = () =>
	(typeof FnStore !== 'undefined' && FnStore.clear() === undefined) || (FnStore = new Map());


  //=======================//
 // Modification Wrappers //
//=======================//

///
/// \brief Higher level wrapper for insert the provided code(s) and creating a JMP/CALL to it from a specific location in the Exe
///        Extra arguments can be provided for processing the provided code before insertion
///
AutoHook = (fromAddr, codes, argMap) =>
{
	const _ = Log.dive(`AutoHook at [${fromAddr}] :`);

	$$(_, 1.1, `Retrieve the arguments`)
	const {allocSize, localVals, localTgts, values, targets, postProc, procThis, procArgs, isCall, isPtr, nops, snap, srcOffset, jcOffset} = argMap;

	$$(_, 1.2, `Allocate space`)
	const allocation = Exe.Allocate(allocSize ?? codes.byteCount(), snap ?? 0x10);
	const [free, freeVir] = allocation;

	$$(_, 2.1, `Fill in the blanks`)
	let finalCode;
	if (localVals)
	{
		for (const key in localVals)
		{
			if (IsNum(localVals[key]))
			{
				localVals[key] += freeVir;
			}
			else if (IsArr(localVals[key]))
			{
				let arr = localVals[key];
				for (let idx = 0; idx < arr.length; idx++)
				{
					if (IsNum(arr[idx]))
						arr[idx] += freeVir;
				}
			}
		}

		finalCode = SwapFillers(codes, localVals);
	}
	else
	{
		finalCode = codes;
	}

	if (values)
		finalCode = SwapFillers(finalCode, values);

	if (localTgts)
		finalCode = SetFillTargets(finalCode, localTgts);

	if (targets)
	{
		targets.start = freeVir;
		finalCode = SetFillTargets(finalCode, targets);
	}

	$$(_, 2.2, `Call any post processing function defined`)
	if (typeof postProc === 'function')
	{
		if (procThis)
			finalCode = postProc.call(procThis, finalCode, freeVir, procArgs, argMap);
		else
			finalCode = postProc(finalCode, freeVir, procArgs, argMap);
	}

	$$(_, 2.3, `Put the final code at allocated space`)
	Exe.SetHex(free, finalCode);

	$$(_, 2.4, `Call/Jump from specified address to the code OR update reference for Ptr calls/jmps/moves`)
	if (fromAddr)
	{
		const srcOff = srcOffset ?? 0;
		const tgtOff = jcOffset ?? 0;

		const _hook_ = (src) =>
		{
			if (isPtr)
			{
				Exe.SetUint32(Instr.FromAddr(src).NextAddr - 4, freeVir + tgtOff);
			}
			else
			{
				if (Exe.GetUint8(src) === (0xE8 + (isCall ? 0 : 1)))
					Exe.SetTgtAddr(src + 1, freeVir + tgtOff);
				else if (isCall)
					Exe.SetCALL(src, freeVir + tgtOff, nops ?? 0);
				else
					Exe.SetJMP(src, freeVir + tgtOff, nops ?? 0);
			}
		};

		if (IsArr(fromAddr))
		{
			fromAddr.forEach( (memAddr, idx) =>
				_hook_(memAddr + (IsArr(srcOff) ? srcOff[idx] : srcOff))
			);
		}
		else if (IsNum(fromAddr))
		{
			_hook_(fromAddr + srcOff);
		}
	}

	$$(_, 2.5, `Return the allocated addresses & size`)
	return Log.rise(allocation);
};

///
/// \brief Higher level wrapper for allocating contiguous position in DIFF instead of seperate allocations for multiple variables.
///        It returns the various VIRTUAL address in an array (same order as the size provided)
///
MultiAlloc = (...sizes) =>
{
	if (sizes.length === 0) //avoid non-empty
		return [];

	let total = 0;
	let addrs = sizes.map(elem => total += elem);

	const firstVir = Exe.Allocate(total)[1];

	addrs.forEach( (elem, idx) => addrs[idx] += firstVir);
	addrs.unshift(firstVir);

	return addrs;
};

  //===========//
 // Utilities //
//===========//

///
/// \brief Parses the data provided into 4 part array (first 3 being either M,R,M or S,I,B)
///        Data could be number, string or array of 3 values
///
ParseData = (data, scaled) =>
{
	const _ = Log.dive(`ParseData (${data}, ${scaled}) : `);

	$$(_, 1, `Initialize the parts`)
	let parts = [null, null, null, -1];

	$$(_, 2, `If the data is an array then process differently`)
	if (Array.isArray(data))
	{
		$$(_, 2.1, `Ensure it has 3 values and first one is a number`)
		if (data.length === 3 && typeof data[0] === 'number')
		{
			$$(_, 2.2, `First copy the array as is`)
			parts = data.slice();

			$$(_, 2.3, `Extract the numbers from the parts`)
			const p0 = scaled ? (Math.log(data[0]) / Math.log(2)) : data[0];
			const p1 = IsReg(data[1]) ? data[1].Index : data[1];
			const p2 = IsReg(data[2]) ? data[2].Index : data[2];

			$$(_, 2.4, `Construct the hex string and save as the 4th element`)
			if (p1 < 0 || p2 < 0) //when either is negative we need to use wildcards
			{
				parts[3] =
					' ['
				+	p0.toBits(2)
				+	(p1 < 0 ? '...' : p1.toBits(3))
				+	(p2 < 0 ? '...' : p2.toBits(3))
				+	']'
				;
			}
			else
			{
				parts[3] = p0 << 6 | p1 << 3 | p2;
			}
		}

		$$(_, 2.5, `Return the array`)
		return Log.rise(parts);
	}

	$$(_, 3, `Process string type`)
	if (typeof data === 'string')
	{
		$$(_, 3.1, `First remove any square brackets`)
		data = data.replace(/[\[ \]]+/g, '');

		if (data.length > 2)
		{
			$$(_, 3.2, `If more than 2 chars present then its in bitwise format`)

			if (data.includes('.'))
			{
				$$(_, 3.3, `Dot is wildcard for bitwise mode, if present we need to parse each part individually`)

				let bits = data.substr(0, 2); //first 2 bits
				if (!bits.includes(2))
				{
					bits = parseInt(bits, 2);
					if (scaled)
						bits = Math.pow(2, bits);
				}
				parts[0] = bits;

				bits = data.substr(2, 3); //middle 3 bits
				if (!bits.includes('.'))
					bits = parseInt(bits, 2);

				parts[1] = bits;

				bits = data.substr(5, 3); //last 3 bits
				if (!bits.includes('.'))
					bits = parseInt(bits, 2);

				parts[2] = bits;

				$$(_, 3.4, `Since the data is already the hex string, save it as the fourth element`)
				parts[3] = data;
			}
			else
			{
				$$(_, 3.5, `If no wildcard then we can convert the data into a number. Next section will parse it into the parts`)
				data = parseInt(data, 2);
			}
		}

		else if (data[0] === '?' || data[1] === '?')
		{
			$$(_, 3.6, `If wild card characters (?) are present then parse each nibble individually`)

			if (data[0] === '?')
			{
				parts[0] = '..';
				parts[1] = '..';
			}
			else
			{
				const hb = parseInt(data[0], 16); //Higher byte

				let bits = (hb >> 2) & 0b11; 	  //First 2 bits
				if (scaled)
					bits = Math.pow(2, bits);

				parts[0] = bits;
				parts[1] = hb.toBits(2); //Bits 5 & 4  (part of Middle 3 bits)
			}

			if (data[1] === '?')
			{
				parts[1] += '.';
				parts[2] = '...';
			}
			else
			{
				const lb = parseInt(data[1], 16);

				parts[1] += (lb >> 3).toBits(1); //Bit 3 (part of Middle 3 bits)
				parts[2] = lb & 0b111;	//Last 3 bits
			}

			$$(_, 3.7, `And ofcourse save the data as the fourth element`)
			parts[3] = data;
		}

		else
		{
			$$(_, 3.8, `If no wildcards for bytes then convert to number`)
			data = parseInt(data, 16);
		}
	}

	$$(_, 4, `Process Number type (Integer to be more precise)`)
	if (typeof data === 'number')
	{
		parts[0] = (data >> 6) & 0b11; 	//First 2 bits
		parts[1] = (data >> 3) & 0b111;	//Middle 3 bits
		parts[2] = (data     ) & 0b111;	//Last 3 bits
		parts[3] = data;
	}

	return Log.rise(parts);
};

///
/// \brief Throws a cancellation warning with the specified argument.
///        If default value is specified then a 'reverted' message is thrown.
///
Cancel = (arg, defVal) =>
{
	if (arg == undefined)
		throw `Cancelled`;
	else if (defVal == undefined)
		throw `Cancelled - ${arg}`;
	else
		throw `Cancelled - <b>'${arg}'</b> reverted to <b><i>${defVal}</i></b>`;
};

///
/// \brief Simple wrapper to ask Yes/No questions to user (the variable is irrelevant)
///        Primarily used in extensions
///
UserChoice = (title, prompt) =>
{
	const response = Exe.GetUserInput('.choice', D_Bool, title, prompt, true);
	Exe.ClearSavedInput('.choice');
	return response;
};

///
/// \brief A slightly better syntax for creating maps
///
MakeMap = function() //since we need 'arguments' this is a regular function
{
	let result = new Map();
	for (let i = 0; i < arguments.length; i+=2)
	{
		result.set(arguments[i], arguments[i+1]);
	}
	return result;
};

///
/// \brief Wrapper function to reload a patch if it is already selected.
///
ReloadPatch = (name, ...args) =>
{
	if (Warp.GetPatchState(name))
	{
		const funcName = args.take_if('string', name);
		const sendName = args.take_if('boolean', false);

		Exe.SetActivePatch(name);
		Exe.ClearPatch();

		let cmd = `${funcName}.call(${name},`;
		if (sendName)
			cmd += `"${name}",`;

		cmd += `${args})`;

		return eval(cmd);
	}
};


  //====================//
 // Syntax Identifiers //
//====================//

///
/// \brief Simple wrapper
///
Identify = Warp.identify;

///
/// \brief Adds a class and all its properties to SyntaxAssistant
///        for identification in the Script Editor
///
IdentifyClass = (type, props = []) =>
	Warp.identify(
		type.name,
		Object.getOwnPropertyNames(type),
		Object.keys(new type()).concat(
			Object.getOwnPropertyNames(type.prototype)
		).concat( props )
	);

///
/// \brief Adds an object and all its properties to SyntaxAssistant
///        for identification in the Script Editor
///
IdentifyObj = objName =>
{
	if ( eval(`typeof ${objName}`) != undefined )
		Warp.identify(objName, Object.getOwnPropertyNames(eval(objName)) );
};

///
/// \brief Assigns the code's result to the name and identifies it to the Script Editor.
///
Assign = (name, code) =>
{
	eval(`${name} = ${code}`);
	IdentifyObj(name);
};

///
/// \brief Assigns the string value to the name and identifies it to the Script Editor.
///
AssignStr = (name, value) =>
{
	eval(`${name} = "${value}"`);
	IdentifyObj(name);
};

  //=================//
 // Identifications //
//=================//

for (const name of
[
	'IsNum', 'IsStr', 'IsBool', 'IsArr',
	'IsNumOrStr', 'IsWord', 'IsByte',
	'Filler', 'SwapFillers', 'SetFillTargets',
	'Wrap', 'BitWidth', 'Distance',
	'PatchReporter', 'MakeMap', 'ReloadPatch',
	'CaseAddr', 'ParseData', 'GetImpRefs',
	'FindInstr', 'GetInstr', 'AutoHook', 'MultiAlloc',
	'Identify', 'IdentifyClass', 'IdentifyObj',
	'Assign', 'AssignStr',

//from AllDebug
	"$$", "$$$", "$_", "_$_",
	"Debug", "Info", "Dump", "NewLine",
	"ShowAddr", "ShowAddrs", "ShowArr",
	"DumpFunc", "ShowVar",
	"ResetC", "IncrC", "ShowC"
])
	IdentifyObj(name);

//from Log.mjs
const members = [
	"Tee", "start", "stop", "show",
	"write", "cc", "dive", "rise",
	"setDepth", "valid"
];
Identify("Log", members, members);
