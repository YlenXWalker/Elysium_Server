/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-01                                             *
*   Last Modified : 2024-08-07                                             *
*                                                                          *
\**************************************************************************/

  //==================//
 // Helper functions //
//==================//

///
/// \brief Create functions for regular SSE instructions
///
const _define_with = (prefix, ...sets) =>
{
	for (const [name, ocRP, ocPR, ocRR] of sets)
		Assign(name, `function(){ return _xmm_cmd(${ocRP}, ${ocPR}, ${ocRR}, arguments, ${prefix}) }`);
};

///
/// \brief Create functions for SSE instructions with muxing
///
const _define_mux_with = (prefix, ...names) =>
{
	names.forEach( (name, idx) =>
		Assign(name, `function(){ return _xmm_cmd_Mux(${idx}, arguments, ${prefix}) }`)
	);
}

  //=============================//
 // SSE Instrutions - no prefix //
//=============================//

///
/// \brief Regular versions
///
_define_with(''  ,
	['MOVUPS'    , 0x10, 0x11, 0x10],	//DQWORD PTR
	['MOVLPS'    , 0x12, 0x13, null],	//QWORD PTR
	['UNPCKLPS'  , 0x14, null, 0x14],	//DQWORD PTR
	['UNPCKHPS'  , 0x15, null, 0x15],	//DQWORD PTR
	['MOVHPS'    , 0x16, 0x17, null],	//QWORD PTR
	['MOVAPS'    , 0x28, 0x29, 0x28],	//DQWORD PTR
	['CVTPI2PS'  , 0x2A, null, 0x2A],	//QWORD PTR
	['MOVNTPS'   , null, 0x2B, null],	//DQWORD PTR
	['CVTTPS2PI' , 0x2C, null, 0x2C],	//QWORD PTR
	['CVTPS2PI'  , 0x2D, null, 0x2D],	//QWORD PTR
	['UCOMISS'   , 0x2E, null, 0x2E],	//DWORD PTR
	['COMISS'    , 0x2F, null, 0x2F],	//DWORD PTR

	['SQRTPS'    , 0x51, null, 0x51],	//DQWORD PTR
	['RSQRTPS'   , 0x52, null, 0x52],	//DQWORD PTR
	['RCPPS'     , 0x53, null, 0x53],	//DQWORD PTR
	['ANDPS'     , 0x54, null, 0x54],	//DQWORD PTR
	['ANDNPS'    , 0x55, null, 0x55],	//DQWORD PTR
	['ORPS'      , 0x56, null, 0x56],	//DQWORD PTR
	['XORPS'     , 0x57, null, 0x57],	//DQWORD PTR
	['ADDPS'     , 0x58, null, 0x58],	//DQWORD PTR
	['MULPS'     , 0x59, null, 0x59],	//DQWORD PTR
	['CVTPS2PD'  , 0x5A, null, 0x5A],	//QWORD PTR
	['CVTDQ2PS'  , 0x5B, null, 0x5B],	//DQWORD PTR
	['SUBPS'     , 0x5C, null, 0x5C],	//DQWORD PTR
	['MINPS'     , 0x5D, null, 0x5D],	//DQWORD PTR
	['DIVPS'     , 0x5E, null, 0x5E],	//DQWORD PTR
	['MAXPS'     , 0x5F, null, 0x5F],	//DQWORD PTR

	['PSHUFW'    , 0x70, null, 0x70],	//QWORD PTR
	['SHUFPS'    , 0xC6, null, 0xC6],	//DQWORD PTR

	['MOVNTQ'    , null, 0xE7, null] 	//QWORD PTR
);

///
/// \brief Instructions supporting Operand Override
///
for (const [name, opcode] of
[
	['PUNPCKLBW' , 0x60],	//QWORD or DQWORD PTR
	['PUNPCKLWD' , 0x61],	//QWORD or DQWORD PTR
	['PUNPCKLDQ' , 0x62],	//QWORD or DQWORD PTR
	['PACKSSWB'  , 0x63],	//QWORD or DQWORD PTR
	['PCMPGTB'   , 0x64],	//QWORD or DQWORD PTR
	['PCMPGTW'   , 0x65],	//QWORD or DQWORD PTR
	['PCMPGTD'   , 0x66],	//QWORD or DQWORD PTR
	['PACKUSWB'  , 0x67],	//QWORD or DQWORD PTR
	['PUNPCKHBW' , 0x68],	//QWORD or DQWORD PTR
	['PUNPCKHWD' , 0x69],	//QWORD or DQWORD PTR
	['PUNPCKHDQ' , 0x6A],	//QWORD or DQWORD PTR
	['PACKSSDW'  , 0x6B],	//QWORD or DQWORD PTR

	['PCMPEQB'   , 0x74],	//QWORD or DQWORD PTR
	['PCMPEQW'   , 0x75],	//QWORD or DQWORD PTR
	['PCMPEQD'   , 0x76],	//QWORD or DQWORD PTR

	['PINSRW'    , 0xC4],	//WORD PTR

	['PSRLW'     , 0xD1],	//QWORD or DQWORD PTR
	['PSRLD'     , 0xD2],	//QWORD or DQWORD PTR
	['PSRLQ'     , 0xD3],	//QWORD or DQWORD PTR
	['PADDQ'     , 0xD4],	//QWORD or DQWORD PTR
	['PMULLW'    , 0xD5],	//QWORD or DQWORD PTR
	['PSUBUSB'   , 0xD8],	//QWORD or DQWORD PTR
	['PSUBUSW'   , 0xD9],	//QWORD or DQWORD PTR
	['PMINUB'    , 0xDA],	//QWORD or DQWORD PTR
	['PAND'      , 0xDB],	//QWORD or DQWORD PTR
	['PADDUSB'   , 0xDC],	//QWORD or DQWORD PTR
	['PADDUSW'   , 0xDD],	//QWORD or DQWORD PTR
	['PMAXUB'    , 0xDE],	//QWORD or DQWORD PTR
	['PANDN'     , 0xDF],	//QWORD or DQWORD PTR

	['PAVGB'     , 0xE0],	//QWORD or DQWORD PTR
	['PSRAW'     , 0xE1],	//QWORD or DQWORD PTR
	['PSRAD'     , 0xE2],	//QWORD or DQWORD PTR
	['PAVGW'     , 0xE3],	//QWORD or DQWORD PTR
	['PMULHUW'   , 0xE4],	//QWORD or DQWORD PTR
	['PMULHW'    , 0xE5],	//QWORD or DQWORD PTR

	['PSUBSB'    , 0xE8],	//QWORD or DQWORD PTR
	['PSUBSW'    , 0xE9],	//QWORD or DQWORD PTR
	['PMINSW'    , 0xEA],	//QWORD or DQWORD PTR
	['POR'       , 0xEB],	//QWORD or DQWORD PTR
	['PADDSB'    , 0xEC],	//QWORD or DQWORD PTR
	['PADDSW'    , 0xED],	//QWORD or DQWORD PTR
	['PMAXSW'    , 0xEE],	//QWORD or DQWORD PTR
	['PXOR'      , 0xEF],	//QWORD or DQWORD PTR

	['PSLLW'     , 0xF1],	//QWORD or DQWORD PTR
	['PSLLD'     , 0xF2],	//QWORD or DQWORD PTR
	['PSLLQ'     , 0xF3],	//QWORD or DQWORD PTR
	['PMULUDQ'   , 0xF4],	//QWORD or DQWORD PTR
	['PMADDWD'   , 0xF5],	//QWORD or DQWORD PTR
	['PSADBW'    , 0xF6],	//QWORD or DQWORD PTR
	['PSUBB'     , 0xF8],	//QWORD or DQWORD PTR
	['PSUBW'     , 0xF9],	//QWORD or DQWORD PTR
	['PSUBD'     , 0xFA],	//QWORD or DQWORD PTR
	['PSUBQ'     , 0xFB],	//QWORD or DQWORD PTR
	['PADDB'     , 0xFC],	//QWORD or DQWORD PTR
	['PADDW'     , 0xFD],	//QWORD or DQWORD PTR
	['PADDD'     , 0xFE]	//QWORD or DQWORD PTR
])
	Assign( name, `function() { return _xmm_cmd_OO(${opcode}, arguments)}` );

///
/// \brief Mixed instructions (multiple operations in one)
///
_define_mux_with('',
	'CMPEQPS', 'CMPLTPS', 'CMPLEPS', 'CMPUNORDPS',
	'CMPNEQPS', 'CMPNLTPS', 'CMPNLEPS', 'CMPORDPS',
	'CMPPS'
);

  //=====================================//
 // SSE Instructions - REPN (F3) prefix //
//=====================================//

_define_with('IREPN',
	['MOVSS'       , 0x10, 0x11, 0x10],	//DWORD PTR
	['MOVSLDUP'    , 0x12, null, 0x12],	//DQWORD PTR
	['MOVSHDUP'    , 0x16, null, 0x16],	//DQWORD PTR

	['CVTSI2SS'    , 0x2A, null, 0x2A],	//DWORD PTR
	['MOVNTSS'     , null, 0x2B, null],	//DWORD PTR
	['CVTTSS2SI'   , 0x2C, null, 0x2C],	//DWORD PTR
	['CVTSS2SI'    , 0x2D, null, 0x2D],	//DWORD PTR

	['SQRTSS'      , 0x51, null, 0x51],	//DWORD PTR
	['RSQRTSS'     , 0x52, null, 0x52],	//DWORD PTR
	['RCPSS'       , 0x53, null, 0x53],	//DWORD PTR
	['ADDSS'       , 0x58, null, 0x58],	//DWORD PTR
	['MULSS'       , 0x59, null, 0x59],	//DWORD PTR
	['CVTSS2SD'    , 0x5A, null, 0x5A],	//DWORD PTR
	['CVTTPS2DQ'   , 0x5B, null, 0x5B],	//DQWORD PTR
	['SUBSS'       , 0x5C, null, 0x5C],	//DWORD PTR
	['MINSS'       , 0x5D, null, 0x5D],	//DWORD PTR
	['DIVSS'       , 0x5E, null, 0x5E],	//DWORD PTR
	['MAXSS'       , 0x5F, null, 0x5F],	//DWORD PTR

	['MOVDQU'      , 0x6F, 0x7F, 0x6F],	//DQWORD PTR

	['PSHUFHW'     , 0x70, null, 0x70],	//DQWORD PTR
	['CVTDQ2PD'    , 0xE6, null, 0xE6] 	//QWORD PTR
);

///
/// \brief Mixed instructions (multiple operations in one)
///
_define_mux_with('IREPN',
	'CMPEQSS', 'CMPLTSS', 'CMPLESS', 'CMPUNORDSS',
	'CMPNEQSS', 'CMPNLTSS', 'CMPNLESS', 'CMPORDSS',
	'CMPSS'
);

  //=====================================//
 // SSE Instructions - REPE (F2) prefix //
//=====================================//

_define_with('IREPE',
	['MOVSD'       , 0x10, 0x11, 0x10],	//QWORD PTR
	['MOVDDUP'     , 0x12, null, 0x12],	//QWORD PTR

	['CVTSI2SD'    , 0x2A, null, 0x2A],	//QWORD PTR
	['MOVNTSD'     , null, 0x2B, null],	//QWORD PTR
	['CVTTSD2SI'   , 0x2C, null, 0x2C],	//QWORD PTR
	['CVTSD2SI'    , 0x2D, null, 0x2D],	//QWORD PTR

	['SQRTSD'      , 0x51, null, 0x51],	//QWORD PTR
	['ADDSD'       , 0x58, null, 0x58],	//QWORD PTR
	['MULSD'       , 0x59, null, 0x59],	//QWORD PTR
	['CVTSD2SS'    , 0x5A, null, 0x5A],	//QWORD PTR
	
	['SUBSD'       , 0x5C, null, 0x5C],	//QWORD PTR
	['MINSD'       , 0x5D, null, 0x5D],	//QWORD PTR
	['DIVSD'       , 0x5E, null, 0x5E],	//QWORD PTR
	['MAXSD'       , 0x5F, null, 0x5F],	//QWORD PTR

	['PSHUFLW'     , 0x70, null, 0x70],	//DQWORD PTR
	['CVTPD2DQ'    , 0xE6, null, 0xE6] 	//DQWORD PTR
);

///
/// \brief Mixed instructions (multiple operations in one)
///
_define_mux_with('IREPE',
	'CMPEQSD', 'CMPLTSD', 'CMPLESD', 'CMPUNORDSD',
	'CMPNEQSD', 'CMPNLTSD', 'CMPNLESD', 'CMPORDSD',
	'CMPSD'
);

  //===================================================//
 // SSE Instructions - Implicit Operand Override (66) //
//===================================================//

///
/// \brief Regular Versions
///
_define_with('OPCH',
	['MOVUPD'      , 0x10, 0x11, 0x10],	//DQWORD PTR
	['MOVLPD'      , 0x12, 0x13, null],	//QWORD PTR
	['UNPCKLPD'    , 0x14, null, null],	//DQWORD PTR
	['UNPCKHPD'    , 0x15, null, null],	//DQWORD PTR
	['MOVHPD'      , 0x16, 0x17, null],	//QWORD PTR
	['MOVAPD'      , 0x28, 0x29, 0x28],	//DQWORD PTR
	['CVTPI2PD'    , 0x2A, null, 0x2A],	//QWORD PTR
	['MOVNTPD'     , null, 0x2B, null],	//DQWORD PTR
	['CVTTPD2PI'   , 0x2C, null, 0x2C],	//DQWORD PTR
	['CVTPD2PI'    , 0x2D, null, 0x2D],	//DQWORD PTR
	['UCOMISD'     , 0x2E, null, 0x2E],	//QWORD PTR
	['COMISD'      , 0x2F, null, 0x2F],	//QWORD PTR

	['SQRTPD'      , 0x51, null, 0x51],	//DQWORD PTR
	['ANDPD'       , 0x54, null, 0x54],	//DQWORD PTR
	['ANDNPD'      , 0x55, null, 0x55],	//DQWORD PTR
	['ORPD'        , 0x56, null, 0x56],	//DQWORD PTR
	['XORPD'       , 0x57, null, 0x57],	//DQWORD PTR
	['ADDPD'       , 0x58, null, 0x58],	//DQWORD PTR
	['MULPD'       , 0x59, null, 0x59],	//DQWORD PTR
	['CVTPD2PS'    , 0x5A, null, 0x5A],	//DQWORD PTR
	['CVTPS2DQ'    , 0x5B, null, 0x5B],	//DQWORD PTR
	['SUBPD'       , 0x5C, null, 0x5C],	//DQWORD PTR
	['MINPD'       , 0x5D, null, 0x5D],	//DQWORD PTR
	['DIVPD'       , 0x5E, null, 0x5E],	//DQWORD PTR
	['MAXPD'       , 0x5F, null, 0x5F],	//DQWORD PTR

	['PUNPCKLQDQ'  , 0x6C, null, 0x6C],	//DQWORD PTR
	['PUNPCKHQDQ'  , 0x6D, null, 0x6D],	//DQWORD PTR
	['MOVDQA'      , 0x6F, 0x7F, 0x6F],	//DQWORD PTR

	['PSHUFD'      , 0x70, null, 0x70],	//DQWORD PTR

	['HADDPD'      , 0x7C, null, 0x7C],	//DQWORD PTR
	['HSUBPD'      , 0x7D, null, 0x7D],	//DQWORD PTR

	['SHUFPD'      , 0xC6, null, 0xC6],	//DQWORD PTR
	['ADDSUBPD'    , 0xD0, null, 0xD0],	//DQWORD PTR

	['CVTTPD2DQ'   , 0xE6, null, 0xE6],	//DQWORD PTR
	['MOVNTDQ'     , null, 0xE7, null]	//DQWORD PTR
);

///
/// \brief Mixed instructions (multiple operations in one)
///
_define_mux_with('OPCH',
	'CMPEQPD', 'CMPLTPD', 'CMPLEPD', 'CMPUNORDPD',
	'CMPNEQPD', 'CMPNLTPD', 'CMPNLEPD', 'CMPORDPD',
	'CMPPD'
);

  //=======================//
 // Underlying Generators //
//=======================//

///
/// \brief Create Hex for regular SSE instructions
///
_xmm_cmd = (ocRP, ocPR, ocRR, args, pre) =>
{
	let data = new OpData(args);

	let opCode;
	switch (data.OpType)
	{
		case OpTypes.R_P:
		case OpTypes.A_D:
			if (ocRP != undefined)
				opCode = [0x0F, ocRP];

			break;

		case OpTypes.P_R:
		case OpTypes.D_A:
			if (ocPR != undefined)
				opCode = [0x0F, ocPR];

			break;

		case OpTypes.R_R:
			if (ocRR != undefined)
				opCode = [0x0F, ocRR];

			break;

		default:
			break;
	}

	if (opCode != undefined)
	{
		if (pre instanceof IPrefix)
			data.Prefix.push(pre);

		return Instr.FromParts(data, opCode).toString();
	}
	else
	{
		return '';
	}
};

///
/// \brief Create the hex for all the SSE instructions with OpSize check & Override
///
_xmm_cmd_OO = (ocS, args) =>
{
	let data = new OpData(args);
	switch (data.OpType)
	{
		case OpTypes.R_P:
		case OpTypes.A_D:
		case OpTypes.R_R:
			if (data.OpSize === 128)
				data.Prefix.push(OPCH);

			return Instr.FromParts(data, [0x0F, ocS]).toString();
	}

	return '';
};

///
/// \brief Creates the hex for SSE instructions with multiple operations
///        using supplied immediate value
///
_xmm_cmd_Mux = (index, args, pre) =>
{
	let data = new OpData(args);

	switch (data.OpType)
	{
		case OpTypes.R_P:
		case OpTypes.A_D:
		case OpTypes.R_R:
			if (index <= 8)
			{
				data.Immd = index;
				data.ImSize = 8;
			}
			if (pre instanceof IPrefix)
				data.Prefix.push(pre);

			return Instr.FromParts(data, [0x0F, 0xC2]).toString();
	}

	return '';
};

  //========//
 // Movers //
//========//

///
/// \brief Moving DWORD to float registers and back
///
MOVD = function()
{
	let data = new OpData(arguments);
	let opCode;

	switch (data.OpType)
	{
		case OpTypes.R_P:
		case OpTypes.A_D:
			opCode = [0x0F, 0x6E];
			break;

		case OpTypes.P_R:
		case OpTypes.D_A:
			opCode = [0x0F, 0x7E];
			break;

		case OpTypes.R_R:
			opCode = [0x0F, data.SrcReg.Width === 32 ? 0x6E : 0x7E];//one of the registers should be 32 bit
			break;

		default:
			return '';
	}
	if (data.OpSize === 128)
		data.Prefix.push(OPCH);

	return Instr.FromParts(data, opCode).toString();
};

IdentifyObj('MOVD');

///
/// \brief Moving QWORD to float registers and back
///
MOVQ = function()
{
	let data = new OpData(arguments);

	let opCode;
	switch (data.OpType)
	{
		case OpTypes.R_P:
		case OpTypes.A_D:
		case OpTypes.R_R:
			if (data.OpSize === 128)
			{
				data.Prefix.push(IREPN);
				opCode = [0x0F, 0x7E];
			}
			else
			{
				opCode = [0x0F, 0x6F];
			}
			break;

		case OpTypes.P_R:
		case OpTypes.D_A:
			if (data.OpSize === 128)
			{
				data.Prefix.push(OPCH);
				opCode = [0x0F, 0xD6];
			}
			else
			{
				opCode = [0x0F, 0x7F];
			}
			break;

		default:
			return '';
	}

	return Instr.FromParts(data, opCode).toString();
};

IdentifyObj('MOVQ');
