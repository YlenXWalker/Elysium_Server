/**************************************************************************\
*                                                                          *
*   Copyright (C) 2021-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2021-08-20                                             *
*   Last Modified : 2024-08-07                                             *
*                                                                          *
\**************************************************************************/

// MODULE_NAME => OpCodeList

///
/// \brief Expecting ModR/M byte
///
export const WithModRM = [
	0x00, 0x01, 0x02, 0x03, 0x08, 0x09, 0x0A, 0x0B,
	0x10, 0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
	0x20, 0x21, 0x22, 0x23, 0x28, 0x29, 0x2A, 0x2B,
	0x30, 0x31, 0x32, 0x33, 0x38, 0x39, 0x3A, 0x3B,
	//0x4# - 0x5# are INC reg32, DEC reg32, PUSH reg32 & POP reg32
	0x62, 0x63, 0x69, 0x6B,
	//0x7# are all Conditional SHORT jumps
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	//0x9# - 0xA# are all having implicit arguments
	//0xB# are all the MOV reg, <imm> instructions
	0xC0, 0xC1, 0xC4, 0xC5, 0xC6, 0xC7,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	//0xE# are having implicit arguments
	0xF3, 0xF6, 0xF7, 0xFE, 0xFF
];

///
/// \brief Expecting 8 bit immediate
///
export const WithImm8 = [
	0x04, 0x0C,
	0x14, 0x1C,
	0x24, 0x2C,
	0x34, 0x3C,
	//0x4# - 0x5# are INC reg32, DEC reg32, PUSH reg32 & POP reg32
	0x6A, 0x6B,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x82, 0x83,
	0xA8,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
	0xC0, 0xC1, 0xC6, 0xCD,
	0xD4, 0xD5,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xEB,
	0xF6
];

///
/// \brief Expecting 16bit imm even without 0x66 prefix (operand modifier prefix)
///
export const WithImm16 = [
	0xC2, 0xC8, 0xCA //C8 (ENTER) has an extra byte at the end for nesting level
];

///
/// \brief Expecting 32bit immediate
///
export const WithImm32 = [
	0x05, 0x0D,
	0x15, 0x1D,
	0x25, 0x2D,
	0x35, 0x3D,
	//0x4# - 0x5# are INC reg32, DEC reg32, PUSH reg32 & POP reg32
	0x68, 0x69,
	//0x7# are all Conditional SHORT jumps
	0x81,
	0x9A, //this is FAR CALL, so it also has Seg member after the Imm32
	0xA9,
	0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0xC7,
	//0xD# are all either byte/word dependent or has implicit args
	0xE8, 0xE9, 0xEA, //EA is FAR JMP, so it also has Seg member after the Imm32
	0xF7,
];

///
/// \brief Expecting a 32 bit displacement
///
export const WithDisp32 = [
	0xA0, 0xA1, 0xA2, 0xA3,
];

///
/// \brief Secondary opcodes without ModR/M byte - smaller list than the alternative
///
export const SecWithoutModRM = [
	0x05, 0x06, 0x07, 0x08, 0x09, 0x0B, 0x0E,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x37,
	0x77,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0xA0, 0xA1, 0xA2, 0xA8, 0xA9, 0xAA,
	0xB9,
	0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
];

///
/// \brief Secondary opcodes with 8 bit Immediate value
///
export const SecWithImm8 = [
	0x70,
	0xA4, 0xAC,
	0xC2, 0xC4, 0xC6
];

///
/// \brief Secondary opcodes with 32 bit Immediate value
///
export const SecWithImm32 = [
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
];

///
/// \brief Tertiary opcode with 8 bit Immediate value
///
export const TerWithImm8 = [
	0x0F
];

///
/// \brief Far type instructions
///
export const FarType = [
	0x9A,
	0xEA
];

///
/// \brief Primary opcodes that reverse the direction (for e.g. DWORD PTR becomes the source)
///
export const Reverse = [
	0x02, 0x03, 0x0A, 0x0B,
	0x12, 0x13, 0x1A, 0x1B,
	0x22, 0x23, 0x2A, 0x2B,
	0x32, 0x33, 0x3A, 0x3B,
	0x69, 0x6B,
	0x8A, 0x8B, 0x8D, 0x8E,
	0xA1, 0xA2,
];

///
/// \brief Secondary opcodes that don't reverse the direction (DWORD PTR is always the source for the most of them)
///
export const SecNonReverse = [
	0x00, 0x01,
	0x11, 0x13, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x29, 0x2B,
	0x78, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA3, 0xA4, 0xA5, 0xAB, 0xAC, 0xAD, 0xAE,
	0xB0, 0xB1, 0xB3, 0xBB,
	0xC0, 0xC1, 0xC3,
	0xE7,
];

///
/// \brief Override to avoid type error in string context
///
export function toString()
{
	return "OcList";
}
