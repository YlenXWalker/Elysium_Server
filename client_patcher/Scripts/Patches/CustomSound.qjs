/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2023 CH.C (jchcc)                                   *
*   Copyright (C) 2024 Neo Mind                                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : CH.C (jchcc), Neo Mind                                 *
*   Created Date  : 2020-11-22                                             *
*   Last Modified : 2024-08-08                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Swap the sampling frequency from 22050 to 44100
///
Enable44kHzAudio = function(_)
{
	$$(_, 1, `Find the code assigning the sampling frequency`)
	const memLoc = Exe.BuildDate < 20131200 ? [POS3WC] : [ESI, POS2WC]; //[CDigitalRate] or [ESI + CSoundMgr.digitalrate]
	const code =
		MOV(memLoc, 8000)  //mov dword ptr [memLoc], 1F40h
	+	JMP(0x16)          //jmp short _next
	+	MOV(memLoc, 11025) //mov dword ptr [memLoc], 2B11h
	+	JMP(0x0A)          //jmp short _next
	+	MOV(memLoc, 22050) //mov dword ptr [memLoc], 5622h
	;
	const addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Frequency assignment missing");

	/*
	let digitalRateOffsets = [[2, 4], [14, 4], [26, 4]];
	for (let i = 0; i < digitalRateOffsets.length; i++)
	{
		logField("CSoundMgr::digitalrate", addr, digitalRateOffsets[i]);
	}
	*/

	$$(_, 2, `Change 22050 to 44100`)
	Exe.SetInt32(addr + code.byteCount() - 4, 44100);

	return true;
};

//TODO - Pre-VC11 clients are failing.

///
/// \brief Insert custom code to auto mute audio when game window is inactive
///
AutoMute = function(_)
{
	$$(_, 1.1, `Find the reference code to retrieve Audio specific functions & global values.`)
	let parts =
	[
		PUSH(POS4WC)        //push offset "Bgm_Volume"

	,//1
		CALL(ALLWC)         //call CSession::GetOptionValue
	+	PUSH_EAX            //push eax
	+	MOV(ECX, ESI)       //mov ecx, esi

	,//2
	 	CALL(ALLWC)         //call CSession::SetStreamVol
	+	MOV(ESI, [POS4WC])  //mov esi, dword ptr [g_soundMgr]
	+	MOV(ECX, ESI)       //mov ecx, esi
	+	CALL(ALLWC)         //call CSoundMgr::GetStreamVolume
	+	PUSH_EAX            //push eax
	+	MOV(ECX, ESI)       //mov ecx, esi
	+	CALL(ALLWC)         //call CSoundMgr::SetStreamVol2
	+	MOV(ECX, [POS4WC])  //mov ecx, dword ptr [g_soundMgr]
	+	PUSH(EDI)           //push edi

	,//3
		CALL(ALLWC)         //call CSoundMgr::Set2DEffectVolume

	,//4
		MOV(ECX, [POS4WC])  //mov ecx, dword ptr [g_soundMgr]
	+	PUSH(EDI)           //push edi

	,//5
		CALL(ALLWC)         //call CSoundMgr::Set3DEffectVolume
	];

	let addr = Exe.FindHex(parts);
	if (addr < 0)
	{
		parts[0] +=
			MOV(ECX, EBX)   //mov ecx, ebx
		+	MOV(EDI, EAX)   //mov edi, eax
		;

		addr = Exe.FindHex(parts);
	}
	if (addr < 0)
	    throw Error("Reference pattern missing");

	$$(_, 1.2, `Extract all required values`)
	const addrs = MapAddrs(addr, parts);

	const SetStreamVol = Exe.GetTgtAddr(addrs[2] + 1);
	const Set2DEffectVol = Exe.GetTgtAddr(addrs[3] + 1);
	const Set3DEffectVol = Exe.GetTgtAddr(addrs[5] + 1);
	const MovMgr = Instr.FromAddr(addrs[4]);

	$$(_, 2.1, `Find the CGameMode::OnUpdate function`)
    parts = [
		TEST(EAX, EAX)       //test eax, eax
	+	JNZ(0x1A)            //jnz short _skip
	+	MOV(ECX, [POS4WC])   //mov ecx, dword ptr [g_WindowMgr.m_UIReplayControlWnd]
	+	PUSH_0               //push 0
	,
		PUSH_0               //push 0
	+	PUSH_0               //push 0
	,
		MOV(EAX, [ECX])      //mov eax, dword ptr [ecx]
	,
		PUSH_0               //push 0
	+	PUSH(0x23)           //push 23h
	+	PUSH_0               //push 0
	+	CALL([EAX, POS2WC])  //call dword ptr [eax + UIReplayControlWnd_vtable.UIReplayControlWnd_SendMsg]
	];
	addr = Exe.FindHex(parts);

	/*
    let UIReplayControlWndOffset = [6, 4];
    let SendMsgOffset = [26, 4];
	*/

	if (addr < 0) //try shifting the MOV EAX instruction upwards.
	{
		[parts[1], parts[2]] = [parts[2], parts[1]];
		addr = Exe.FindHex(parts);
	}
	if (addr < 0)
		throw Error("OnUpdate function missing");

	/*
	logFieldAbs("UIWindowMgr::m_UIReplayControlWnd", addr, UIReplayControlWndOffset);
	logField("UIReplayControlWnd_vtable::SendMsg", addr, SendMsgOffset)
	*/

	$$(_, 2.2, `Find the g_Weather assignment after it`)
    let code =
		CALL(ALLWC)      //call UIWindowMgr::InvalidateAll
	+	MOV(ECX, POS4WC) //mov ecx, <g_Weather>           <--Need to issue CALL from here to our code
	+	CALL(ALLWC)      //call CWeather::Process
	+	CMP([POS4WC], 0) //cmp dword ptr [g_isAppActive], 0
	+	(ROC.FullVer == 14.29
	?
		JNZ(0x14)         //jnz short _next#1
	+	CALL(ALLWC)      //call func#2
	+	MOV(ECX, EAX)    //mov ecx, eax
	:
		JNZ(0xD)         //jnz short _next#1
	+	CMP([POS4WC], 0) //cmp dword ptr [g_3dDevice.m_bIsFullscreen], 0
	+	JNZ()            //jnz _next#2
	);

	addr = Exe.FindHex(code, addr, addr + 0x500);

	/*
	let jmpOffset = 5;
	let UIWindowMgr_InvalidateAllOffset = 1;
	let g_WeatherOffset = 6;
	let CWeather_Process = 11;
	let g_isAppActiveOffset = 17;
	let m_bIsFullscreenOffset = [26, 4];
	*/
	if (addr < 0)
		throw Error("g_Weather not assigned");

	/*
	logRawFunc("UIWindowMgr::InvalidateAll", addr, UIWindowMgr_InvalidateAllOffset);
	logVaVar("g_Weather", addr, g_WeatherOffset);
	logRawFunc("CWeather_Process", addr, CWeather_Process);
	logVaVar("g_isAppActive", addr, g_isAppActiveOffset);
	logFieldAbs("C3dDevice::m_bIsFullscreen", addr, m_bIsFullscreenOffset);
	*/

	$$(_, 2.3, `Save the location of the MOV ECX`)
	const hookAddr = addr + 5;

	$$(_, 3.1, `Find the needed imported functions`)
	const GetActiveWindow = Exe.FindFunc("GetActiveWindow", "USER32.dll");
	if (GetActiveWindow < 0)
		throw Error("GetActiveWindow not found");

	const timeGetTime = Exe.FindFunc("timeGetTime");
	if (timeGetTime < 0)
		throw Error("timeGetTime missing");

	$$(_, 3.2, `Construct our function code`)
	const MovNRetn = Instr.FromAddr(hookAddr) + RETN();

	parts =
	[
		CALL([timeGetTime])      //call dword ptr [<&WINMM.timeGetTime>]
	+	CMP(EAX, [Filler(1)])    //cmp eax, dword ptr [lastCheck]
	+	JGE(6)                   //jge short _proceed1
	+	MovNRetn                 //mov ecx, <g_Weather>
		                         //retn

	,//1
		ADD(EAX, 500)            //add eax, 1F4h (500) ; _proceed1
	+	MOV([Filler(1)], EAX)    //mov dword ptr [lastCheck], eax
	+	CMP([Filler(2)], 1)      //cmp dword ptr [isMuted], 1
	+	JE(Filler(8,1))          //je short _skipToCall
	+	MovMgr                   //mov ecx, dword ptr [g_soundMgr]
	+	MOV(EAX, [ECX, 0xEC])    //mov eax, dword ptr [ecx + ECh]
	+	MOV([Filler(3)], EAX)    //mov dword ptr [bgmVol], eax
	+	MOV(EAX, [ECX, 0xF0])    //mov eax, dword ptr [ecx + F0h]
	+	MOV([Filler(4)], EAX)    //mov dword ptr [effVol], eax

	,//2
		CALL([GetActiveWindow])  //call dword ptr [GetActiveWindow] ; _skipToCall
	+	MovMgr                   //mov ecx, dword ptr [g_soundMgr]
	+	TEST(EAX, EAX)           //test eax, eax
	+	JE(Filler(9,1))          //je short _cmpMute
	+	CMP([Filler(2)], 0)      //cmp dword ptr [isMuted], 0
	+	JNE(6)                   //jne short _proceed2
	+	MovNRetn                 //mov ecx, <g_Weather>
		                         //retn

	,//3
		XOR(EAX, EAX)            //xor eax, eax ; _proceed2
	+	MOV([Filler(2)], EAX)    //mov dword ptr [isMuted], eax
	+	PUSH([Filler(4)])        //push dword ptr [effVol]
	+	CALL(Filler(5))          //call CSoundMgr::Set2DEffectVolume
	+	PUSH([Filler(4)])        //push dword ptr [effVol]
	+	CALL(Filler(6))          //call CSoundMgr::Set3DEffectVolume
	+	PUSH([Filler(3)])        //push [bgmVol]
	+	CALL(Filler(7))          //call CSoundMgr::SetStreamVol
	+	MovNRetn                 //mov ecx, <g_Weather>
		                         //retn

	,//4
		CMP([Filler(2)], 1)      //cmp dword ptr [isMuted], 1 ; _cmpMute
	+	JNE(6)                   //jne short _proceed3
	+	MovNRetn                 //mov ecx, <g_Weather>
		                         //retn

	,//5
		MOV(EAX, 1)              //mov eax, 1 ; _proceed3
	+	MOV([Filler(2)], EAX)    //mov dword ptr [isMuted], eax
	+	PUSH_0                   //push 0
	+	CALL(Filler(5))          //call CSoundMgr::Set2DEffectVolume
	+	PUSH_0                   //push 0
	+	CALL(Filler(6))          //call CSoundMgr::Set3DEffectVolume
	+	PUSH_0                   //push 0
	+	CALL(Filler(7))          //call CSoundMgr::SetStreamVol
	+	MovNRetn                 //mov ecx, <g_Weather>
		                         //retn
	];


	$$(_, 3.3, `Prepare the initial values for the extra addresses we are using in the code`)
	const buffer =
		" 00 00 00 00" //lastCheck
    +	" 00 00 00 00" //isMuted
    +	" 64 00 00 00" //bgmVol
    +	" 64 00 00 00" //effVol
    ;
	const bufSize = 16;

	$$(_, 3.4, `Prepare the arguments for auto-hook`)
	const [,, _skipToCall,, _cmpMute,, csize] = MapAddrs(bufSize, parts);

	const args =
	{
		allocSize : bufSize + csize,
		localVals : {
			1 :  0, //lastCheck
			2 :  4, //isMuted
			3 :  8, //bgmVol
			4 : 12  //effVol
		},
		localTgts : {
			'8,1' : _skipToCall, //index = 2 in parts
			'9,1' : _cmpMute,    //index = 4 in parts
		},
		targets : {
			5 : Set2DEffectVol,
			6 : Set3DEffectVol,
			7 : SetStreamVol
		},
		jcOffset : bufSize, //offset of starting code in the provided hex
		isCall : true
	}

	$$(_, 3.5, `Add our code and call it from hookAddr`)
	AutoHook(hookAddr, buffer + parts.join(''), args);

	return true;
};

///
/// \brief Temporarily disabling for Pre-VC11 clients
///
AutoMute.validate = () =>
	Exe.Version > 10;
