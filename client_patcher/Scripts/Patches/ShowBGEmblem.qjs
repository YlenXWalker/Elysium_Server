/**************************************************************************\
*                                                                          *
*   Copyright (C) 2014-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Modify the Siege mode & BG mode check Jumps to Display Emblem when either is ON
///
ShowBGEmblem = function(_)
{
	$$(_, 1, `Load the SSN`)
	SSN.load();

	$$(_, 2.1, `Find the Mode checker pattern used in the emblem display function.`)
	const plus110 = Exe.Version < 11  //(regA is usually ESI)
	?
		ADD(R32, 0x110)               //add regA, 110h ; for VC9-VC10
	:                                 //  OR
		LEA(EAX, [R32, 0x110])        //lea eax, [regA + 110h] ; for VC11 to VC14.16
	;

	let addrs = [
		...Exe.FindHexN(PUSH_1 + plus110),
		...Exe.FindHexN(plus110 + PUSH_1)
	];
	if (addrs.isEmpty())
		throw Error("Reference pattern missing");

	let code =
		MOV(ECX, SSN)  //mov ecx, <g_session>
	+	CALL(POS3WC)   //call CSession::IsSiegeMode
	+	TEST(EAX, EAX) //test eax, eax
	+	JZ(WCp)        //jz short _skip
	;

	const matchAddr = addrs.findAs( memAddr =>
	{
		const found = Exe.FindHex(code, memAddr - 0x30, memAddr);
		if (found > 0)
			return found;
	});
	if (!matchAddr)
		throw Error("Mode checker not found");

	$$(_, 1.2, `Save the address to be hookAddrs`)
	let hookAddrs = [matchAddr + 5];

	$$(_, 1.3, `Skip the 2nd CALL if present (same pattern as before except there is a JNZ at end)`)
	const csize = code.byteCount();
	if (Exe.GetUint8(matchAddr + csize) === 0xB9)
		Exe.SetNOPs(matchAddr + csize, csize);

	$$(_, 1.4, `Save the Function address`)
	const IsSiegeMode = Exe.GetTgtAddr(matchAddr + 6);

	$$(_, 1.5, `Extract the needed stuff from inside the function (always has the same form)`)
	const addr = Exe.Vir2Phy(IsSiegeMode, CODE);
	const movModeMgr = Exe.GetHex(addr, 5);       //mov ecx, <g_modeMgr>
	const GetGameMode = Exe.GetTgtAddr(addr + 6); //call CModeMgr::GetGameMode

	let ins = Instr.FromAddr(addr + 10);
	const mapOffset = ins.Disp;

	ins.moveToNext();
	const gvgPos = ins.Disp;
	const bgPos = gvgPos + 4;

	if (Exe.BuildDate < 20121010)
	{
		$$(_, 2.1, `Find the second pattern`)
		code =
			MOV(ECX, SSN)   //mov ecx, <g_session>
		+	CALL(ALLWC)     //call CSession::IsSiegeMode
		+	TEST(EAX, EAX)  //test eax, eax
		;

		addrs = Exe.FindHexN(JMP(WCp) + code + JE(WCp)).filter(memAddr => Exe.GetTgtAddr(memAddr + 8) === IsSiegeMode);
		if (addrs.isEmpty())
			addrs = Exe.FindHexN(JZ(WCp) + code + JE(WCp)).filter(memAddr => Exe.GetTgtAddr(memAddr + 8) === IsSiegeMode);

		if (addrs.isEmpty())
			throw Error("2nd pattern missing");

		$$(_, 2.2, `Add the last entry to the hookAddrs`)
		const memAddr = addrs.last();
		if (hookAddrs.indexOf(memAddr + 7) < 0)
		{
			hookAddrs.push(memAddr + 7);

			$$(_, 2.3, `Look for the additional comparison before the current one within the same function.. ugh!`)
			const addr = Exe.FindLastHex(code + JE(POS2WC), memAddr - 0x80, memAddr - 0x180);
			if (addr > 0)
				hookAddrs.push(addr + 5);

			else if (Exe.Version < 9)
				throw Error("Additional pattern missing");
		}

		$$(_, 2.4, `Find the 3rd pattern for VC9 (to fix the stagnant icon issue)`)
		if (Exe.Version === 9)
		{
			code =
				MOV(ECX, SSN)   //mov ecx, <g_session>
			+	CALL(ALLWC)     //call CSession::IsSiegeMode
			+	POP_R           //pop regA
			+	TEST(EAX, EAX)  //test eax, eax
			+	JZ(WCp)         //jz short _skip#2
			;

			addrs = Exe.FindHexN(code).filter(memAddr => Exe.GetTgtAddr(memAddr + 6) === IsSiegeMode);
			if (addrs.length !== 1)
				throw Error("3rd pattern missing or too many matches");

			hookAddrs.push(addrs[0] + 5);
		}
	}

	$$(_, 3.1, `Construct the new code`)
	code =
		movModeMgr                  //mov ecx, <g_modeMgr>
	+	CALL(Filler(1))             //call CModeMgr::GetGameMode
	+	MOV(ECX, [EAX, mapOffset])  //mov ecx, dword ptr [eax + mapOffset]
	+	MOV(EAX, [ECX, gvgPos])     //mov eax, dword ptr [ecx + gvgPos]
	+	TEST(EAX, EAX)              //test eax, eax
	+	JNZ(bgPos > 0x7F ? 6 : 3)   //jnz short _skipMov
	+	MOV(EAX, [ECX, bgPos])      //mov eax, dword ptr [ecx + bgPos]
	+	RETN()                      //retn ; _skipMov
	;

	$$(_, 3.2, `Prepare the arguments for auto-hook`)
	const args =
	{
		targets : {
			1 : GetGameMode
		},
		isCall : true
	};

	$$(_, 3.3, `Add the code and update the call targets`)
	AutoHook(hookAddrs, code, args);

	return true;
};
