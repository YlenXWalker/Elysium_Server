/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2024 Ai4rei/AN                                         *
*   Copyright (C) 2013-2024 Shakto                                         *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software : you can redistribute it and/or modify          *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Shakto                                      *
*   Created Date  : 2020-11-09                                             *
*   Last Modified : 2024-08-25                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Replace Specific color PUSHed at the end of the pattern with user specified color
///
CustomChatColor = function(_)
{
	$$(_, 1.1, `Retrieve the data to be used`)
	const data = this.Data.get(_);
	const {varName, clrName, clrVal} = data;

	$$(_, 1.2, `Calculate the pattern to be searched`)
	const pattern = (data.rmOnVC9 && Exe.Version >= 9)
		? data.pattern.remove(LEA(R32, [EBP, NEG2WC])) //Remove the LEA for VC9+
		: data.pattern;

	$$(_, 2.1, `Find the pattern`)
	const addr = Exe.FindHex(pattern);
	if (addr < 0)
		throw Error(`'${clrName}' reference missing`);

	$$(_, 2.2, `Retrieve the new color from user`)
	const color = Exe.GetUserInput(varName, D_Color, data.title, "Select the new color", clrVal, ROC.ClrSettings);
	if (color === false)
		Cancel("Color", `${clrName} (${clrVal})`);

	$$(_, 2.3, `Replace the color`)
	Exe.SetFromVar(addr + pattern.byteCount() - 4, varName);

	return true;
};

///
/// \brief Wrappers for individual patches
///
CustomGuildColor     = CustomChatColor; //PUSHed inside CGameMode ::Zc_guild_chat
CustomPartyColor     = CustomChatColor; //inside CGameMode ::Zc_Notify_Chat_Party function for other Members' messages
CustomPartyColorSelf = CustomChatColor;
CustomPublicColor    = CustomChatColor; //inside CGameMode ::Zc_Notify_Chat function

///
/// \brief Data to be used for the 4 patches.
///
CustomChatColor.Data = MakeMap(
	'CustomGuildColor',
	{
		varName : '$guildChatColor',
		pattern :
			PUSH(0x4)                 //PUSH 4
		+	LEA(R32, [EBP, NEG2WC])   //LEA regA, [EBP-x]
		+	PUSH(0xB4FFB4)            //PUSH B4,FF,B4 (Light Green)
		,
		clrName : "Light Green",
		title : "Guild Chat Color",
		clrVal : '#B4FFB4',
		rmOnVC9 : true
	},

	'CustomPartyColor',
	{
		varName : '$partyChatColor',
		pattern :
			PUSH(0x03)                //PUSH 3
		+	LEA(R32, [EBP, NEG2WC])   //LEA regA, [EBP-x]
		+	PUSH(0xC8C8FF)            //PUSH FF,C8,C8 (Light Pink)
		,
		clrName : "Light Pink",
		title : "Party Chat Color",
		clrVal : '#FFC8C8',
		rmOnVC9 : true
	},

	'CustomPartyColorSelf',
	{
		varName : '$yourPartyChatColor',
		pattern :
			PUSH(0x03)                //PUSH 3
		+	LEA(R32, [EBP, NEG2WC])   //LEA regA, [EBP-x]
		+	PUSH(0x00C8FF)            //PUSH FF,C8,00 (Yellowish Brown)
		,
		clrName : "Yellowish Brown",
		title : "Party Chat Color (Self)",
		clrVal : '#FFC800',
		rmOnVC9 : true
	},

	'CustomPublicColor',
	{
		varName : '$publicChatColor',
		pattern :
				PUSH_1                //PUSH 1
			+	PUSH(0xFFFFFF)        //PUSH FF,FF,FF (White)
		,
		clrName : "White",
		title : "Public Chat Color",
		clrVal : '#FFFFFF',
	}
);

///
/// \brief Replace all the colors assigned for GM inside
///        CGameMode ::Zc_Notify_Chat function with user specified value
///
CustomGMColor = function(_)
{
	$$(_, 1.1, `Find the Orange color (#FF8D1D) PUSHed for Langtype 11`)
	const oldStyle = Exe.BuildDate < 20240000;
	let code = oldStyle
	?	PUSH(0x1D8DFF)
	:	MOV(R32, 0x1D8DFF)
	+	CMOVE(R32, R32)
	;

	let addr1 = Exe.FindHex(code);
	if (addr1 < 0)
		throw Error("'Orange' reference missing");

	$$(_, 1.2, `Find the Yellow color (#FFFF00) PUSH in the vicinity of addr1`)
	code = oldStyle
	?	PUSH(0x00FFFF)
	:	MOV(R32, 0x00FFFF)
	+	PUSH_0
	;
	const addr2 = Exe.FindHex(code, addr1 - 0x30, addr1 + 0x30);
	if (addr2 < 0)
		throw Error("'Yellow' reference missing");

	$$(_, 1.3, `Find the Cyan color (#00FFFF) PUSH in the vicinity of addr1`)
	code = oldStyle
	?	PUSH(0xFFFF00)
	:	MOV(R32, 0xFFFF00)
	+	PUSH_1
	;
	const addr3 = Exe.FindHex(code, addr1 - 0x30, addr1 + 0x30);
	if (addr3 < 0)
		throw Error("'Cyan' reference missing");

	$$(_, 2.1, `Get the new color from user`)
	const varName = '$gmChatColor';
	const color = Exe.GetUserInput(varName, D_Color, "GM Chat Color", "Select the new color", 0x00FFFF, ROC.ClrSettings);
	if (color === false)
		Cancel("Color", "Yellow (#FFFF00)");

	$$(_, 2.2, `Replace the PUSHed color at all 3 addrs found`)
	for (const addr of [addr1, addr2, addr3])
		Exe.SetFromVar(addr + 1, varName);

	return true;
};

///
/// \brief Replace chat color assigned for Player inside CGameMode ::Zc_Notify_PlayerChat
///        function with user specified color
///
CustomPublicColorSelf = function(_)
{
	$$(_, 1.1, `Find all locations where Dark Green (#007800) is PUSHed`)
	const addrs = Exe.FindHexN( PUSH(0x007800) ); //PUSH 00,78,00
	if (addrs.isEmpty())
		throw Error("'Dark Green' reference missing");

	$$(_, 1.2, `Find the original color (Green) PUSH within the vicinity of one of the addrs`)
	const greenAddr = addrs.findAs( addr =>
	{
		const found = Exe.FindHex( PUSH(0x00FF00), addr + 5, addr + 40);
		if (found > 0)
			return found;
	});
	if (greenAddr < 0)
		throw Error("'Green' reference missing");

	$$(_, 2.1, `Get the new color from user`)
	const varName = '$yourChatColor';
	const color = Exe.GetUserInput(varName, D_Color, "Public Chat Color (Self)", "Select the new color", 0x00FF00, ROC.ClrSettings);
	if (color === false)
		Cancel("Color", "Green (#00FF00)");

	$$(_, 2.2, `Replace PUSHed color with new one`)
	Exe.SetFromVar(greenAddr + 1, varName);

	return true;
};
