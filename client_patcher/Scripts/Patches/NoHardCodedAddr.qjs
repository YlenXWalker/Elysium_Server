/**************************************************************************\
*                                                                          *
*   Copyright (C) 2017-2024 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Andrei Karas (4144)                                    *
*   Created Date  : 2020-11-21                                             *
*   Last Modified : 2024-09-27                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change hardcoded otp / login addreses and ports from
///        localhost to ClientInfo ones
///
NoHardCodedAddr = function(_)
{
	if (Exe.Version <= 11) //VC11 basically since the patch isnt valid for older versions
	{
		$$(_, 1.1, `Find the code where we will remove call`)
		const code =
			CMP(BYTE_PTR, [POS4WC], 0)  //cmp byte ptr [addr#1], 0
		+	JNZ(WC)                     //jnz short _proceed
		+	CALL(POS3WC)                //call <override_address_port>
		+	JMP(POS2WC)                 //jmp _next
		;
		const addr = Exe.FindHex(code);

		if (addr < 0)
			throw Error("Override function call missing");

		$$(_, 1.2, `Extract CALLed function address`)
		const ovrdAddr = Exe.GetTgtAddr(addr + 10, PHYSICAL);

		$$(_, 1.3, `Change the function code`)
		return this.swapCI(ovrdAddr);
	}
	else //VC14+
	{
		$$(_, 2.1, `Ensure the ServerType is loaded`)
		SRVRTYPE.load();

		$$(_, 2.2, `Find the string '6900'`)
		const PortStr = Exe.FindText("6900");
		if (PortStr < 0)
			throw Error("'6900' not found");

		$$(_, 2.3, `Find it's reference`)
		let code =
			MOV(EDX, [SRVRTYPE])        //mov edx, dword ptr [g_serverType]
		+	MOV(EAX, [POS4WC])          //mov eax, dword ptr [offset#1]
		+	MOV(ECX, [POS4WC])          //mov ecx, dword ptr [offset#2]
		+	MOV([POS4WC], PortStr)      //mov dword ptr [addr#3], <PortStr>
		;
		let addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("'6900' not used");

		let ovrdAddr, jnzAddr;
		
		$$(_, 2.4, `Find the comparison & jump before it`)
		code =
			CMP(BYTE_PTR, [POS4WC], 0)  //cmp byte ptr [addr#2], 0
		+	JNZ(POS3WC)                 //jnz _next#2
		;
		let addr2 = Exe.FindHex(code, addr - 0x20, addr);
		if (addr2 > 0)
		{
			$$(_, 2.5, `Save the JNZ target location and location of MOV EDX`)
			ovrdAddr = addr2 + code.byteCount();
			jnzAddr = Exe.GetTgtAddr(ovrdAddr - 4);	
		}
		else
		{
			$$(_, 2.6, `Find the second comparison`)
			code =
			[
				CMP(R32, 3)            //cmp regA, 3
			+	JA(POS2WC)             //ja _default
			,
				JMP([4, R32, POS4WC])  //jmp dword ptr [regA*4 + refAddr]
			];
			addr2 = Exe.FindHex(code, addr + 0x20, addr + 0x80);
			if (addr2 < 0)
				throw Error("Comparison missing");

			$$(_, 2.7, `Save the JA target location and location of MOV EDX`)
			ovrdAddr = addr;
			jnzAddr = Exe.GetTgtAddr(addr2 + code.byteCount(0) - 4);
		}
				
		$$(_, 2.8, `Change the code`)
		return this.swapCI(ovrdAddr, jnzAddr);
	}
};

///
/// \brief Disable for unsupported clients
///        (Only there in more recent clients starting from first zero client version)
///
NoHardCodedAddr.validate = () =>
	ROC.ClInfoAddr > 0 && ((ROC.IsZero && Exe.BuildDate > 20171019) || Exe.BuildDate >= 20181113);

///
/// \brief Helper function to overwrite the specified address with code to use ClientInfo port
///        Also changes localhost reference to use ClientInfo address
///
NoHardCodedAddr.swapCI = (ovrdAddr, jnzAddr = -1) =>
{
	const _ = 'NoHardCodedAddr.swapCI';

	$$(_, 1.1, `Check if its older style or newer style (older as in 2017)`)
	const isOld = (jnzAddr < 0);

	$$(_, 1.2, `Find the string '127.0.0.1'`)
	let addr = Exe.FindText("127.0.0.1", VIRTUAL, false);
	if (addr < 0)
		throw Error("localhost string missing");

	$$(_, 1.3, `Find the table entry used for OTP & Login`)
	const code =
		(addr).toHex()
	+	(6950).toHex()
	;
	addr = Exe.FindHex(code, Exe.GetSectBegin(DATA), Exe.FileSize);
	if (addr < 0)
		throw Error("Table entry missing");

	$$(_, 1.4, `Save the needed details`)
	const otpAddr = Exe.Phy2Vir(addr);
	const otpPort = otpAddr + 4;
	const cinfoAddr = otpPort + 4;
	const cinfoPort = cinfoAddr + 4;

	if (Exe.BuildDate < 20200630)
	{
		$$(_, 1.5, `Find address of atoi function`)
		const AtoI = Exe.FindFunc("atoi");
		if (AtoI < 0)
			throw Error("'atoi' function missing");

		$$(_, 2.1, `Change the code at ovrdAddr`)
		let code =
			PUSH([cinfoPort])   //push dword ptr [cinfoPort]
		+	CALL([AtoI])        //call dword ptr [atoi]
		+	MOV([otpPort], EAX) //mov dword ptr [otpPort], eax
		+	ADD(ESP, 4)         //add esp, 4
		+ 	(isOld
		?	''
		: 	PUSH(jnzAddr)       //push <jnzAddr> (equivalent to JMP when combined with the RETN below)
		)
		+	RETN()              //retn
		;
		Exe.SetHex(ovrdAddr, code);

		$$(_, 2.2, `Find otp_addr usage`)
		code =
		[
			PUSH([otpAddr])          //push dword ptr [otp_addr]
		,
			isOld
		?
			MOV(R32, [POS3WC])       //mov regA, dword ptr [addr] ; regA is usually ESI & addr is _snprintf_s
		:                            //   OR
			LEA(R32, [R32, NEG3WC])  //lea regB, [regC - dispC] ; regB is usually EAX and regC is EBP
		,
			PUSH(POS3WC)             //push offset "%s"
		+	PUSH(-1)                 //push -1
		,
			isOld
		?
			LEA(R32, [R32, NEG2WC])  //lea regB, [regC - dispC] ; regB is usually EAX and regC is EBP
		:
			''
		,
			PUSH(0x10)               //push 10h
		,
			isOld
		?
			''
		:
			PUSH_EAX                 //push eax
		];

		addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("otp_addr reference missing");

		$$(_, 2.3, `Change the otp_addr reference to use cinfoAddr (ClientInfo address)`)
		Exe.SetInt32(addr + 2, cinfoAddr);
	}
	else  //for most recent ones we use different approach
	{
		$$(_, 3.1, `Find the kro-agency string`)
		const host = Exe.FindText("kro-agency.ragnarok.co.kr");
		if (host < 0)
			throw Error("Kro agency string missing");

		$$(_, 3.2, `Find the string '%s:%d'`)
		const s_d = Exe.FindText("%s:%d");
		if (s_d < 0)
			throw Error("Format string missing");

		$$(_, 3.3, `Find the location where both are used`)
		let code =
			PUSH(EDX)       //push edx
		+	PUSH(host)      //push offset "kro-agency.ragnarok.co.kr"
		+	PUSH(s_d)       //push offset "%s:%d"
		+	PUSH(-1)        //push -1
		+	PUSH(0x81)      //push 81h
		+	PUSH(POS4WC)    //push <g_auth_host>
		;

		const offsetAuth = code.byteCount() - 4;
		const offsetSNP = offsetAuth + 5;

		code +=
			CALL(ALLWC)     //call <snprintf>
		+	ADD(ESP, 0x18)  //add esp, 18h
		;
		const addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("snprintf_s CALL missing");

		$$(_, 3.4, `Extract the function address & g_auth_host`)
		const snprintf = Exe.GetTgtAddr(addr + offsetSNP);
		const gAuthHost = Exe.GetInt32(addr + offsetAuth);

		$$(_, 3.5, `Find the string '%s:%s'`)
		let s_s = Exe.FindText("%s:%s", false);
		if (s_s < 0)
		{
			$$(_, 3.6, `If not found then add it`)
			s_s = Exe.AddText("%s:%s")[1];
		}

		$$(_, 3.8, `Create the replacement code`)
		const ovrdVir = Exe.Phy2Vir(ovrdAddr);

		code =
			PUSH([cinfoPort])  //push dword ptr [clientinfo_port]
		+	PUSH([cinfoAddr])  //push dword ptr [clientinfo_addr]
		+	PUSH(s_s)          //push offset "%s:%s"
		+	PUSH(-1)           //push -1
		+	PUSH(0x81)         //push 81h
		+	PUSH(gAuthHost)    //push <g_auth_host>
		+	CALL(Filler(1))    //call <snprintf>
		+	ADD(ESP, 0x18)     //add esp, 18h
		+	JMP(Filler(2))     //jmp <jnzAddr>
		;

		code = SetFillTargets( code, 1,
		{
			start : ovrdVir,
			    1 : snprintf,
			    2 : jnzAddr
		});

		$$(_, 3.7, `Replace at ovrdAddr`)
		Exe.SetHex(ovrdAddr, code);
	}

	return true;
};
