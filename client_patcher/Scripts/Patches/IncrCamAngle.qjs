/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2024 Shinryo                                           *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo                                                *
*   Created Date  : 2020-11-06                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Find the current camera angle and replace with the specified value
///
IncrCamAngle = function(_)
{
	if (Exe.Version === 6) //VC6
	{
		$$(_, 1.1, `Find all locations where the current angle (20.0) is assigned`)
		let code =
			MOV([EBP, WCp], (20.0).toIEEE())  //mov dword ptr [ebp + dispA], 41A00000 ; float 20.00000
		+	MOV(R32, [R32, POS2WC])           //mov regA, dword ptr [regB + dispB]
		;
		const addrs = Exe.FindHexN(1, 2, code);
		if (addrs.isEmpty())
			throw Error("Expected 1 or 2 matches");

		$$(_, 1.2, `Change the angle value for all locations`)
		for (const addr of addrs)
			Exe.SetFloat(addr + 3, this.Data.get(_));

		$$(_, 1.3, `Find the 2 stored angles -25.0 and -65.0 (need to be modified as well)`)
		code =
			(-25.0).toIEEE() //0xC1C80000 = dd float -25.00000
		+	(-65.0).toIEEE() //0xC2820000 = dd float -65.00000
		;
		const addr = Exe.FindHex(code, Exe.GetSectEnd(CODE), Exe.FileSize); //Check after code section
		if (addr < 0)
			throw Error("Stored angles not found");

		$$(_, 1.4, `Change to -1.0 and -89.0 respectively`)
		code =
			( -1.0).toIEEE() //0xBF800000 = dd float -1.00000
		+	(-89.0).toIEEE() //0xC2B20000 = dd float -89.00000
		;
		Exe.SetHex(addr, code);
	}
	else //newer clients
	{
		//====================================================================================//
		// Note - VC9+ compilers finally recognized to store float values which are used more //
		//        than once at an offset and use FLD/FSTP/MOVSS to place those in registers.  //
		//====================================================================================//

		$$(_, 2.1, `Find the pattern to identify the function which assigns the angle`)
		let code =
			PUSH_1        //push 1
		+	PUSH(0x5D)    //push 5Dh
		+	JMP(WCp)      //jmp short _next
		;
		let addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("Pattern not found");

		$$(_, 2.2, `Find the function call within 0x80 bytes before the pattern`)
		code =
			MOV(ECX, ESI) //mov ecx, esi
		+	CALL(ALLWC)   //call func#1 <- this is the one we want
		+	PUSH_R        //push regA
		+	MOV(ECX, ESI) //mov ecx, esi
		+	CALL()        //call func#2
		;
		addr = Exe.FindHex(code, addr - 0xB0, addr);
		if (addr < 0)
			throw Error("Function CALL missing");

		$$(_, 2.3, `Extract the function's PHYSICAL address`)
		addr = Exe.GetTgtAddr(addr + 3, PHYSICAL);

		$$(_, 2.4, `Find the angle value assignment inside`)
		code =
			JZ(WCp)       //jz short _skip
		+	FLD([POS3WC]) //fld dword ptr [angleAddr]
		;
		let angleAddr = Exe.FindHex(code, addr, addr + 0x800);
		if (angleAddr < 0)
		{
			code =
				JZ(WCp)               //jz short addr
			+	MOVSS(XMM$, [POS3WC]) //movss xmm#, dword ptr [angleAddr]
			;
			angleAddr = Exe.FindHex(code, addr, addr + 0x800);
		}
		if (angleAddr < 0)
			throw Error("Angle assignment missing");

		$$(_, 2.5, `Set angleAddr to the memory location assigned`)
		angleAddr += code.byteCount() - 4;

		$$(_, 3.1, `Add the new angle there`)
		const [, freeVir] = Exe.AddFloat(this.Data.get(_));

		$$(_, 3.2, `Update the contents of angleAddr`)
		Exe.SetUint32(angleAddr, freeVir);
	}

	return true;
};

///
/// \brief Wrappers for individual patches
///
LowCamAngle    = IncrCamAngle;
MediumCamAngle = IncrCamAngle;
HighCamAngle   = IncrCamAngle;

///
/// \brief Data to be used for the patch
///
IncrCamAngle.Data = MakeMap(
	'LowCamAngle'    , 29.5,
	'MediumCamAngle' , 42.0,
	'HighCamAngle'   , 65.0,
);
