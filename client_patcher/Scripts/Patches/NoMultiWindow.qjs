/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2024 Shinryo, Ai4rei/AN                                *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo, Ai4rei/AN                                     *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2024-08-08                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Check for Existing Multiple Window Checker and enforce Disabling.
///        If not present, inserts custom code to do the check + disable
///
NoMultiWindow = function(_)
{
	$$(_, 1.1, `Find CoInitialize function address`)
	const CoInit = Exe.FindFunc("CoInitialize", "ole32.dll");
	if (CoInit < 0)
		throw Error("CoInitialize not found");

	$$(_, 1.2, `Find where it is CALLed from`)
	let prefix = PUSH_R;         //push regA
	const suffix = CALL([CoInit]); //call dword ptr [<&ole32.CoInitialize>]

	let addr = Exe.FindHex(prefix + suffix);

	if (addr < 0) //almost all version use PUSH 0 for some dates, hence cant restrict based on version
	{
		prefix = PUSH_0; //Change push regA to push 0
		addr = Exe.FindHex(prefix + suffix);
	}
	if (addr < 0)
		throw Error("CoInitialize not CALLed");

	$$(_, 1.3, `Point addr to location of the CALL`)
	const jmpAddr = addr + prefix.byteCount();

	$$(_, 1.4, `Find CreateMutexA CALL after the CoInitialize CALL`)
	addr = Exe.FindFunc("CreateMutexA", "KERNEL32.dll");
	if (addr > 0)
	{
		$$(_, 1.5, `If present then check if its used (then we dont need to add our own code)`)
		addr = Exe.FindHex( CALL([addr]), jmpAddr, jmpAddr + 0xD0 );

		if (addr > 0)
		{
			$$(_, 1.6, `If the code after the CALL is MOV EAX , [] change it to assign FFFFFF instead`)
			if (Exe.Version < 10 && Exe.GetUint8(jmpAddr + 6) === 0xA1)
			{
				Exe.SetHex(jmpAddr + 6, MOV(EAX, 0xFFFFFF))
				return true;
			}
			else
			{
				Cancel("Already disabled");
			}
		}
	}

	$$(_, 2.1, `Get the essential addresses for our function`)
	ROC.findImports();

	const WaitSingle = Exe.FindFunc("WaitForSingleObject", "KERNEL32.dll");
	if (WaitSingle < 0)
		throw Error("WaitForSingleObject not found");

	if (ROC.Kernel32 < 0)
		throw Error("'KERNEL32.dll' not found");

	$$(_, 2.2, `Construct our function for mutex windows`)
	const parts =
	[
		CALL([CoInit])                 //call dword ptr [&ole32.CoInitialize>] ; args are already pushed
	+	PUSH(ESI)                      //push esi
	+	XOR(ESI, ESI)                  //xor esi, esi
	+	PUSH(ROC.Kernel32)             //push offset "KERNEL32.dll"
	+	CALL([ROC.GetModHandle])       //call dword ptr [<&KERNEL32.GetModuleHandleA>]
	+	PUSH_STR("CreateMutexA")       //push "CreateMutexA" + jmp
	+	PUSH_EAX                       //push eax
	+	CALL([ROC.GetProcAddr])        //call dword ptr [<&KERNEL32.GetProcAddress>]
	+	PUSH_STR("Global\\Surface")    //push "Global\Surface" + jmp
	+	PUSH(ESI)                      //push esi
	+	PUSH(ESI)                      //push esi
	+	CALL(EAX)                      //call eax
	+	TEST(EAX, EAX)                 //test eax, eax
	+	JE(Filler(1,1))                //je short _quit
	+	PUSH(ESI)                      //push esi
	+	PUSH_EAX                       //push eax
	+	CALL([WaitSingle])             //call dword ptr [<&KERNEL32.WaitForSingleObject>]
	+	CMP(EAX, 258)                  //cmp eax, 102h ; 258 = WAIT_TIMEOUT
	+	JNZ(Filler(2,1))               //jnz short _return

	,//1
		PUSH(ROC.Kernel32)             //push offset "KERNEL32.dll" ; _quit
	+	CALL([ROC.GetModHandle])       //call dword ptr [<&KERNEL32.GetModuleHandleA>]
	+	PUSH_STR("ExitProcess")        //push "ExitProcess" + jmp
	+	PUSH_EAX                       //push eax
	+	CALL([ROC.GetProcAddr])        //call dword ptr [<&KERNEL32.GetProcAddress>]
	+	PUSH(ESI)                      //push esi
	+	CALL(EAX)                      //call eax

	,//2
		POP(ESI)                       //pop esi ; _return
	+	JMP(Filler(3))                 //jmp <retnAddr> ; retnAddr = jmpAddr + 6
	];

	const [, _quit, _return, allocSize] = MapAddrs(parts);

	$$(_, 2.3, `Prepare the arguments for auto hook`)
	const args =
	{
		allocSize,
		localTgts : {
			'1,1' : _quit,
			'2,1' : _return,
		},
		targets : {
			3 : Exe.Phy2Vir(jmpAddr + 6, CODE) //retnAddr
		},
		nops : 1 //since the original code is 6 bytes
	};

	$$(_, 2.4, `Add our code and jump to it from jmpAddr`)
	AutoHook(jmpAddr, parts, args);

	return true;
};
