/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2024 Functor                                        *
*   Copyright (C) 2020-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Functor, Neo-Mind                                      *
*   Created Date  : 2020-11-21                                             *
*   Last Modified : 2024-08-08                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the code which shows the deletion delay
///
///        Before : date and time when deletion can be done
///        After  : remaining time after which deletion can be done
///
RelativeDelay4CharDel = function(_)
{
	$$(_, 1.1, `Find the code which prepare character deletion time data`)
	let code;
	if (Exe.Version <= 11)
	{
		code =
			SUB(ESP, 0x24)        //sub esp, 24h
		+	XOR(EAX, EAX)         //xor eax, eax
		+	PUSH(ESI)             //push esi
		+	MOV(ESI, [EBP, 8])    //mov esi, dword ptr [ebp+8] ; ARG.1
		+	XORPS(XMM0, XMM0)     //xorps xmm0, xmm0
		+	MOV([ESI], AX)        //mov word ptr [esi], ax
		+	MOVQ([ESI, 2], XMM0)  //movq qword ptr [esi+2], xmm0
		+	MOV([ESI, 0xA], EAX)  //mov dword ptr [esi+0Ah], eax
		;
	}
	else
	{
		code =
			SUB(ESP, 0x24)        //sub esp, 24h
		+	XORPS(XMM0, XMM0)     //xorps xmm0, xmm0
		+	CMP([ECX], 0)         //cmp dword ptr [ecx], 0
		+	PUSH(ESI)             //push esi
		+	MOV(ESI, [EBP, 8])    //mov esi,dword ptr [ebp+8] ; ARG.1
		+	MOVUPS([ESI], XMM0)   //movups qword ptr [esi], xmm0
		+	JGE(6)                //jge short _next
		+	MOV([ECX], 0)         //mov dword ptr [ecx], 0
		;
	}

	const addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Char Del prep missing");

	$$(_, 1.2, `Get "MSVCR110._time32" address`)
	const time32Func = Exe.FindFunc("_time32");
	if (time32Func < 0)
		throw Error("'_time32' function missing");

	$$(_, 2.1, `Prepare the replacement code`)
	const parts =
	[//0
		PUSH(EBX)             //push ebx
	+	PUSH(ESI)             //push esi
	+	PUSH(ECX)             //push ecx
	+	MOV(ESI, [EBP, 8])    //mov esi, dword ptr [ebp+8] ; ARG.1
	+	XOR(EDX, EDX)         //xor edx, edx
	+	MOV([ESI, 0x6], EDX)  //mov dword ptr [esi+6], edx
	+	MOV([ESI, 0xA], EDX)  //mov dword ptr [esi+0Ah], edx
	+	PUSH_0                //push 0
	+ 	CALL([time32Func])    //call dword ptr [<&MSVCR110._time32>]
	+	ADD(ESP, 4)           //add esp, 4
	+	POP(ECX)              //pop ecx
	+	MOV(ECX, [ECX])       //mov ecx, dword ptr [ecx]
	+	CMP(EAX, ECX)         //cmp eax, ecx
	+ 	JNB(Filler(1,1))      //jnb short _skip
	+ 	SUB(ECX, EAX)         //sub ecx, eax
	+	XOR(EDX, EDX)         //xor edx, edx
	+	MOV(EAX, ECX)         //mov eax, ecx
	+	MOV(EBX, 0x3C)        //mov ebx, 3Ch
	+	DIV(EBX)              //div ebx
	+	MOV([ESI, 0xA], DX)   //mov word ptr [esi+0Ah], dx
	+	XOR(EDX, EDX)         //xor edx, edx
	+	MOV(EBX, 0x3C)        //mov ebx, 3Ch
	+	DIV(EBX)              //div ebx
	+	MOV([ESI, 0x6], AX)   //mov word ptr [esi+6], ax
	+	MOV([ESI, 0x8], DX)   //mov word ptr [esi+8], dx

	,//1
		POP(ESI)              //pop esi ; _skip
	+	POP(EBX)              //pop ebx
	+	FP_STOP               //mov esp, ebp
		                      //pop ebp
	+	RETN(4)               //retn 4
	];

	code = SetFillTargets( parts, 1, {'1,1' : parts.byteCount(0)} );

	$$(_, 2.2, `Replace the original with our code`)
	Exe.SetHex(addr, code);

	$$(_, 2.3, `Hide the text 'X month X day' by changing coords (28h to 90h)`)
	Exe.SetUint8(this.PushAddr + 2, 0x90); //its not a NOP

	return true;
};

///
/// \brief Only works for clients which shows the "X month X day" text
///
RelativeDelay4CharDel.validate = function()
{
	let parts = [
		PUSH_R      //push regA
	+	PUSH(0x28)  //push 28h
	+	PUSH_0      //push 0
	,
		''
	,
		PUSH(0xB)   //push 0Bh
	+	PUSH_0      //push 0
	,
		Exe.Version <= 11
	?
		LEA(ESI, [EBP, WCn])    //lea esi, [ebp - disp8A]
	+	CMOVNB(ESI, [EBP, WC])  //cmovnb esi, dword ptr [ebp - disp8B] ; previous instruction seems wasteful
	:
		''
	,
		PUSH_0      //push 0
	+	PUSH_R      //push regB ; ESI for VC11
	];
	this.PushAddr = Exe.FindHex(parts);

	if (this.PushAddr < 0) //Extra "push 0" after "push 28h" for newer clients
	{
		parts[1] = PUSH_0;
		this.PushAddr = Exe.FindHex(parts);
	}

	return (this.PushAddr > 0);
};
