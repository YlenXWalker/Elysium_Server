/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-10                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Skip the Langtype checks inside UILoginWnd::OnCreate and re-enables opening of the registration page.
///        The checks are inside UILoginWnd::SendMsg. In addition to the above, patch also modifies the
///        CModeMgr::Quit CALL to actually close the client.
///
ShowRegisterBtn = function(_)
{
	$$(_, 1.1, `Find the registration URL`)
	let addr = Exe.FindText("http://ro.hangame.com/login/loginstep.asp?prevURL=/NHNCommon/NHN/Memberjoin.asp");
	if (addr < 0)
		throw Error("Registration URL not found");

	$$(_, 1.2, `Find where it is PUSHed (which will be inside UILoginWnd::SendMsg)`)
	addr = Exe.FindHex( PUSH(addr) );
	if (addr < 0)
		throw Error("Registration URL not PUSHed");

	$$(_, 1.3, `Ensure the LANGTYPE is loaded`)
	LANGTYPE.load();

	$$(_, 2.1, `Look for the Langtype comparison before the PUSH (within 0x30 bytes)`)
	let prefix, jnePos; //jnePos indicates position of the JNE opcode w.r.t. end of prefix
	if (Exe.Version === 6) //VC6
	{
		prefix =
			MOV(EAX, [LANGTYPE])   //mov eax, dword ptr [g_serviceType]
		+   TEST(EAX, EAX)         //test eax, eax
		+   JNE(POS2WC)            //jne _skip
		;
		jnePos = -6;
	}
	else //VC9 - VC11
	{
		prefix =
			CMP([LANGTYPE], 0)    //cmp dword ptr [g_serviceType], 0
		+   JNE(WCp)              //jne short _skip
		;
		jnePos = -2;
	}

	const suffix =
		CMP([POS4WC], 1)          //cmp dword ptr [g_isGravityID], 1
	+   JNE(WCp)                  //jne short _skip#2
	;

	let cmpAddr = Exe.FindHex(prefix + suffix, addr - 0x30, addr);
	if (cmpAddr < 0)
		throw Error("First Langtype comparison not found");

	$$(_, 2.2, `Update cmpAddr to location after first JNE`)
	cmpAddr += prefix.byteCount();

	$$(_, 2.3, `Change the first JNE`)
	Exe.SetJMP(cmpAddr + jnePos);

	$$(_, 3.1, `Goto the jumped address`)
	const travel = (jnePos === -2) ? 1 : 4;
	const jmpedAddr = Exe.GetTgtAddr(cmpAddr - travel, PHYSICAL, travel);

	$$(_, 3.2, `Construct new function code to use as replacement for CModeMgr::Quit (original one will get overwritten by RestoreLoginWindow)`)
	let code =
		MOV(EAX, [ECX, 4])   //mov eax, dword ptr [ecx+4]
	+   MOV([EAX, 0x14], 0)  //mov dword ptr [eax+14h], 0
	+   MOV([ECX], 0)        //mov dword ptr [ecx], 0
	+   RETN()               //retn
	;

	$$(_, 3.3, `Add the function`)
	const [, freeVir] = Exe.AddHex(code, 0x10);

	$$(_, 3.4, `Change the CALLed address from CModeMgr::Quit to our function`)
	Exe.SetTgtAddr(jmpedAddr + 6, freeVir); //5 for the MOV ECX, g_modeMgr & 1 for opcode of CALL CModeMgr::Quit

	$$(_, 4.1, `Find the string 'btn_request_b' (the prefix string for the button in pressed state)`)
	const btnAddr = Exe.FindText("btn_request_b");
	if (btnAddr < 0)
		throw Error("'btn_request_b' not found");

	$$(_, 4.2, `Find where it is assigned`)
	if (Exe.Version === 9) //VC9
	{
		addr = Exe.FindHex( MOV([ROC.StkReg, ROC.HasFP ? WCp : POS2WC], btnAddr) ); //mov dword ptr [ebp+disp8A] / [esp+dispA], <btnAddr>
	}
	else //VC6, VC10, VC11
	{
		addr = Exe.FindHex( MOV([ROC.StkReg, ROC.HasFP ? NEG2WC : WCn], btnAddr) ); //mov dword ptr [ebp-dispB] / [esp-disp8B], <btnAddr>
	}

	if (addr < 0)
		throw Error("'btn_request_b' not assigned");

	$$(_, 4.3, `Find the Langtype comparison after the assignment`)
	code =
		CMP(R32, 3)             //cmp regA, 3 ; 03 is for register button
	+   JNE(0x25)               //jne short _skip#3
	+   MOV(EAX, [LANGTYPE])    //mov eax, dword ptr [g_serviceType]
	;

	cmpAddr = Exe.FindHex(code, addr + 0xA0, addr + 0x100);
	if (cmpAddr < 0)
		throw Error("Second Langtype comparison not found");

	$$(_, 4.4, `Change the conditional jump (This way no Langtype check occurs for any of the login window buttons)`)
	Exe.SetJMP(cmpAddr + 3);

	return true;
};

///
/// \brief Disable for unsupported clients (Only needed if login window is hidden)
///
ShowRegisterBtn.validate = HasHiddenLogWin;

///
/// \brief Modify the coordinates of Login and Cancel buttons to show both in Login Screen
///
ShowCancelBtn = function(_)
{
	$$(_, 1.1, `Find the string 'btn_intro_b'`)
	const btnAddr = Exe.FindText("btn_intro_b");
	if (btnAddr < 0)
		throw Error("'btn_intro_b' not found");

	$$(_, 1.2, `Find where it is assigned (inside UILoginWnd::OnCreate)`)
	let code = Exe.Version === 9
	?
		MOV([ESP, POS2WC], btnAddr)                            //mov dword ptr [esp + dispC], <btnAddr> ; VC9 didn't use FP
	:                                                          //  OR
		MOV( ROC.HasFP ? [EBP, NEG2WC] : [ESP, WCn], btnAddr)  //mov dword ptr [ebp/esp - dispC], <btnAddr>
	;

	let addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("'btn_intro_b' not assigned");

	$$(_, 1.3, `Set addr to the MOV instruction after the assignment`)
	addr += code.byteCount();

	$$(_, 2.1, `Find the X-coord assignment of login button (btn_connect)`)
	const reg = ROC.StkReg;
	code = MOV([reg, WC], 0xBD); //mov dword ptr [ebp - disp8C], 0BDh OR mov dword ptr [esp + disp8C], 0BDh

	let addr2 = Exe.FindHex(code, addr, addr + 0x40);

	if (addr2 < 0) //x > 0x7F (haven't seen it so far though)
	{
		code = MOV([reg, ROC.HasFP ? NEG1WC : POS1WC], 0xBD); //mov dword ptr [ebp - dispD], 0BDh OR mov dword ptr [esp + dispD], 0BDh
		addr2 = Exe.FindHex(code, addr, addr + 0x40);
	}
	if (addr2 < 0)
		throw Error("'btn_connect' coordinate not found");

	$$(_, 2.2, `Set addr to location after the X-Coord assignment`)
	addr = addr2 + code.byteCount();

	$$(_, 2.3, `Change 0BDh to 90h (its not a NOP xD)`)
	Exe.SetInt32(addr - 4, 0x90);

	$$(_, 3.1, `Find the X-Coord assignment of cancel button (btn_cancel)`)
	code = code.replace("BD 00", "B2 01"); //swap 0BD with 1B2 in the search pattern

	addr = Exe.FindHex(code, addr, addr + 0x30);
	if (addr < 0)
		throw Error("'btn_cancel' coordinate not found");

	$$(_, 3.2, `Set addr to location after the X-Coord assignment`)
	addr += code.byteCount();

	$$(_, 3.3, `Change Change 1B2h to 0BDh`)
	Exe.SetInt32(addr - 4, 0xBD);

	return true;
};

///
/// \brief Disable for unsupported clients (Only needed with hidden login window. It shows exit button instead of cancel)
///
ShowCancelBtn.validate = HasHiddenLogWin;

///
/// \brief Change the coordinates of selectserver and replay buttons.
///        Also modifies the ShowMsg function for Replay List box to make it
///        return to Select Service window
///
ShowReplayBtn = function(_)
{
	$$(_, 1.1, `Move Select Server Button to visible area`)
	this.fixCoords("replay_interface\\btn_selectserver_a", "Select Server - ", " C7", " 89");

	$$(_, 1.2, `Move Replay Button to visible area`)
	const jmpAddr = this.fixCoords("replay_interface\\btn_replay_a", "Replay - ", " E8", " E8");

	if (Exe.Version <= 11)
	{
		$$(_, 2.1, `Service and Server select both use the same Window, so look for the mode comparison to distinguish`)
		const code =
			CMP([EAX, 4], 0x1E)  //cmp dword ptr [eax+4], 1Eh
		+   JNE(WCp)             //jne short _skip
		;

		const addr = Exe.FindHex(code, jmpAddr, jmpAddr + 0x40);
		if (addr < 0)
			throw Error("Mode comparison not found");

		$$(_, 2.2, `Change the value to Mode 6 (Server Select)`)
		Exe.SetInt8(addr + 3, 6);
	}

	$$(_, 3.1, `Find the ShowMsg case`)
	let code =
		PUSH_0           //push 0
	+	PUSH_0           //push 0
	+	(Exe.Version > 11
	?
		MOV(R32, [R32])  //mov regA, dword ptr [regB]
	:
		''
	)
	+	PUSH_0           //push 0
	+	PUSH(0x2729)     //push 2729h
	;

	addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Select Server case not found");

	$$(_, 3.2, `Save the location after last PUSH`)
	const retnAddr = addr + code.byteCount();

	$$(_, 3.3, `Find the Replay Mode Enable bit setting`)
	const parts = [
		MOV(BYTE_PTR, [EAX, WCp], 1)	//mov byte ptr [eax + disp8A], 1
	,
		MOV(BYTE_PTR, [EAX, POS1WC], 1)	//mov byte ptr [eax + dispA], 1
	,
		XOR(R32, R32)					//xor regA, regB
	,
		MOV([R32, 0xC], 0x1B)			//mov dword ptr [regA + 0Ch], 1Bh
	];

	let addr2;
	if (Exe.BuildDate < 20180314) //VC6 - VC11 (first set of clients)
	{
		addr2 = Exe.FindHex(parts[0] + parts[3]);
	}
	else
	{
		if (Exe.Version === 11) //VC11 (remaining set)
		{
			addr2 = Exe.FindHex(parts[1] + parts[3]);
		}
		else //VC14.16
		{
			addr2 = Exe.FindHex(parts[1] + parts[2] + parts[3]);

			if (addr2 < 0)
				addr2 = Exe.FindHex(parts[0] + parts[2] + parts[3]);
		}
	}

	if (addr2 < 0)
		throw Error("Replay mode setter not found");

	$$(_, 3.4, `Get the Function address before the setter`)
	const funcAddr = Exe.GetTgtAddr(addr2 - 4);

	$$(_, 3.5, `Extract the move instruction & change 1 to 0`)
	let ins = Instr.FromAddr(addr2);
	ins.Imm = 0;

	$$(_, 4.1, `Construct the code to disable the Replay Mode and send 2722h instead of 2729h`)
	code =
		PUSHAD           //pushad
	+	CALL(Filler(1))  //call <funcAddr>
	+	ins              //mov byte ptr [eax + dispA], 1
	+	POPAD            //popad
	+	PUSH(0x2722)     //push 2722h
	+	JMP(Filler(2))   //jmp <retnAddr>
	;

	$$(_, 4.2, `Prepare the arguments for auto-hook`)
	const args = {
		targets : {
			1 : funcAddr,
		    2 : Exe.Phy2Vir(retnAddr, CODE)
		}
	};

	$$(_, 4.3, `Add our code and jump to it from before addr`)
	AutoHook(addr - 5, code, args);

	return true;
};

///
/// \brief Disable for Unsupported Clients (Should have the btn prefix string)
///
ShowReplayBtn.validate = () =>
	Exe.FindText("replay_interface\\btn_replay_b", PHYSICAL, false) > 0;

///
/// \brief Helper Function for Fixing the coordinates of the specified button as part of ShowReplayBtn patch
///
ShowReplayBtn.fixCoords = (btnImg, msgPrefix, suffix, suffix2) =>
{
	const _ = 'ShowReplayBtn.fixCoords';

	$$(_, 1.1, `Find the Button Image path`)
	let addr = Exe.FindText(btnImg, CASE_INSENSITIVE, false);
	if (addr < 0)
		throw Error(msgPrefix + "Button String not found");

	$$(_, 1.2, `Find where its assigned inside the UI*Wnd::OnCreate function`)
	addr = Exe.FindHex(addr.toHex() + " C7");
	if (addr < 0)
		throw Error(msgPrefix + "OnCreate function not found");

	$$(_, 1.3, `Set addr to location after the assignment`)
	addr += 5;

	$$(_, 2.1, `Find the coordinate assignment for the Cancel/Exit button`)
	addr = Exe.FindHex( (0xEA).toHex(), addr, addr + 0x50);
	if (addr < 0)
		throw Error(msgPrefix + "Second Button assignment not found");

	$$(_, 2.2, `Find the coordinate assignment for the button we need`)
	const memLoc = [ROC.StkReg, WC];

	let code, type;
	if (Exe.Version >= 11)//reg will be EBP since client has not done FPO since VC11
	{
		code =
			MOV(memLoc, -0x64)    //mov dword ptr [ebp/esp + dispX], -64 ; x-coord
		+	MOV(memLoc, -0x64)    //mov dword ptr [ebp/esp + dispY], -64 ; y-coord
		+	(Exe.Version > 11 && Exe.MinorVer < 20 ? suffix : suffix2)
		;
		type = 1; //VC11+
	}
	else
	{
		code =
			MOV(memLoc, R32)      //mov dword ptr [ebp/esp + dispX], regA ; x-coord
		+	MOV(memLoc, R32)      //mov dword ptr [ebp/esp + dispY], regA ; y-coord
		+	suffix
		;
		type = (ROC.HasFP ? 2 : 3) ; //2 for VC10 and 3 for VC9
	}

	const jmpAddr = Exe.FindHex(code, addr, addr + 0x50);
	if (jmpAddr < 0)
		throw Error(msgPrefix + "Coordinate assignment not found");

	$$(_, 2.3, `Save the location after the match`)
	const retnAddr = jmpAddr + code.byteCount() - 1;

	$$(_, 3.1, `Prepare code to replace/insert`)
	let xOff, yOff, yOk;
	switch (type)
	{
		case 1: //VC11+
		{
			xOff = Exe.GetInt8(jmpAddr + 2);
			yOff = Exe.GetInt8(retnAddr - 5);//should be xOff + 4 but still

			code =
				MOV([EBP, xOff], 4)    //mov dword ptr [ebp - dispX], 4 ;just need to swap -64 with 4
			+	MOV([EBP, yOff], EAX)  //mov dword ptr [ebp - dispY], eax
			+	NOP.repeat(4)          //nop x4
			;
			break;
		}
		case 2: //VC10
		{
			xOff = Exe.GetInt8(jmpAddr + 2);
			yOff = Exe.GetInt8(retnAddr - 1);//should be xOff + 4 but still
			yOk = xOff - 20;

			code =
				PUSH_EAX              //push eax ; needed since we lost the y-coord we need to retrieve it from the OK button
			+	MOV(EAX, [EBP, yOk])  //mov eax, dword ptr [ebp - yOk]
			+	MOV([EBP, xOff], 4)   //mov dword ptr [ebp - dispX], 4
			+	MOV([EBP, yOff], EAX) //mov dword ptr [ebp - dispY], eax
			+	POP(EAX)              //pop eax
			+	JMP(Filler(1))        //jmp <retnAddr>
			;
			break;
		}
		case 3: //VC9
		{
			xOff = Exe.GetInt8(jmpAddr + 3);
			yOff = Exe.GetInt8(retnAddr - 1);//should be xOff + 4 but still

			code =
				MOV([ESP, xOff], 4)   //mov dword ptr [esp + dispX], 4
			+	MOV([ESP, yOff], EAX) //mov dword ptr [esp + dispY], eax
			+	JMP(Filler(1))        //jmp <retnAddr>
			;
			break;
		}
	}

	$$(_, 3.2, `For VC11+ we can simply replace at appropriate area after the match (there is enough space)`)
	const csize = code.byteCount();
	if (type === 1) //VC11 & VC14.16
	{
		Exe.SetHex(retnAddr - csize, code);
	}
	else //VC9 & VC10
	{
		$$(_, 3.3, `For the others, prepare the arguments for auto-hook`)
		const args = {
			allocSize : csize,
			targets : { 1 : Exe.Phy2Vir(retnAddr, CODE) }
		};

		$$(_, 3.4, `Add the code and jump to it from jmpAddr`)
		AutoHook(jmpAddr, code, args);
	}

	return jmpAddr;//We return the address since we need it for the Mode comparison
};
