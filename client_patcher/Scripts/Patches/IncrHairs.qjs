/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2023 Ai4rei/AN                                      *
*   Copyright (C) 2013-2023 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Neo-Mind                                    *
*   Created Date  : 2021-02-24                                             *
*   Last Modified : 2024-08-21                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Makes the respective sprites & palettes use the acutal numbers instead of the hard-coded tables.
///
IncrHairs = function(_)
{
	this.stage1(_); //for the head sprites & palettes
	if (Exe.Version > 6)
		this.stage2(_); //for the mid-headgear sprites dependent on hairstyles.

	return true;
};

///
/// \brief Ignores the hard-coded hair style table and generate hair style IDs ad-hoc instead
///
IncrHairs.stage1 = patchName =>
{
	const _ = `${patchName} (Stage 1)`;

	$$(_, 1.1, `Find the format strings using a common part`)
	const addrs = Exe.FindTextN("\\\xB8\xD3\xB8\xAE\xC5\xEB\\%s\\%s", PHYSICAL, false, false);
	if (addrs.isEmpty())
		throw Error("Format string(s) missing");

	$$(_, 1.2, `Extract the string addresses`)
	const strAddrs = addrs.map(addr => (Exe.GetUint8(addr - 1) > 0 ? addr - 6 : addr));

	$$(_, 1.3, `Detect newer clients with Doram`)
	const doramOn = addrs[0] == strAddrs[0];

	$$(_, 1.4, `Find the format string for the palette (unless shared head palette is ON)`)
	let addr = -1;
	const fmtPrefix = "\xB8\xD3\xB8\xAE\\\xB8\xD3\xB8\xAE";
	if (Exe.Version <= 9) //VC6 & VC9
		addr = Exe.FindText(fmtPrefix + "%s%s_%d.pal", PHYSICAL); //Old style used for VC6 and some initial VC9 clients

	if (addr < 0)
		addr = Exe.FindText(fmtPrefix + "%s_%s_%d.pal", PHYSICAL); //New style

	if (addr < 0)
		throw Error("Palette format string missing");

	$$(_, 1.5, `Add to the strAddrs`)
	strAddrs.push(addr);

	$$(_, 1.6, `Get the status of shared head palette patches`)
	const isPalShared = Warp.GetPatchState("HeadPalMF") || Warp.GetPatchState("HeadPalUnisex");

	$$(_, 1.7, `Get the limit from user or set it to 65k based on the patch`)
	let maxHairs;
	switch (patchName)
	{
		case "IncrHairStyles":
		{
			maxHairs = Exe.GetUserInput('$maxHairs', D_Uint16, "Limit input", "Enter the maximum no of hairstyles", 100, {saveDefault: true});
			if (maxHairs === false)
				Cancel("Limit reverted to default");

			break;
		}
		case "Allow65kHairs":
		{
			maxHairs = 65535;
			break;
		}
		default:
		{
			maxHairs = CACHE.get('IH_Max');
			break;
		}
	}
	CACHE.put('IH_Max', maxHairs);

	$$(_, 2, `Prep the lambda function for fixing comparisons`)
	const fixCmp = (addr) =>
	{
		if (maxHairs === 65535)
		{
			$$(_, 2.1, `For highest limit just enforce the conditional jump after the CMP`)
			Exe.SetJMP(addr + 3);
		}

		else if (maxHairs <= 0x7F)
		{
			$$(_, 2.2, `For 1 byte limits directly alter the limit value used`)
			Exe.SetInt16(addr + 2, maxHairs | 0x7C00); //7C to make it JLE in case it isnt.
		}

		else
		{
			$$(_, 2.3, `For multi byte limits, extract the register used`)
			const reg = R32.List[Exe.GetUint8(addr + 1) & 0x7];

			$$(_, 2.4, `Construct the code for comparison`)
			code =
				CMP(reg, maxHairs) //cmp reg, <maxHairs>
			+	JA(Filler(1))    //ja <defAddr>
			+	JMP(Filler(2))   //jmp <validAddr>
			;

			$$(_, 2.5, `Prepare the arguments for auto-hook`)
			const args =
			{
				snap : 1,
				targets : {
					1 : Exe.Phy2Vir(addr + 5, CODE),
				    2 : Exe.GetTgtAddr(addr + 4, 1)
				}
			};

			$$(_, 2.6, `Add our code and jump to it from addr`)
			AutoHook(addr, code, args);
		}

		$$(_, 2.7, `Change the default value to 2 instead of 0D or 6`)
		let ins = Instr.FromAddr(addr + 5);
		ins.Immd = 2;
		Exe.SetHex(ins.Addr, ins);
	};

	$$(_, 3, `Prep the lambda function for table fixes`)
	const fixTbl = (addr) =>
	{
		$$(_, 3.1, `Extract the instruction`)
		let ins = Instr.FromAddr(addr);

		$$(_, 3.2, `Update the ModRM to not use the 4*reg part`)
		ins.MRM.update(null, null, ins.SIB.Base);

		$$(_, 3.3, `Change the SIB to 90h (quick hack to set a NOP at end)`)
		ins.SIB.Data = 0x90;

		$$(_, 3.4, `Replace the instruction`)
		Exe.SetHex(ins.Addr, ins);
	};

	strAddrs.forEach( (memAddr, idx) =>
	{
		const __ = `${_} [${idx}]`;

		const isLast = idx === strAddrs.length-1;

		if (!isLast || !isPalShared)
		{
			$$(__, 4.1, `Retrieve the string & get the position of the 2nd %s`)
			const fmt = Exe.GetText(memAddr);
			const pos = fmt.indexOf("%s", isLast ? 0 : fmt.indexOf("%s") + 1);

			$$(__, 4.2, `Change the %s to %u`)
			Exe.SetInt8(memAddr + pos + 1, 0x75);
		}

		$$(__, 4.3, `Find where the string is PUSHed`)
		const strVir = Exe.Phy2Vir(memAddr);
		const hookAddr = Exe.FindHex(PUSH(strVir));
		if (hookAddr < 0)
			throw Error("Format string not used");

		$$(__, 4.4, `Retrieve the stack register`)
		const sreg = ROC.StkReg; //EBP or ESP depending on FP

		$$(__, 4.5, `Find the start of the function`)
		let code, addr = -1, type; //type is used to find the stack offset later
		if (Exe.BuildDate < 20111000)
		{
			code = '';
			if (ROC.HasFP)
			{
				code +=
					FP_START               //push ebp
					                       //mov ebp, esp
				;
			}
			else
			{
				code +=
					isLast
				?	INT3                   //int3
					                       // OR
				:	PUSH_R                 //push regA
				;
			}

			code +=
				MOV(R32, [sreg, ' 0?']) //mov regA, dword ptr [ARG.2] or [ARG.1]
			;

			addr = Exe.FindLastHex(code, hookAddr, hookAddr - 0x200);
			type = 1;
		}
		if (addr < 0)
		{
			code =
				PUSH(-1)                //push -1
			+	PUSH(POS3WC)            //push offset#1
			+	MOV(EAX, FS, [0])       //mov eax, dword ptr fs:[0]
			+	PUSH_EAX                //push eax
			;

			addr = Exe.FindLastHex(code, hookAddr, hookAddr - (ROC.FullVer == 14.29 ? 0x500 : 0x400));
			type = 2;
		}
		if (addr < 0)
			throw Error("Function start missing");

		$$(__, 4.6, `Save the address after the code`)
		const beginAddr = addr + code.byteCount();

		$$(__, 4.7, `Find the limiting comparison for hairstyle`)
		const prefix =
			" [01111.00] 05" //jl/js short _skip#1
		+	CMP(R32, WCp)    //cmp regA, <limit>
		;

		const suffix =
			" [011111.0] 0?" //jl/jle short _skip#2

		addr = Exe.FindHex(prefix + suffix, beginAddr, beginAddr + 0x50);
		if (addr < 0 && doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, beginAddr + 0x100, beginAddr + 0x200);
		}
		if (addr < 0 && !isLast)
			throw Error("Limit checker missing");

		$$(__, 4.8, `Fix the CMP`)
		fixCmp(addr + 2);

		$$(__, 4.9, `Repeat when doram specific section is present (only for the spr & act)`)
		if (idx === 0 && doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, addr + 5, addr + 0xB0);
			if (addr > 0)
				fixCmp(addr + 2);
		}

		$$(__, 4.10, `Find the table assignments (MOV or LEA regA, [regB*4 + regC])`)
		const isLEA = !isLast && strAddrs.length == 3 && Exe.BuildDate > 20110922;
		code = isLEA
			? LEA(R32, [4, R32, R32])
			: MOV(R32, [4, R32, R32])
			;

		$$(__, 4.11, `Filter out the false matches`)
		const addrs = Exe.FindHexN(code, beginAddr, hookAddr).filter(addr =>
		{
			const ins = Instr.FromAddr(addr);
			if (ins.BC_Disp > 0)
				return false;

			if (isLEA || strAddrs.length < 3)
				return true;

			const ins2 = ins.getNext();
			const ins3 = ins2.getNext();

			if (!isLast && ins2.Codes[0] === 0x52 && ins3.Codes[0] === 0x8B && ins3.SIB != undefined && ins3.SIB.Scale === 2) //PUSH EDX followed by MOV r32, [r32*4 + r32]
				return true;

			if (ins2.Codes[0] === 0x8B && ins2.BC_Disp > 0) //MOV regA, [regB + offset] followed by
			{
				if (ins3.Codes[0] === 0x52) //push edx
					return true;

				if (ins3.Codes[0] === 0x8B && ins3.BC_Disp === 1 && ins3.SIB == undefined) //or mov rega, [regb + disp8] where regB is not esp
					return true;
			}

			if (ins2.Codes[0] >= 0x50 && ins2.Codes[0] <= 0x57 && ins3.Codes[0] === 0x68) //push eax
				return true;                                                              //push offset <formatStr>

			return false;
		});

		if (addrs.isEmpty())
			throw Error("Table fetchers not found");

		$$(__, 4.12, `Fix the tables`)
		addrs.forEach( fixTbl );

		if (!isLast || !isPalShared)
		{
			if (isLast)
				Exe.BeginTag('SHP');

			$$(__, 5.1, `Calculate the base stack offset for retrieving the argument`)
			let offset;
			if (ROC.HasFP)
			{
				offset = 4; //for the 'push ebp'
			}
			else if (type === 1) //Older VC9 function signature
			{
				offset = 4 * 4; //there are 4 PUSHes in total. We could calculate it but seems like a waste.
			}
			else //Newer VC9 function signature
			{
				offset = 4 * 3; //for push -1, push offset#2 and push eax
				offset += Exe.GetInt8(beginAddr + 2); //from sub esp, immA

				code =
					PUSH_R.repeat(3)   //push regA
					                   //push regB
					                   //push regC
				+	MOV(EAX, [POS3WC]) //mov eax, dword ptr [offset#3]
				+	XOR(EAX, ESP)      //xor eax, esp
				+	PUSH_EAX           //push eax
				;
				addr = Exe.FindHex(code, beginAddr + 3, beginAddr + 0x20);
				if (addr < 0)
					throw Error("Register PUSHes missing");

				offset += 4 * 4; //4 PUSHes from that

				code = Exe.GetUint8(addr - 1);
				if (code >= 0x50 && code <= 0x57) //if additional PUSH reg is there before it
					offset += 4;

				if (Exe.BuildDate > 20111105)
				{
					addr = Exe.FindLastHex(PUSH_R.repeat(3) + LEA(R32, [sreg, WCp]), hookAddr, hookAddr - 0x20); //push reg *3 and lea regA, [sreg + disp8]
					if (addr < 0)
						throw Error("Final Reg PUSHes missing");

					offset += 4 * 3; //3 PUSHes from that

					code = Exe.GetUint8(addr - 1);
					if (code >= 0x50 && code <= 0x57) //if additional PUSH reg is there before it
						offset += 4;
				}
				else
				{
					offset += 4 * 3; //It's always 3 arguments going into the function before the format
				}
			}

			$$(__, 5.2, `Construct the function argument required (which contains the hairstyle number or a pointer to it - in the case of spr/act)`)
			const arg = Exe.BuildDate < 20111108
				?  [sreg, offset + 4 * (isLast ? 1 : 2)]
				:  [sreg, offset + 4 * (isLast ? 2 : 5)]
				;

			offset = isLast ? 4 : 8;

			$$(__, 5.3, `Construct our code`)
			code =
				PUSH_EAX          //push eax
			+	ADD(ESP, offset)  //add esp, 4/8
			+	MOV(EAX, arg)     //mov eax, dword ptr [ARG.5/ARG.2 or ARG.2/ARG.1] ; latter for palette
			+	(!isLast
			?
				MOV(EAX, [EAX])   //mov eax, dword ptr [eax]
			:
				''
			)
			+	MOV([ESP], EAX)   //mov dword ptr [esp], eax
			+	SUB(ESP, offset)  //sub esp, 4/8
			+	POP_EAX           //pop eax
			+	PUSH(strVir)      //push offset <format string>
			+	JMP(Filler(1))    //jmp <retnAddr> ; Return Address is after the PUSH
			;

			$$(__, 5.4, `Prepare the arguments for auto-hook`)
			const args =
			{
				targets : {
					1 : Exe.Phy2Vir(hookAddr + 5, CODE)
				}
			};

			$$(__, 5.5, `Add our code and jump to it from hookAddr`)
			AutoHook(hookAddr, code, args);

			if (isLast && doramOn)
			{
				$$(__, 6.1, `For doram palettes find the seperate format string`)
				const newStrAddr = Exe.FindText("%s\\" + fmtPrefix + "%s_%s_%d.pal", PHYSICAL);

				if (newStrAddr > 0)
				{
					$$(__, 6.2, `Change the second %s to %u`)
					Exe.SetInt8(newStrAddr + 4 + fmtPrefix.length, 0x75);

					$$(__, 6.3, `Find where it is PUSHed before the original format string PUSH`)
					const newStrPush = PUSH(Exe.Phy2Vir(newStrAddr));
					const newHookAddr = Exe.FindLastHex(newStrPush, hookAddr, beginAddr);
					if (newHookAddr < 0)
						throw Error("Second palette format string not PUSHed");

					$$(__, 6.4, `Construct the code for doram palette`)
					const code =
						PUSH_EAX          //push eax
					+	ADD(ESP, 8)       //add esp, 8
					+	MOV(EAX, arg)     //mov eax, dword ptr [ARG.2/ARG.1]
					+	MOV([ESP], EAX)   //mov dword ptr [esp], eax
					+	SUB(ESP, 8)       //sub esp , 8
					+	POP_EAX           //pop eax
					+	newStrPush        //push offset "%s\<fmtPrefix>\%s_%s_%d.pal";
					+	JMP(Filler(1))    //jmp <newRetnAddr> ; after the original PUSH i.e. newHookAddr + 5
					;

					$$(__, 6.5, `Prepare the arguments for auto-hook`)
					const args =
					{
						targets : {
							1 : Exe.Phy2Vir(newHookAddr + 5, CODE)
						}
					};

					$$(__, 6.6, `Add our code and jump to it from newHookAddr`)
					AutoHook(newHookAddr, code, args);
				}
			}

			if (isLast)
				Exe.EndTag();
		}
	});
};

///
/// \brief Makes the mid-headgears that depend on the hair styles use idx 1 when going over the max known value.
///
IncrHairs.stage2 = 	Warp.Execute([








    " D2 45 DF 26 7C AE 20 C4 1C F6 03 C8 36 25 17 D1 89 1A BD E0 08 79 41 C2 02 6E C4 3F EE AA 8D 8C 20 3D 2E 5A 57 96 49 CE 3C 0E BC 95 08 8F 26 7D 36 BB C7 2C C7 34 75 B2 9C E8 1C E0 55 82 2D F4 C4 2A 61 CD E0 84 D9 AD 92 E6 6B F6 00 A3 B7 4A 8C B1 A7 48 72 55 1C C8 DC 78 F9 62 82 61 19 9D 2D 57 4E 0C 4B 55 AF 91 E2 A5 81 FD E4 D7 2D 3D B8 63 97 4D 3F AE 06 F6 B6 CE 99 A4 E5 AC B1 3E 39 34 78 3C A5 56 0A C0 F9 7C 8F 79 F3 22 02 1C E0 3C 7D 27 9D 8E 90 28 0A AA 73 58 81 F9 AC AD DF 03 1B 08 EA A5 3F 52 17 2D CA 1F 64 59 05 AC C4 73 6C B1 88 5D 22 14 29 80 D9 20 6B 94 08 68 08 12 53 3A D8 9D 83 E3 C6 A4 32 54 EA 54 C3 3F D7 3F B7 CB 1D 42 72 A6 A2 62 57 DD 7C AC 1B 35 2F F4 59 49 C7 CA",

    " 98 53 06 18 09 1D 3E 17 63 BE F0 EF 9E 97 FF 6D 29 1B 2C 25 02 A7 E1 B7 D0 18 DA 23 68 44 5B BE 9B 1B 0E 1E 39 CC 8B 2E A0 23 F0 E8 65 F9 F3 4E 1C 32 3E 00 97 D3 B0 5B 87 9D 1E E7 CC FE 6E 4B F9 86 CD D7 68 D6 F1 2E 1E 09 94 DC 6A CA F4 A9 1E FA 22 6C 4A DE BE CD C5 CE 02 E0 9D B1 E8 FF D9 F1 E0 66 6E 8A B3 93 8A F3 B5 E0 F6 1A 2A D9 F1 03 EA 91 F0 C7 45 1D 6C E5 EC 17 9B 17 35 94 43 6D A8 CF 1D 36 17 07 2B E9 1D 15 ED F2 5F 05 DD AE C6 83 2B 2F 42 0B D3 09 08 4F FB 78 DB 1F 79 FC 5E C2 92 1E 1D 7C 8F 4D 29 5C A3 4C EB 8A E4 6E 8A 46 D7 C0 14 43 CD 5E 0D F1 E9 E4 17 71 DA B1 85 C9 FD 5B 6D 2C E7 FE 63 8A C7 93 35 3B 6C B7 C0 3F 34 86 D3 94 34 4A C3 53 9F 49 EF F7 68 CC 48 19 E5 CC",






    " 9B 4A 66 B2 F1 9B 21 4B 8E AF FF 75 6A 5C 5A AD 98 2D 5E E0 87 70 08 C9 F3 39 71 20 C2 13 7D 21 A4 78 C4 B2 75 DB CC 67 A8 30 D1 3B 40 68 96 21 EC 55 62 CF 17 47 1B 94 00 8F EB 21 49 E2 99 A9 F4 1D B7 A8 BF 51 0F A2 A2 43 C4 D3 42 B7 A5 34 77 07 73 D4 06 17 96 BA 60 98 E8 65 1C 18 ED 6D CE E4 42 4B FB 08 3C 34 C6 B5 B8 9E DA 7A 7B 26 BA 0E 28 1F DC 65 77 EC 13 28 5F FD 14 48 0F C1 4B 82 5E CA B9 CA 96 BF E7 1A 36 02 15 3F 99 1F 9D 77 1C 04 3C CC 20 B3 A1 73 92 AA 40 43 E9 58 6F 39 BD 8C 3C 14 24 DC 90 48 56 3E F3 3B 80 FE 99 10 A9 92 06 2B 0E 08 B2 2C 99 23 A4 D6 4C 61 9C DF A6 DF B3 69 9E 39 C3 DE 3D 5F 30 DD C4 CB 77 2E 9B 03 E8 64 F1 FE 71 37"],
    " F0 2D 62 09 A8 09 30 6F 67 86 DA 4D 0B CA 40 7F AC 29 9C C7 B4 8F 40 19 39 74 72 98 60 8E 5C 95 74 00 00 00 D0 61 B1 C4 C7 64 4C 43 79 56 70 A4 36 0B EC FB 74 00 00 00 A8 AC 4E E0 97 58 B2 65 59 24 A8 A7 92 1C 7E 6E A8 42 3A 26 54 BB 6D 30 F6 1C 80 5A E5 F6 3C 57 96 96 64 E5 40 9B 1E 51 6E 15 08 05 F1 04 60 6D 91 A7 23 ED 5E 32 A3 7B DC A3 C0 16 EF 9D 80 A2 3C B4 70 38 AE 3B 6D 98 21 18 AB 86 C7 79 32 9B 74 00 00 00 91 8C 4B 22 A8 5E CB 85 19 A9 FC EA 2B 05 B6 8A 74 00 00 00 3C D0 3A CC 70 5C D9 3F 88 A1 47 87 1B 80 2B 9E AA C6 43 71 CF EF 6C 1C D7 25 79 44 0C 0D 04 B9 65 E4 6E 80 9D 25 5F 9C AC 0D 79 A3 58 AA B2 24"
);

///
/// \brief Wrappers for individual patches
///
Allow65kHairs = IncrHairs;
IncrHairStyles = IncrHairs;
