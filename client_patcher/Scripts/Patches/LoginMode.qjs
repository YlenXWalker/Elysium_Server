/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Ai4rei/AN, Shinryo                                *
*   Copyright (C) 2013-2024 Neo Mind                                       *
*   Copyright (C) 2017-2024 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Shinryo, Neo-Mind, Andrei (4144)            *
*   Created Date  : 2020-11-08                                             *
*   Last Modified : 2024-08-14                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the conditional jump to JMP/NOP after Langtype Comparison inside CLoginMode::OnChangeState function.
///        This ensures the Login Packet is always sent.
///
UseSSOLogin = function(_)
{
	$$(_, 1.1, `Ensure the LANGTYPE is loaded`)
	LANGTYPE.load();

	if (Exe.Version === 6) //VC6
	{
		$$(_, 1.2, `Find the Langtype comparison`)
		const code =
			MOV(AL, [POS3WC])      //mov al, byte ptr [g_passwordencrypt]
		+	WC + WC                //test al, al ; (could be checked with CMP also. hence using wildcard)
		+	JNE(POS2WC)            //jne _skip
		+	MOV(EAX, [LANGTYPE])   //mov eax, dword ptr [g_serviceType]
		+	WC + WC                //test eax, eax OR cmp eax, ebp
		;
		let isJNE = true;
		let addr = Exe.FindHex(code +
			JNE(POS2WC)            //jne _sendLP -> Send Login Packet (ID = 0x64)
		);

		if (addr < 0)
		{
			isJNE = false;
			addr = Exe.FindHex(code +
				JZ(WCp)            //jz _skipLP -> Skip sending Login Packet (ID = 0x64)
			);
		}
		if (addr < 0)
			throw Error("Langtype comparison not found <b>for (VC6)</b>");

		if (isJNE)
		{
			$$(_, 1.3, `NOP out the 2nd JNE`)
			Exe.SetNOPs(addr + code.byteCount(), 6);
		}
		else
		{
			$$(_, 1.4, `Enforce the JZ`)
			Exe.SetJMP(addr + code.byteCount());
		}
	}
	else //newer clients
	{
		$$(_, 2.1, `Find the Langtype comparison`)
		let parts =
		[ //0
			CMP(BYTE_PTR, [POS4WC], 0) //cmp byte ptr [g_passwordencrypt], 0
		+	JNE(POS2WC)                //jne _skip
		
		, //1
			MOV(Exe.Version > 10       //mov regA, dword ptr [g_serviceType]
				? R32
				: EAX                  //regA will be EAX for older clients
				, [LANGTYPE]
			)
		+	WC + WC                    //test eax, eax OR cmp eax, ebp
		
		, //2
			JZ(POS2WC)                 //jz _sendSSO -> Send SSO Packet (ID = 0x825. was 0x2B0 in Old clients)
		+	CMP(R32, 0x12)             //cmp regA, 12h ; ideally should be EAX but some clients have different register
		+	JZ(POS2WC)                 //jz _sendSSO
		];

		let addr = Exe.FindHex(parts);
		if (addr < 0 && ROC.FullVer == 14.29)
		{
			parts[0] =
				PUSH_2                 //push 2
			+	CALL(ALLWC)            //call func#1
			+	MOV(ECX, R32)          //mov ecx, regA
			+	CALL(ALLWC)            //call func#2
			;
			addr = Exe.FindHex(parts);
		}
		if (addr < 0)
			throw Error("Langtype comparison not found <b>for (VC9+)</b>");

		$$(_, 2.2, `Enforce the first JZ`)
		Exe.SetJMP(addr + parts.byteCount(0, 1));
	}

	return true;
};

///
/// \brief Enables use of the old 0x64 login packet.
///        Was previously done as part of RestoreLoginWindow but newer clients dont have the login window interface.
///
UseOldLogin = function(_)
{
	$$(_, 1.1, `Ensure the LANGTYPE is loaded`)
	LANGTYPE.load();

	$$(_, 1.2, `Find the langtype comparison for sending login packet inside CLoginMode::ChangeState`)
	let parts =
	[ //0
		CMP(BYTE_PTR, [POS4WC], 0) //cmp byte ptr [g_passwordencrypt], 0
	+	JNE(POS2WC)                //jne _skip
	
	, //1
		MOV(Exe.Version > 10       //mov regA, dword ptr [g_serviceType]
			? R32
			: EAX                  //regA will be EAX for older clients
			, [LANGTYPE]
		)
	
	, //2
		WC + WC                    //test eax, eax OR cmp eax, ebp
	+	JZ(POS2WC)                 //jz _sendSSO -> Send SSO Packet (ID = 0x825. was 0x2B0 in Old clients)
	+	CMP(R32, 0x12)             //cmp regA, 12h ; ideally should be EAX but some clients have different register
	+	JZ(POS2WC)                 //jz _sendSSO
	];

	let addr = Exe.FindHex(parts);
	if (addr < 0 && ROC.FullVer == 14.29)
	{
		parts[0] =
			PUSH_2                 //push 2
		+	CALL(ALLWC)            //call func#1
		+	MOV(ECX, R32)          //mov ecx, regA
		+	CALL(ALLWC)            //call func#2
		;
		addr = Exe.FindHex(parts);
	}
	if (addr < 0)
		throw Error("Langtype comparison missing");

	$$(_, 1.3, `Set addr to location of the TEST/CMP`)
	addr += parts.byteCount(0, 1);

	$$(_, 2.1, `Set the amount of bytes to skip over`)
	let nopCount = parts.byteCount(2);

	$$(_, 2.2, `Ensure the instruction after the code is not another comparison. If so update the nopCount`)
	const ins = Instr.FromAddr(addr + nopCount);
	if (ins.Codes[0] === 0x83 && ins.MRM.RegO === 7)
		nopCount += 9; //3 for CMP, 6 for JZ

	$$(_, 2.3, `Now NOP it (technically it will just become a JMP inside)`)
	Exe.SetNOPs(addr, nopCount);

	return true;
};

///
/// \brief Disable for Unneeded Clients - Only Latest clients have the new login window which needs the old packet
///
UseOldLogin.validate = () =>
	Exe.BuildDate > 20100803 && !ROC.HasLWhidden;

///
/// \brief Restore the original code that created the Login Window inside CLoginMode::OnChangeState function.
///        Also adds supporting Changes to make the original code work.
///
RestoreLoginWindow = function(_)
{
	$$(_, 1, `Ensure the LANGTYPE & WINMGR has been loaded`)
	LANGTYPE.load();
	WINMGR.load();

	$$(_, 2.1, `Find the location where we need to make client call the login window`)
	const parts =
	[//0
		PUSH_EAX                    //push eax
	+ 	CALL(NEG3WC)                //call g_ResMgr
	+ 	MOV(ECX, EAX)               //mov ecx, eax
	+ 	CALL(NEG3WC)                //call CResMgr::Get
	+ 	PUSH_EAX                    //push eax
	+ 	WINMGR.MovECX               //mov ecx, <g_windowMgr>
	+ 	CALL(NEG3WC)                //call UIWindowMgr::SetWallpaper

	,//1
		CMP(BYTE_PTR, [POS4WC], 0)  //cmp byte ptr [g_Tparam], 0 <- The parameter push + call to UIWindowManager::MakeWindow originally here
	+ 	JZ(0x13)                    //jz short _skip ; after the JMP
	+ 	MOV(BYTE_PTR, [POS4WC], 0)  //mov byte ptr [g_Tparam], 0
	+	MOV([R32, 0xC], 4)          //mov dword ptr [regB + 0Ch], 4 <- till here we need to overwrite. regB can be EBX or EDI

	,//2
		JMP()                       //JMP _next
		                            //_skip comes here
	];

	let codeAddr = Exe.FindHex(parts);
	if (codeAddr < 0)
		throw Error("g_Tparam comparison missing");

	$$(_, 2.2, `Set codeAddr to location where we will overwrite`)
	codeAddr += parts.byteCount(0);

	$$(_, 2.3, `Get the VIRTUAL address of the location`)
	const codeVir = Exe.Phy2Vir(codeAddr, CODE);

	$$(_, 2.4, `Prepare code to overwrite with (originally present in old clients)`)
	let code =
		PUSH(3)                           //push 3
	+	WINMGR.MovECX                     //mov ecx, <g_windowMgr>
	+	CALL(WINMGR.MakeWin, codeVir + 7) //call UIWindowMgr::MakeWindow ; 2 + 5 bytes from previous 2 instructions
	+	JMP(Filler(1,1))                  //jmp short _skip#2 ; skip over to the mov dword ptr [regB + 0C], 4
	;
	code = SetFillTargets( code, {'1,1': parts.byteCount(1)} );

	$$(_, 2.5, `Overwrite at codeAddr`)
	Exe.SetHex(codeAddr, code);

	//===============================================//
	// Now for some additional stuff to make it work //
	//===============================================//

	$$(_, 3, `Enable the old login packet`)
	UseOldLogin(_ + '(UOL)');

	/*============================================================================================================================
	Shinryo: We need to make the client return to Login Interface when Error occurs (such as wrong password, failed to connect).
			For this in the CModeMgr::SendMsg function, we set the return mode to 3 (Login) and pass 0x271D as idle value
			and skip the quit operation.
	==============================================================================================================================
	First we need to find the g_modeMgr & mode setting function address. The address is kept indirectly =>

	mov ecx, dword ptr [Reference]
	mov eax, dword ptr [ecx]
	mov edx, dword ptr [eax+18h]

	now ECX + 0Ch contains g_modeMgr & EDX is the function address we need. But these 3 instructions are not always kept together
	as of recent clients.
	=============================================================================================================================*/

	$$(_, 4.1, `First we look for one location that appears always after g_modeMgr is retrieved`)
	code =
		PUSH_0     //push 0
	+ 	PUSH_0     //push 0
	+ 	PUSH_0     //push 0
	+ 	PUSH(0xF6) //push 0F6h
	+ 	" FF"      //call regA OR call dword ptr [regA + dispA]
	;
	let addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Unable to find g_modeMgr code");

	$$(_, 4.2, `Find the start of the function`)
	code =
		CMP([POS4WC], 1)  //cmp dword ptr [addr#1], 1
	+	JNE(WCp)          //jne short _skip#3
	+	MOV(ECX, [])      //mov ecx, dword ptr [Reference]
	;

	addr = Exe.FindHex(code, addr - 30, addr);
	if (addr < 0)
		throw Error("Start of Function missing");

	$$(_, 4.3, `Set addr to location after the MOV`)
	addr += code.byteCount();

	$$(_, 5.1, `Extract the reference and construct the code for getting g_modeMgr to ECX + C & mode setter to EDX (same as shown initially)`)
	const infix =
		Exe.GetHex(addr - 1, 6)  //mov ecx, dword ptr [Reference]
	+ 	MOV(EAX, [ECX])          //mov eax, dword ptr [ecx]
	+ 	MOV(EDX, [EAX, 0x18])    //mov edx, dword ptr [eax+18h]
	;

	$$(_, 5.2, `Find how many push 0s are there. Older clients had 3 arguments but newer ones only have 3`)
	const pushes = Exe.FindHexN(PUSH_0, addr + 4, addr + 16);

	$$(_, 5.3, `Find error handler (CModeMgr::Quit)`)
	code =
		MOV(ESI, ECX)           //mov esi, ecx
	+ 	MOV(EAX, [ESI, 4])      //mov eax, dword ptr [esi+4]
	+ 	MOV([EAX, 0x14], 0)     //mov dword ptr [eax+14h], 0
	+ 	CMP([LANGTYPE], 0xB)    //cmp dword ptr [g_serviceType], 0Bh
	+	JNE(' [0001110.]')      //jne short _skip#4 -> after CALL instruction below (different delta for VC11+)
	+	(Exe.Version > 10
	?
		''
	:
		MOV(ECX, [POS3WC])      //mov ecx, dword ptr [g_hMainWnd] ; not there for VC11
	)
	+ 	PUSH_1                  //push 1
	+ 	PUSH_0                  //push 0
	+ 	PUSH_0                  //push 0
	+ 	PUSH(POS3WC)            //push offset "http://www.ragnarok.co.in/index.php"
	+ 	PUSH(POS3WC)            //push offset "open"
	+	(Exe.Version > 10
	?
		PUSH([POS4WC])          //push dword ptr [g_hMainWnd] ; For recent client g_hMainWnd is directly pushed instead of assigning to ECX first
	:                           //  OR
		PUSH(ECX)               //push ecx
	)
	+	CALL([POS3WC])          //call dword ptr [<&SHELL32.ShellExecuteA>]

	+	MOV([ESI], 0)	 	    //mov dword ptr [esi], 0 ; _skip#4 (ESI is supposed to have g_modeMgr but it doesn't always point to it, so we assign it another way)
	;

	addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Unable to find SendMsg function");

	/*=====================================================================================
	Shinryo:
	The easiest way would be probably to set this value to a random value instead
	of 0, but the client would dimmer down/flicker and appear again at login interface.
	=====================================================================================*/

	$$(_, 5.4, `Construct the full replacement code`)
	let replace =
		PUSH(EDX)                     //push edx
	+ 	PUSH_EAX                      //push eax
	+ 	infix                         //mov ecx, dword ptr [Reference]
		                              //mov eax, dword ptr [ecx]
		                              //mov edx, dword ptr [eax+18]
	+	PUSH_0.repeat(pushes.length)  //push 0 ; multiple number of times

	+	PUSH(0x271D)                  //push 271Dh
	+	MOV([ECX, 0xC], 3)            //mov dword ptr [ecx+0Ch],3
	+	CALL(EDX)                     //call edx
	+	POP(EAX)                      //pop eax
	+	POP(EDX)                      //pop edx
	;
	replace += JMP(code.byteCount(), replace.byteCount()); //Skip to the POP ESI

	$$(_, 5.5, `Overwrite the SendMsg function`)
	Exe.SetHex(addr, replace);

	//==========================================================================//
	// Extra for certain 2013 - 2014 clients. Need to fix a function to return 1//
	//==========================================================================//

	if (Exe.BuildDate >= 20130320 && Exe.BuildDate <= 20140226)
	{
		$$(_, 6.1, `Find the string 'ID'`)
		addr = Exe.FindText("ID");
		if (addr < 0)
			throw Error("'ID' not found");

		$$(_, 6.2, `Find where it is PUSHed`)
		//  push 1
		//  push 0
		//  push offset "ID"
		addr = Exe.FindHex( PUSH_1 + PUSH_0 + PUSH(addr) );
		if (addr < 0)
			throw Error("'ID' not used");

		$$(_, 6.3, `Find the new function CALL in 2013 clients`)
		//  push eax
		//  call func#2
		//  jmp addr#2
		addr = Exe.FindHex( PUSH_EAX  + CALL(POS3WC) + JMP(WC), addr - 80, addr);
		if (addr < 0)
			throw Error("Function not found");

		$$(_, 6.4, `Extract the CALLed address`)
		let tgtAddr = Exe.GetTgtAddr(addr + 2, PHYSICAL);

		$$(_, 6.5, `Now look for the JMP inside the function (ugh)`)
		addr = Exe.FindHex( JMP(), tgtAddr );
		if (addr < 0)
			throw Error("Jump Not found inside function");

		$$(_, 6.6, `Now get the jump target address`)
		tgtAddr = Exe.GetTgtAddr(addr + 1, PHYSICAL);

		$$(_, 6.7, `Search for pattern to get func call <- need to remove that call`)
		//  push 13
		//  call dword ptr [addr#1]
		//  and eax, 000000FFh
		addr = Exe.FindHex( PUSH(0x13) + CALL([POS3WC]) + AND(EAX, 0xFF), tgtAddr);
		if (addr < 0)
			throw Error("Pattern not found");

		$$(_, 6.8, `This part is tricky we are going to replace the call with xor eax,eax & add esp, c for now since i dunno what its purpose was anyways. 13 is a hint`)
		//  xor eax, eax
		//  add esp, 0Ch
		//  nop
		Exe.SetHex(addr + 2, XOR(EAX,EAX) + ADD(ESP, 0xC) + NOP);
	}

	return true;
};

///
/// \brief Disable for Unneeded Clients - Started disappearing only from VC9 onwards.
///        But latest clients have completely removed the window itself.
///
RestoreLoginWindow.validate = HasHiddenLogWin;
