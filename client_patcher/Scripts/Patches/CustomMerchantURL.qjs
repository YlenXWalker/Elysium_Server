/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2024 CH.C (jchcc)                                   *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : CH.C (jchcc)                                           *
*   Created Date  : 2021-06-14                                             *
*   Last Modified : 2024-08-08                                             *
*                                                                          *
\**************************************************************************/

// TODO - 2020-03 (VC11) client has failure

CustomMerchantURL = function(_)
{
	$$(_, 1.1, `Extract the data objects`)
	let Saver = this.Data.get('Saver');
	let Loader = this.Data.get('Loader');

	if (Saver.urlRefs.size === 0)
	{
		$$(_, 1.2, `Find where the URLs are PUSHed along with their lengths`)
		let parts =
		[
			PUSH(0x2E)              // push 2Eh ; length of the url
		+	PUSH(Saver.oldAddr)     // push offset <save url>
		+	CALL(ALLWC)             // call memcpy
		,
			PUSH(0x2E)              // push 2Eh
		+	PUSH(Loader.oldAddr)    // push offset <load url>
		+	LEA(ECX, [EDI, 0x24])   // lea ecx, [edi + 24h]
		+	CALL()                  // call memcpy
		];

		const addr = Exe.FindHex(parts);
		if (addr > 0)
		{
			$$(_, 1.3, `Save the locations where the values are PUSHed`)
			const csize = parts.byteCount(0);

			Saver.lenRefs.add(addr + 1);
			Saver.urlRefs.add(addr + 3);

			Loader.lenRefs.add(addr + csize + 1);
			Loader.urlRefs.add(addr + csize + 3);

		} else if (!ROC.IsZero) //mandatory for others
			throw Error("1st URL references missing");

		$$(_, 1.4, `Find where they are assigned to registers (there should be 2 such references)`)
		parts =
		[
			MOV(EDI, Loader.oldAddr)  // mov edi, offset <load url>
		,
			MOV(ESI, 0x2E)            // mov esi, 2Eh ; length of save url
		+	MOV(EAX, Saver.oldAddr)   // mov eax, offset <save url>
		];

		const addrs = Exe.FindHexN(parts);
		const csize = parts.byteCount(0);

		for (const addr of addrs)
		{
			$$(_, 1.5, `Save the locations from the 2nd reference`)
			Loader.urlRefs.add(addr + 1);

			Saver.lenRefs.add(addr + csize + 1);
			Saver.urlRefs.add(addr + csize + 6);
		}
	}

	$$(_, 2, `Next set of actions is common for both Saver & Loader`)
	const result = [Saver, Loader].filter( (obj, idx) =>
	{
		const __ = `${_} [${idx}]`;

		$$(__, 2.1, `Get the new URL from user`)
		const newURL = Exe.GetUserInput(obj.varName, D_Text, "MerchantStore URLs", "Enter the new " + obj.prefix + " URL", obj.oldURL, {minLen: 9, maxLen: 255});
		if (newURL === false)
			return false;

		$$(__, 2.2, `Add the new URL into the exe`)
		const [, urlAddr] = Exe.AddFromVar(obj.varName);

		$$(__, 2.3, `Get the length`)
		const len = newURL.length;

		$$(__, 2.4, `Replace all the lengths`)
		if (len !== 0x2E)
		{
			for (const addr of obj.lenRefs)
				Exe.SetUint8(addr, len);
		}

		$$(__, 2.5, `Replace the string addresses`)
		for (const addr of obj.urlRefs)
			Exe.SetInt32(addr, urlAddr);

		return true;
	});

	if (result.isEmpty())
		Cancel('No New URLs entered');

	$$(_, 3, `Remove all the official ip addresses`)
	const find = "http://112.175.128.140:3000";
	const repl = "http://0.0.0.0/\x00";

	for (const addr of Exe.FindTextN(find, false, false))
		Exe.SetText(addr, repl);

	return true;
};

///
/// \brief Disable for unsupported clients
///
CustomMerchantURL.validate = function()
{
	let Saver = this.Data.get('Saver');
	Saver.oldAddr = Exe.FindText(Saver.oldURL, true, false);

	let Loader = this.Data.get('Loader');
	if (Saver.oldAddr > 0)
		Loader.oldAddr = Exe.FindText(Loader.oldURL, true, false);

	Saver.lenRefs.clear();
	Saver.urlRefs.clear();
	Loader.lenRefs.clear();
	Loader.urlRefs.clear();

	return (Saver.oldAddr > 0 && Loader.oldAddr > 0);
};

///
/// \brief Data to be used by the patch function
///
CustomMerchantURL.Data = MakeMap(
	'Saver',
	{
		oldURL: "http://112.175.128.140:3000/MerchantStore/save",
		varName: '$saveURL',
		prefix: 'Save',
		lenRefs: new Set(),
		urlRefs: new Set(),
	},

	'Loader',
	{
		oldURL: "http://112.175.128.140:3000/MerchantStore/load",
		varName: '$loadURL',
		prefix: 'Load',
		lenRefs: new Set(),
		urlRefs: new Set(),
	}
);
