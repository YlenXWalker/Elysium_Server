/**************************************************************************\
*                                                                          *
*   Copyright (C) 2021-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with program.  If not, see <http://www.gnu.org/licenses/>.       *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2021-09-28                                             *
*   Last Modified : 2024-08-08                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Modifies the height being fed to CreateFontA function in the client.
///
FontHeight = function(_)
{
	if (!Warp.TestMode)
	{
		$$(_, 1.1, `Deactivate other patches`)
		for (const name of this.Data.keys())
		{
			if (name !== _)
				Warp.SetPatchState(name, false);
		}
	}

	$$(_, 1.2, `Ensure FONTAIN is loaded`)
	FONTAIN.load();

	$$(_, 1.3, `Retrieve patch specific constants`)
	const {varName, prompt, defVal} = this.Data.get(_);
	
	if (_ === "CustomFontHgtLimits")
	{
		$$(_, 2.1, `Retrieve the limits from user`)
		const [limitL, limitH] = varName.map( (name, idx) =>
		{
			return Exe.GetUserInput(name, D_FontSize, "Font Height Limit", "Enter the new " + prompt[idx], defVal, {sampleName: "Tahoma"});
		});
		if ( limitL === false && limitH === false)
			Cancel("No limits set");

		$$(_, 2.2, `Setup min height limit if defined`)
		if (limitL !== false)
			FONTAIN.setMinHgt(limitL);

		$$(_, 2.3, `Setup max height limit if defined`)
		if (limitH !== false)
			FONTAIN.setMaxHgt(limitH);
	}
	else
	{
		$$(_, 3.1, `Get the new height/height offset from user`)
		const newVal = Exe.GetUserInput(varName, _ === 'CustomFontHgtOffset' ? D_Int8 : D_FontSize, "Font Height", "Enter the new " + prompt, defVal, {sampleName: "Tahoma"});
		if (newVal === false)
			Cancel("Height reverted");

		$$(_, 3.2, `Setup the height/height offset`)
		switch (_)
		{
			case "CustomFontHeight" :
			{
				FONTAIN.setHeight(-newVal);
				break;
			}
			case "CustomFontCellHeight" :
			{
				FONTAIN.setHeight(newVal);
				break;
			}
			case "CustomFontHgtOffset" :
			{
				FONTAIN.setHgtOff(newVal);
				break;
			}
		}
	}

	$$(_, 4, `Stage the changes`)
	FONTAIN.stage(_);
	return true;
};

///
/// \brief Data for Font height patches
///
FontHeight.Data = MakeMap(
	'CustomFontHeight',
	{
		varName : '$newFontHgt',
		prompt : "Character height",
		defVal : 10
	},

	'CustomFontCellHeight', 
	{
		varName : '$newFontCellHgt',
		prompt : "Character cell height",
		defVal : 10
	},

	'CustomFontHgtOffset',
	{
		varName : '$fontHgtOff',
		prompt : "Height adjustment",
		defVal : 0
	},

	'CustomFontHgtLimits',
	{
		varName : ['$fontHgtLimitL', '$fontHgtLimitH'],
		prompt : ["Min Character cell height", "Max Character cell height"],
		defVal : 10
	}
);

///
/// \brief Cleans up the staging done in the patch.
///
FontHeight.cleanup = function(_)
{
	switch (_)
	{
		case "CustomFontHeight" :
		case "CustomFontCellHeight" :
		{
			FONTAIN.setHeight(null);
			break;
		}
		case "CustomFontHgtOffset" :
		{
			FONTAIN.setHgtOff(null);
			break;
		}
		case "CustomFontHgtLimits" :
		{
			FONTAIN.setMinHgt(null);
			FONTAIN.setMaxHgt(null);
			break;
		}
	}

	FONTAIN.unstage(_);
};

///
/// \brief Wrappers for individual patches
///
CustomFontHeight     = FontHeight;
CustomFontCellHeight = FontHeight;
CustomFontHgtOffset  = FontHeight;
CustomFontHgtLimits  = FontHeight;

///
/// \brief Modifies the font weight being fed to CreateFontA function in the client.
///
FontWeight = function(_)
{
	if (!Warp.TestMode)
	{
		$$(_, 1.1, `Deactivate other patches`)
		for (const name in this.Data.keys())
		{
			if (name !== _ &&
				!((name === "CustomNormalFontWeight" && _ === "CustomBoldFontWeight") || (_ === "CustomNormalFontWeight" && name === "CustomBoldFontWeight"))
			)
				Warp.SetPatchState(name, false);
		}
	}

	$$(_, 1.2, `Ensure FONTAIN is loaded`)
	FONTAIN.load();

	$$(_, 2.1, `Get the new weight/weight offset from user`)
	const {varName, limits, defVal, prompt} = this.Data.get(_);
	
	const val = Exe.GetUserInput(varName, D_Int16, "Font Weight", "Enter the new " + prompt, defVal, {
		min: limits[0],
		max: limits[1],
		saveDefault: (_ === "CustomFontWeight")
	});

	if (val === false)
		Cancel("Weight reverted");

	$$(_, 2.2, `Setup the weight/weight offset obtained`)
	switch (_)
	{
		case "CustomFontWgtOffset" :
		{
			FONTAIN.setWgtOff(val);
			break;
		}

		case "CustomFontWeight" :
		{
			FONTAIN.setWeight(val);
			break;
		}

		case "CustomNormalFontWeight" :
		case "CustomBoldFontWeight" :
		{
			FONTAIN.changeWeight(defVal, val);
			break;
		}
	}

	$$(_, 2.3, `Stage the changes`)
	FONTAIN.stage(_);
	return true;
};

///
/// \brief Data for Font weight patches
///
FontWeight.Data = MakeMap(
	'CustomFontWeight',
	{
		varName : '$newfontWgt',
		limits : [0, 1000],
		prompt : "Font Weight",
		defVal : 400
	},

	'CustomFontWgtOffset',
	{
		varName : '$newFontWgtOff',
		limits : [-1000, 1000],
		prompt : "Font Weight adjustment",
		defVal : 0
	},

	'CustomNormalFontWeight',
	{
		varName : '$newNormFontWgt',
		limits : [100, 540],
		prompt : "Normal Font Weight",
		defVal : 400
	},

	'CustomBoldFontWeight',
	{
		varName : '$newBoldFontWgt',
		limits : [550, 900],
		prompt : "Bold Font Weight",
		defVal : 700
	}
);

///
/// \brief Cleanup the staging done in the patch.
///
FontWeight.cleanup = function(_)
{
	switch(_)
	{
		case "CustomFontWgtOffset" :
		{
			FONTAIN.setWgtOff(null);
			break;
		}
		case "CustomFontWeight" :
		{
			FONTAIN.setWeight(null);
			break;
		}
		case "CustomNormalFontWeight" :
		case "CustomBoldFontWeight" :
		{
			FONTAIN.changeWeight(this.Data.get(_).defVal);
			break;
		}
	}

	FONTAIN.unstage(_);
};

///
/// \brief Wrappers for individual patches
///
CustomFontWeight       = FontWeight;
CustomBoldFontWeight   = FontWeight;
CustomNormalFontWeight = FontWeight;
CustomFontWgtOffset    = FontWeight;


/* For reference
Weight_Values = {
	Thin : 100,
	ExtraLight : 200,
	Light : 300,
	Normal : 400,
	Medium : 500,
	SemiBold : 600,
	Bold : 700
	UltraBold : 800,
	Heavy : 900
};
*/

///
/// \brief Modify the family/face name being fed to CreateFontA function in the client.
///
CustomFontName = function(_)
{
	$$(_, 1.1, `Ensure FONTAIN is loaded`)
	FONTAIN.load();

	$$(_, 1.2, `Get the new name from user`)
	const varName = '$newFont';
	const newFont = Exe.GetUserInput(varName, D_FontName, "Font input", "Select the new Font Family", "Arial", {saveDefault: true, sampleSize: 10});
	if (newFont === false)
		Cancel("Font name reverted");

	$$(_, 2.2, `Find the Font name (could be already existing one)`)
	const phy = Exe.FindText(newFont, PHYSICAL);
	if (phy > 0)
	{
		$$(_, 2.3, `Get the VIRTUAL address`)
		FONTAIN.setNameAddr(Exe.Phy2Vir(phy));
	}
	else
	{
		$$(_, 2.4, `Allocate space & add the font since its not already present`);
		FONTAIN.setNameAddr(Exe.AddFromVar(varName)[1]);
	}

	FONTAIN.stage(_);
	return true;
};

///
/// \brief Cleanup the staging done in the patch
///
CustomFontName.cleanup = _ =>
{
	FONTAIN.setNameAddr(null);
	FONTAIN.unstage(_);
};

///
/// \brief Modify the charset fed to CreateFontA function in the client
///

CustomFontCharset = function(_)
{
	$$(_, 1.1, `Ensure FONTAIN is loaded`)
	FONTAIN.load();

	$$(_, 1.2, `Get the Font charset from user`)
	const varName = '$newFontCharset';
	const key = Exe.GetUserInput(varName, D_Choice, "Font input", "Select the new Font Charset", "DEFAULT", {choices: Object.getOwnPropertyNames(this.Data)});
	if (key === false)
		Cancel("Font charset reverted");

	$$(_, 2.1, `Setup the value`)
	FONTAIN.setCharset(this.Data[key]);

	$$(_, 2.2, `Stage the changes`)
	FONTAIN.stage(_);
	return true;
};

///
/// \brief Data used by Charset patch
///
CustomFontCharset.Data = 
{
	ANSI:           0,
	BALTIC:       186,
	CHINESEBIG5:  136,
	DEFAULT:        1,
	EASTEUROPE:   238,
	GB2312:       134,
	GREEK:        161,
	HANGUL:       129,
	MAC:           77,
	OEM:          255,
	RUSSIAN:      204,
	SHIFTJIS:     128,
	SYMBOL:         2,
	TURKISH:      162,
	VIETNAMESE:   163,

	///Needs Korean language edition
	JOHAB:        130,

	///Needs Middle East language edition
	ARABIC:       178,
	HEBREW:       177,

	///Needs Thai language edition
	THAI:         222
};

///
/// \brief Cleanup the staging done by the patch
///
CustomFontCharset.cleanup = _ =>
{
	FONTAIN.setCharset();
	FONTAIN.unstage(_);
};
