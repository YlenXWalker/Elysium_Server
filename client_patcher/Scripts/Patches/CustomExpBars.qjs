/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2024-08-26                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Modify the code inside UIBasicInfoWnd::NewHeight to change the limits as per user specified input file.
///        The code being modified is responsibles for displaying the Base & Job experience bars
///
CustomBarLimits = function(_)
{
	$$(_, 1, `Load the SSN & extract the EBvals`)
	SSN.load();
	const {refAddr, baseBegin, afterBB} = SSN.EBvals;

	$$(_, 2.1, `Find the base level assignment/comparison after the CALLs`)
	let code =
		Exe.Version === 6   //VC6
	?
		MOV(EAX, [POS3WC])  //mov eax, dword ptr [g_baseLevel]
	+	MOV(EDI, 0x63)      //mov edi, 63h
	:
		Exe.BuildDate < 20130000
	?
		CMP([POS3WC], EDI)  //cmp dword ptr [g_baseLevel], edi
	:
		Exe.BuildDate < 20170000
	?
		CMP([POS3WC], 0xAF) //cmp dword ptr [g_baseLevel], 0AFh
	:
		CMP(R32, [POS4WC])  //cmp regA, dword ptr [g_baseLevel]
	;

	let addr = Exe.FindHex(code, afterBB, afterBB + 0x100);
	if (addr < 0)
		throw Error("Base level address missing");

	$$(_, 2.2, `Extract the address`)
	const BaseLevel = Instr.FromAddr(addr).Disp; //this is easier and will remain accurate even if some changes happen in later versions

	$$(_, 2.3, `Find the ESI + const assignment between afterBB & refAddr`)
	addr = Exe.FindHex( MOV(ECX, [ESI, POS1WC]), afterBB, refAddr); //mov ecx, dword ptr [esi + dispA]
	
	//VC14
	if (addr < 0 && Exe.Version > 11)
	{
		code = Exe.MinorVer < 20
		?	MOV(EDX, [ESI, POS1WC])  //mov edx, dword ptr [esi + dispA]
		:	MOV(ECX, [EDI, POS1WC])  //mov ecx, dword ptr [edi + dispA]
		;
		addr = Exe.FindHex(code, afterBB, refAddr); 
	}
	if (addr < 0)
		throw Error("First ESI ptr missing");

	$$(_, 2.4, `Extract the const (which is HideBase)`)
	const HideBase = Instr.FromAddr(addr).Disp;

	$$(_, 2.5, `Calculate remaining constants`)
	const HideJob  = HideBase + 4;
	const FuncOff  = (Exe.Version === 6 ? 0x18 : 0x10);  //value added to [ECX] to retrieve the function address
	const ShowBars = HideBase + FuncOff - 8;

	$$(_, 3.1, `Find the end of the base exp display code after the ESI movement`)
	code =
		PUSH(0x55)            //push 55h
	+	(Exe.Version === 6 || Exe.Version === 11
	?
		CALL([R32, FuncOff])  //call dword ptr [regC + FuncOff] ; VC6 & VC11
	:                         //   OR
		CALL(R32)             //call regC ; all others
	)
	+	MOV(ECX, SSN)         //mov ecx, <g_session>
	;
	let addr2 = Exe.FindHex( code, addr, refAddr + 0x60);
	if (addr2 < 0)
		throw Error("End of Base missing");

	$$(_, 3.2, `Save the location of MOV ECX`)
	const baseEnd = addr2 + code.byteCount() - 5;
	const jobBegin = baseEnd; //MOV ECX also marks the beginning of Job Exp Display code so yea they are same

	$$(_, 3.3, `Find the job level comparison with 10`)
	let delta;
	if (Exe.BuildDate > 20170000)
	{
		code = CMP([POS4WC], R32);  //cmp dword ptr [g_jobLevel], regA

		delta = 0;

		if (Exe.BuildDate > 20190403) //newer clients have it closer.
			addr = Exe.FindHex(code, jobBegin, jobBegin + 0x50);
		else
			addr = Exe.FindHex(code, jobBegin + 0x100, jobBegin + 0x180);
	}
	else
	{
		const prefix = (Exe.BuildDate < 20100620 || Exe.BuildDate === 20101214 ||  Exe.BuildDate > 20110620
		?
			JMP(WCp) //jmp short _next
		:            //  OR
			RETN(4)  //retn 4
		);
		const suffix = CMP([POS3WC], 0xA); //cmp dword ptr [g_jobLevel], 0Ah

		delta = prefix.byteCount();

		addr = Exe.FindHex(prefix + suffix, jobBegin, jobBegin + 0x120);
	}
	if (addr < 0)
		throw Error("Job level comparison missing");

	$$(_, 3.4, `Extract the Address`)
	const JobLevel = Instr.FromAddr(addr + delta).Disp;

	$$(_, 3.5, `Find the coordinate PUSHes for Job exp bar (job End is just after it)`)
	code =
		PUSH(0x58)           //push 58h
	+	PUSH(-0xC8)          //push -0C8h
	+	(Exe.Version === 9 || Exe.Version === 10
	?
		CALL(R32)			 //call regD ; for VC9, VC10
	:                        //   OR
		CALL([R32, FuncOff]) //call dword ptr [regD + FuncOff] ; for VC6, VC11, VC14.16
	)
	;

	addr2 = Exe.FindHex(code, addr + 7, addr + 0x60);
	if (addr2 < 0 && Exe.BuildDate > 20190000)
	{
		code =
			PUSH(0x55)	//push 55h
		+	CALL(R32)	//call regD
		;
		addr2 = Exe.FindHex(code, addr + 7, addr + 0x60);
	}
	if (addr2 < 0)
		throw Error("Job coord PUSHes missing");

	$$(_, 3.6, `Save location after the CALL as jobEnd`)
	const jobEnd = addr2 + code.byteCount();

	$$(_, 4.1, `Get the input file from user`)
	const inFile = Exe.GetUserInput('$expBarSpec', D_InFile, "Exp Bar Spec", "Enter the Exp Bar Mapping file", "Inputs/ExpSpec.yml", {filters: YMLFILTER});
	if (inFile === false)
		Cancel("No mapping file specified");

	$$(_, 4.2, `Load the input file which creates the hash table mapping the id ranges to max base & job levels`)
	const ExpSpec = Warp.LoadYaml(inFile);
	if (ExpSpec === false)
		return false;

	else if (!IsArr(ExpSpec))
		throw Error("Need a list of Exp Bar specifications")

	$$(_, 4.3, `Calculate size of mapping table`)
	const identSize = ExpSpec.reduce( (acc, hash) => acc + (IsArr(hash.IDs) ? 4 * hash.IDs.length + 2 : 0), 0);

	$$(_, 5.1, `Prepare code for base & job exp bars (will be replaced at baseBegin)`)
	const parts =
	[
		PUSH(EDX)                  //push edx
	+	PUSH(EBX)                  //push ebx
	+	MOV(ECX, SSN)              //mov ecx, <g_session>
	+	CALL(Filler(1))            //call CSession::GetJobID
	+	MOV(EBX, Filler(2))        //mov ebx, <mapTblAddr>

	,//1
		MOV(ECX, [EBX])            //mov ecx, dword ptr [ebx] ;	_mapTblLoop
	+	TEST(ECX, ECX)             //test ecx, ecx
	+	JE(Filler(10,1))           //je short _noMatches

	,//2
		MOVSX(EDX, [ECX])          //movsx edx, word ptr [ecx] ; _idTblLoop
	+	TEST(EDX, EDX)             //test edx, edx
	+	JS(Filler(11,1))           //js short _fetchNextIDTbl
	+	CMP(EAX, EDX)              //cmp eax, edx
	+	JL(Filler(12,1))           //jl short _fetchNextIDPair
	+	MOVSX(EDX, [ECX, 2])       //movsx edx, word ptr [ecx+2]
	+	TEST(EDX, EDX)             //test edx, edx
	+	JS(Filler(11,1))           //js short _fetchNextIDTbl
	+	CMP(EAX, EDX)              //cmp eax, edx
	+	JLE(Filler(14,1))          //jle short _foundIDMatch

	,//3
		ADD(ECX, 4)                //add ecx, 4 ; _fetchNextIDPair
	+	JMP(Filler(15,1))          //jmp short _idTblLoop

	,//4
		ADD(EBX, 8)                //add ebx, 8 ; _fetchNextIDTbl
	+	JMP(Filler(16,1))          //jmp short _mapTblLoop

	,//5
		LEA(EDI, [EBX, 4])         //lea edi, [ebx+4] ; _foundIDMatch
	+	JMP(5)                     //jmp short _skipEDI

	,//6
		MOV(EDI, Filler(3))        //mov edi, <defAddr> ; _noMatches
	+	POP(EBX)                   //pop ebx ; _skipEDI
	+	POP(EDX)                   //pop edx
	+	MOVZX(EAX, [EDI])          //movzx eax, word ptr [edi]
	+	CMP([BaseLevel], EAX)      //cmp dword ptr [g_baseLevel], eax
	+	MOV(ECX, [ESI, HideBase])  //mov ecx, dword ptr [esi + HideBase]
	+	JL(Filler(17,1))           //jl short _lowBase
	+	PUSH(0x4E)                 //push 4Eh
	+	PUSH(-0xC8)                //push -0C8h
	+	JMP(Filler(18,1))          //jmp short _common1

	,//7
		MOV(EAX, [ESI, ShowBars])  //mov eax, dword ptr [esi + ShowBars] ; _lowBase
	+	ADD(EAX, 0x4C)             //add eax, 4Ch
	+	PUSH_EAX                   //push eax
	+	PUSH(0x55)                 //push 55h

	,//8
		MOV(EAX, [ECX])            //mov eax, dword ptr [ecx] ; _common1
	+	CALL([EAX, FuncOff])       //call dword ptr [eax + funcOff]
	+	MOVZX(EAX, [EDI, 2])       //movzx eax, word ptr [edi+2]
	+	CMP([JobLevel], EAX)       //cmp dword ptr [g_jobLevel], eax
	+	MOV(ECX, [ESI, HideJob])   //mov ecx, dword ptr [esi + HideJob]
	+	JL(Filler(19,1))           //jl short _lowJob
	+	PUSH(0x58)                 //push 58h
	+	PUSH(-0xC8)                //push -0C8h
	+	JMP(Filler(20,1))          //jmp short _common2

	,//9
		MOV(EAX, [ESI, ShowBars])  //mov eax, dword ptr [esi + ShowBars] ; _lowJob
	+	ADD(EAX, 0x58)             //add eax, 58h
	+	PUSH_EAX                   //push eax
	+	PUSH(0x55)                 //push 55h

	,//10
		MOV(EAX, [ECX])            //mov eax, dword ptr [ecx] ; _common2
	+	CALL([EAX, FuncOff])       //call dword ptr [eax + FuncOff]
	+	JMP(Filler(4))             //jmp <jobEnd>
	+	" FF 00 FF 00"             //part of the id to level mapping ; defAddr
	];

	const baseVir = Exe.Phy2Vir(baseBegin, CODE);

	$$(_, 5.2, `Calculate the target addresses & the mapTblAddr value (we will be placing it right after the JMP since we have space for it)`)
	const [, _mapTblLoop, _idTblLoop, _fetchNextIDPair, _fetchNextIDTbl, _foundIDMatch, _noMatches, _lowBase, _common1, _lowJob, _common2, mapTblAddr] = MapAddrs(baseVir, parts);

	const defAddr = mapTblAddr - 4; //Address for the default value.

	$$(_, 5.3, `Fill in the blanks`)

	//First the Jumps & CALLs
	code = SetFillTargets( parts,
	{
		start  : baseVir,
		  1    : SSN.Funcs.GetJobID,
		  4    : Exe.Phy2Vir(jobEnd, CODE),
		'10,1' : _noMatches,
		'11,1' : _fetchNextIDTbl,
		'12,1' : _fetchNextIDPair,
		'14,1' : _foundIDMatch,
		'15,1' : _idTblLoop,
		'16,1' : _mapTblLoop,
		'17,1' : _lowBase,
		'18,1' : _common1,
		'19,1' : _lowJob,
		'20,1' : _common2,
	});

	//Secondly the assigned addresses
	code = SwapFillers( code, 1,
	{
		2 : mapTblAddr,
		3 : defAddr
	});

	$$(_, 5.4, `Allocate space to add the id values`)
	const [free, freeVir] = Exe.Allocate(identSize);

	$$(_, 5.5, `Concatenate all the ID values and prepare the mapping`)
	let mapData   = ""; //will contain address pointing to set of IDs and base (16bit) & job (16bit) max levels after the address
	let identData = ""; //will contain the set of IDs

	addr = 0;
	for (const hash of ExpSpec)
	{
		if (!IsArr(hash.IDs))
			continue;

		mapData += (freeVir + addr).toHex();

		for (const elem of hash.IDs)
		{
			if (IsArr(elem))
				identData += elem[0].toHex(2) + elem[1].toHex(2);
			else
				identData += elem.toHex(2).repeat(2);

			addr += 2;
		}

		identData += " FF FF";
		addr += 2;

		mapData += hash.BaseLvl.toHex(2) + hash.JobLvl.toHex(2);
	}

	mapData += ALL00;

	$$(_, 5.6, `Add the IDs at the allocated space`)
	Exe.SetHex(free, identData);

	$$(_, 5.7, `Put the function & the map at baseBegin`)
	Exe.SetHex(baseBegin, code + mapData);

	return true;
};

// TODO - Make coords configurable in future

///
/// \brief Inject code inside UIBasicInfoWnd::OnDraw function to make it also display the exp values
///        The exp values are displayed along with other info inside the "Basic Info" window when not minimized.
///
ShowExpNumbers = function(_)
{
	$$(_, 1.1, `Find the string 'Alt+V, Ctrl+V'`)
	let addr = Exe.FindText("Alt+V, Ctrl+V", false);
	if (addr < 0)
		throw Error("Reference string not found");

	$$(_, 1.2, `Find where it is PUSHed inside UIBasicInfoWnd::OnCreate function`)
	let code =
		PUSH(addr)     //push offset "Alt+V, Ctrl+V"
	+	MOV(ECX, R32)  //mov ecx, regA
	+	CALL(ALLWC)    //call func#1
	;
	addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Reference string not used");

	$$(_, 1.3, `Set addr to location after the code`)
	addr += code.byteCount();

	$$(_, 2.1, `Find the double PUSH pattern after the above PUSH (addresses of Total and Current Exp values are being sent as args to be filled)`)
	code =
		MOV(ECX, [R32, POS1WC])  //mov ecx, dword ptr [regB + dispB]
	+	PUSH(POS3WC)             //push <totExp>
	+	PUSH(POS3WC)             //push <curExp>
	+	CALL()                   //call LoaderFunc
	;
	let totOffset = 7; //6 from MOV and 1 for push opcode

	let pushAddr = Exe.FindHex(code, addr, addr + 0x300);
	if (pushAddr < 0)
	{
		code =
			MOV(ECX, [R32, POS1WC]) //mov ecx, dword ptr [regB + dispB]
		+	PUSH([POS4WC])          //push dword ptr [totExp]
		+	PUSH([POS4WC])          //push dword ptr [curExp.sign bit]
		+	PUSH([POS4WC])          //push dword ptr [curExp]
		+	CALL()                  //call LoaderFunc
		;

		totOffset = 8; //6 from MOV and 2 for push dword ptr opcode
		pushAddr = Exe.FindHex(code, addr, addr + 0x380);
	}
	if (pushAddr < 0)
		throw Error("Base Exp addresses not PUSHed");

	$$(_, 2.2, `Extract the Total Exp address`)
	const TotExpBase = Exe.GetInt32(pushAddr + totOffset);

	$$(_, 2.3, `Set pushAddr to location after the CALL`)
	pushAddr += code.byteCount() + 4;	

	$$(_, 2.4, `Extract the Current Exp address`)
	const CurExpBase = Exe.GetInt32(pushAddr - 9);

	$$(_, 2.5, `Find the double/triple PUSH pattern again after the first one (this time it is for Job Exp values)`)
	pushAddr = Exe.FindHex(code, pushAddr, pushAddr + 0x100);
	if (pushAddr < 0)
		throw Error("Job Exp addrs not PUSHed");

	$$(_, 2.6, `Extract the Total Exp & Current Exp addresses`)
	const TotExpJob = Exe.GetInt32(pushAddr + totOffset);
	const CurExpJob = Exe.GetInt32(pushAddr + code.byteCount() - 5);

	$$(_, 3.1, `Find the correct 'SP'`)
	code =
		PUSH(Filler(1)) //push offset "SP"
	+	PUSH(0x41)      //push 41h
	+	PUSH(0x11)      //push 11h
	;

	addr = Exe.FindTextN("SP").findAs( matchAddr =>
	{
		$$(_, 3.2, `Find where it is PUSHed inside OnDraw function (we need to inject after this location)`)
		const found = Exe.FindHex( SwapFillers(code, 1, {1: matchAddr}) );
		if (found > 0)
			return found;
	});
	if (!addr)
		throw Error("PUSH 'SP' missing");

	$$(_, 3.3, `Set addr to location after PUSH 11`)
	addr += code.byteCount();

	$$(_, 3.4, `Setup ECX movement based on the next instruction`)
	///       If the UIWindow::TextOutA function CALL comes immediately after the pattern, ECX should be loaded from ESI
	///       otherwise the next instruction is a MOV to ECX after which the CALL is expected
	let MovECX;
	if (Exe.GetUint8(addr) === 0xE8)
	{
		MovECX = MOV(ECX, ESI);
	}
	else
	{
		MovECX = Exe.GetHex(addr, 2);
		addr += 2;

		if (Exe.GetUint8(addr) !== 0xE8)
			throw Error("TextOutA CALL not found");
	}

	$$(_, 3.5, `Extract UIWindow::TextOutA and the location where the CALL is made (we will be hijacking the CALL)`)
	const UIW_TextOutA = Exe.GetTgtAddr(addr + 1);
	const injectAddr = addr;

	$$(_, 3.6, `Account for extra argument PUSHes (push 0) for more recent clients`)
	let extraPush = '';
	if (Exe.BuildDate > 20140116)
	{
		extraPush = PUSH_0;
		if (Exe.FindLastHex(PUSH_0.repeat(3), addr, addr - 0x20) > 0)
			extraPush += PUSH_0;
	}

	$$(_, 3.7, `Get the text color from the user`)
	const txtColor = Exe.GetUserInput('$expTxtColor', D_Color, "Exp Num Color", "Select the color for the numbers", 0xFF0000, Object.assign({saveDefault: true}, ROC.ClrSettings));

	$$(_, 4.1, `Get the essential addresses for our code`)

	// sprintf/wsprintfA
	ROC.findImports();

	// '%d / %d'
	const ddAddr = Exe.FindText("%d / %d", false);
	if (ddAddr < 0)
		throw Error("Format string for exp not found");

	$$(_, 4.2, `Construct the template code for displaying the exp numbers (common for both Base & Job Exp)`)
	let template =
		MOV(EAX, [Filler(1)]) //mov eax, dword ptr [totExp*]
	+	MOV(ECX, [Filler(2)]) //mov ecx, dword ptr [curExp*]
	+	OR(ECX, EAX)          //or ecx, eax
	+	JE(Filler(3,1))       //je short _skipOut ; location after TextOutA CALL
	+	PUSH_EAX              //push eax
	+	MOV(EAX, [Filler(2)]) //mov eax, dword ptr [curExp*]
	+	PUSH_EAX              //push eax
	+	PUSH(ddAddr)          //push offset "%d / %d"
	+	LEA(EAX, [ESP, 0xC])  //lea eax, [esp+0Ch]
	+	PUSH_EAX              //push eax
	+	CALL([ROC.SprintF])   //call dword ptr [<printFunc>] ; sprintf/wsprintfA
	+	ADD(ESP, 0x10)        //add esp, 10
	+	MOV(EAX, ESP)         //mov eax, esp
	+	extraPush             //push 0          ; Arg9 = unknown. Only for 2019+ clients
		                      //push 0          ; Arg8 = unknown. Only for new clients
	+	PUSH(txtColor)        //push <txtColor> ; Arg7 = Color. Blue by default
	+	PUSH(0xD)             //push 0D         ; Arg6 = Font Height
	+	PUSH_1                //push 1          ; Arg5 = Font Index
	+	PUSH_0                //push 0          ; Arg4 = Char count (0 => calculate string size)
	+	PUSH_EAX              //push eax        ; Arg3 = String i.e. output from sprintf above
	+	PUSH(Filler(4,1))     //push y          ; Arg2 = y Coord
	+	PUSH(0x56)            //push x          ; Arg1 = x Coord
	+	MovECX                //mov ecx, regA
	+	CALL(Filler(5))       //call UIWindow::TextOutA ; stdcall => No Stack restore required
	;                         //_skipOut

	template = SetFillTargets( template, 1, {'3,1': template.byteCount()} ); //putting the distance in JE SHORT (this is needed since byteCount can vary)

	$$(_, 4.3, `Construct the full code from the template`)
	code =
		CALL(Filler(5))         //call UIWindow::TextOutA
	+	PUSH_EAX                //push eax
	+	SUB(ESP, 0x20)          //sub esp, 20
	+	SwapFillers( template,
		{
			1: TotExpBase,      //for Base Exp
			2: CurExpBase
		})
	+	SwapFillers( template,
		{
			1: TotExpJob,       //for Job Exp
			2: CurExpJob
		})
	+	ADD(ESP, 0x20)          //add esp, 20h
	+	POP_EAX                 //pop eax
	+	JMP(Filler(6))          //jmp <retnAddr> ; i.e. (injectAddr + 5)
	;

	$$(_, 4.4, `Prepare the arguments for auto-hook`)
	const args =
	{
		targets : {
			5 : UIW_TextOutA,
			6 : Exe.Phy2Vir(injectAddr + 5, CODE),
		},
		values : {
			'4,1' : [0x4E, 0x68] // yCoords for Base & Job respectively
		}
	};

	$$(_, 4.5, `Add our code and jump to it from injectAddr`)
	AutoHook(injectAddr, code, args);

	return true;
};

///
/// \brief Wrappers for individual patch validation
///
CustomBarLimits.validate = IsPost2010;
ShowExpNumbers.validate  = IsPost2010;
