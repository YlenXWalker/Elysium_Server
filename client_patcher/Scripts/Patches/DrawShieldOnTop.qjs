/**************************************************************************\
*                                                                          *
*   Copyright (C) 2018-2024 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Andrei (4144)                                          *
*   Created Date  : 2021-06-15                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

// TODO - Need deeper analysis. Older clients and Latest clients (especially VC11) don't work this way

///
/// \brief Change the z offset for shields to draw them over other sprites
///        in CPc::RenderBodyLayer function
///
DrawShieldOnTop = function(_)
{
	$$(_, 1.1, `Find the locations where the Priority string is pushed`)
	const addrs = Exe.FindHexN(PUSH(this.NameAddr));
	if (addrs.isEmpty())
		throw Error("String references missing");

	$$(_, 1.2, `Find the RenderSprite2 call after one of these PUSHes (In the default case)`)
	let parts =
	[
		MOVSS([ESP, 4], XMM0)     // movss dword ptr [esp+4], xmm0
	+	MOVSS(XMM0, [EBP, Exe.Version === 11 ? WCn : NEG3WC]) // movss xmm0, dword ptr [LOCAL.x]
	+	MOVSS([ESP], XMM0)        // movss dword ptr [esp], xmm0
	+	PUSH(R32)                 // push esi/eax
	,
		(Exe.Version === 11
	?
		PUSH_EAX                  // push eax
	:                             //   OR
		PUSH([EBP, NEG3WC])       // push dword ptr [LOCAL.y]
	)
	+	LEA(EAX, [EBP, NEG3WC])   // lea eax, [ebp + <spr>]
	,
		PUSH_EAX                  // push eax
	+	CALL()                    // call CRenderObject::RenderSprite2
	];

	const findPat = memAddr =>
	{
		const found = Exe.FindHex(parts, memAddr + 0x80, memAddr + 0x180);
		if (found > 0)
			return [memAddr, found];
	};

	let result = addrs.findAs( findPat );
	if (!result && Exe.Version === 11)
	{
		parts[1] = PUSH([EBP, WCn]) + MOV(ECX, R32); //push dword ptr [LOCAL.z]
		                                             //mov ecx, regA
		result = addrs.findAs( findPat );
	}
	if (!result)
		throw Error("RenderSprite2 call missing");

	$$(_, 1.3, `Save the location of the call`)
	const [foundAddr, patAddr] = result;
	const hookAddr1 = patAddr + parts.byteCount() - 1;

	$$(_, 1.4, `Find the call to RenderSprite after it`)
	parts = [
		PUSH_EAX                 //push eax
	+	(Exe.Version > 11
	?
		PUSH([EBP, NEG3WC])      //push dword ptr [LOCAL.x]
	:
		''
	)
	+	LEA(EAX, [EBP, NEG3WC])  //lea eax, [LOCAL.y]
	,
		PUSH_EAX                 //push eax
	+	CALL()                   //call CRenderObject::RenderSprite
	];

	addr = Exe.FindHex(parts, hookAddr1 + 5, hookAddr1 + 0x100);
	if (addr < 0)
	{
		parts[0] =
			PUSH([EBP, WCn])    //push dword ptr [LOCAL.z]
		+	MOV(ECX, R32)       //mov ecx, regA
		;
		addr = Exe.FindHex(parts, hookAddr1 + 5, hookAddr1 + 0x100);
	}
	if (addr < 0)
		throw Error("RenderSprite call missing");

	$$(_, 1.5, `Save the location of the call`)
	const hookAddr2 = addr + parts.byteCount() - 1;

	$$(_, 1.6, `Look for the cnt usage towards the beginning of the function (starting point of the outer loop)`)
	parts =
	[
		Exe.Version === 11
	?
    	MOV(EDX, [EDI, WCp])    //mov edx, [edi+3Ch]
    +	MOV(EAX, ECX)           //mov eax, ecx
	+	SUB(EAX, [EDI, WCp])    //sub eax, [edi+34h]
	:
    	MOV(EAX, ECX)           //mov eax, ecx
	+	SUB(EAX, [EDI, WCp])    //sub eax, [edi+34h]
	+	MOV(EDX, [EDI, WCp])    //mov edx, [edi+3Ch]
	,
		ADD(EAX, -2)            //add eax, -2
    +	CMP(EAX, 3)             //cmp eax, 3
	];

	addr = Exe.FindHex(parts, foundAddr - 0x1000, foundAddr - 0x800);
	if (addr < 0)
		throw Error("post-cnt assignment missing");

	const code =
		MOV(R32, " 0? 00 00 00") //mov ebx/esi, 7/8
	+	MOV([EBP, ALLWC], R32)   //mov dword ptr [ebp + cnt], ebx/esi
	;

	addr = Exe.FindLastHex(code, addr, addr - 0x40);
	if (addr < 0)
		throw Error("cnt assignment missing");

	const cntLoc = Instr.FromAddr(addr + 5).Disp;

	$$(_, 2.1, `Add the value 0.001`)
	const [, floatAddr] = Exe.AddFloat(0.001);

	$$(_, 2.2, `Construct the new code to be added`)
	parts =
	[//0
        MOV(EAX, [EBP, cntLoc])  // mov eax, dword ptr [ebp + cnt]
	+	CMP(EAX, 0)              // cmp eax, 0
    +	JNZ(Filler(1,1))         // jnz short _skip
	+	POP_EAX                  // pop eax
	+	PUSH_EAX                 // push eax
	+	MOVSS(XMM0, [EAX, 0x10]) // movss xmm0, dword ptr [eax + oow]
	+	ADDSS(XMM0, [floatAddr]) // addss xmm0, dword ptr [floatAddr]
	+	MOVSS([EAX, 0x10], XMM0) // movss dword ptr [eax + oow], xmm0
	+	MOVSS(XMM0, [EAX, 0x14]) // movss xmm0, dword ptr [eax + oowUp]
	+	ADDSS(XMM0, [floatAddr]) // addss xmm0, dword ptr [floatAddr]
	+	MOVSS([EAX, 0x14], XMM0) // movss dword ptr [eax + oowUp], xmm0
	
	,//1
		PUSH(Filler(2))          // push retnAddr ; _skip
    +	MOV(EAX, Filler(3))      // mov eax, <CRenderObject::RenderSprite/RenderSprite2>
	+	JMP(EAX)                 // jmp eax
	];
	const [, _skip, allocSize] = MapAddrs(parts);

	const template = SetFillTargets( parts, 1, {'1,1' : _skip} );

	for (const hookAddr of [hookAddr1, hookAddr2] )
	{
		$$(_, 2.5, `Prepare the arguments for auto-hook at ${hookAddr}`)
		const args =
		{
			allocSize,
			values : {
				2 : Exe.Phy2Vir(hookAddr + 5, CODE),
				3 : Exe.GetTgtAddr(hookAddr + 1)
			}
		};

		$$(_, 2.6, `Add our code and jump to it from hookAddr`)
		AutoHook(hookAddr, template, args);
	}

	return true;
};

///
/// \brief Disable for unsupported clients.
///
DrawShieldOnTop.validate = function()
{
	if (Exe.BuildDate > 20190905 || (ROC.IsRenewal && Exe.BuildDate > 20190900))
		return false;

	this.NameAddr = Exe.FindText("GetLayerPriority");
	return (this.NameAddr > 0);
};
