/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2024 Shinryo                                           *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo                                                *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the failure return value in the function looking for '@' in Chat text to 1 (making a false positive)
///        For old clients, we need to hijack a CALL inside UIWindowMgr::ProcessPushButton
///
FixChatAt = function(_)
{
	if (Exe.Version === 6) //VC6
	{
		$$(_, 1.1, `Find the CALL inside UIWindowMgr::ProcessPushButton`)
		let code =
			MOV(ECX, ESI)            //mov ecx, esi
		+	CALL(POS2WC)             //call func#1  <- this is what we need to hijack
		+	TEST(AL, AL)             //test al, al
		+	JZ(WCp)                  //jz short _skip
		+	MOV(R32, [ESI, POS2WC])  //mov regA, dword ptr [ESI+const]
		;
		const addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("Function CALL not found");

		$$(_, 1.2, `Extract the called address (VIRTUAL)`)
		const func = Exe.GetTgtAddr(addr + 3);

		$$(_, 1.3, `Get essential addresses for our function`)
		const GetAKS = Exe.FindFunc("GetAsyncKeyState", "USER32.dll");
		if (GetAKS < 0)
			throw Error("GetAsyncKeyState not found");

		$$(_, 2.1, `Construct our new function`)
		const parts =
		[//0
			PUSHAD                             //pushad
		+	MOVZX(EAX, BYTE_PTR, [ECX, 0x2C])  //movzx eax, byte ptr [ecx+2Ch]
		+	TEST(EAX, EAX)                     //test eax, eax
		+	JE(Filler(2,1))                    //je short _exit
		+	MOV(ESI, [GetAKS])                 //mov esi, dword ptr [<&USER32.GetAsyncKeyState>]
		+	PUSH(0x12)                         //push 12h ;       VirtualKey = VK_ALT
		+	CALL(ESI)                          //call esi ;     [<&USER32.GetAsyncKeyState>]
		+	TEST(EAX, EAX)                     //test eax, eax
		+	JE(Filler(2,1))                    //je short _exit
		+	PUSH(0x11)                         //push 11h ;       VirtualKey = VK_CONTROL
		+	CALL(ESI)                          //call esi ;     [<&USER32.GetAsyncKeyState>]
		+	TEST(EAX, EAX)                     //test eax, eax
		+	JE(Filler(2,1))                    //je short _exit
		+	POPAD                              //popad
		+	XOR(EAX, EAX)                      //xor eax, eax
		+	RETN(4)                            //retn 4

		,//1
			POPAD                              //popad ; _exit
		+	JMP(Filler(1))                     //jmp func#1
		];
		const [, _exit, allocSize] = MapAddrs(parts);

		$$(_, 2.2, `Prepare the arguments for auto-hook`)
		const args =
		{
			allocSize,
			localTgts : {
				'2,1' : _exit
			},
			targets : {
				1 : func
			},
			isCall : true
		};

		$$(_, 2.3, `Add our code and call it after addr`)
		AutoHook(addr + 2, parts, args);
	}
	else
	{
		$$(_, 3.1, `Find the JZ after '@' check`)
		const code =
			JZ(4)                        //jz short _next
		+	MOV(BYTE_PTR, [R32, WC], 0)  //mov byte ptr [regA + dispA], 0 ; <- this is the return value we need to change
		+	POP(EDI)                     //pop edi ; _next
		+	POP(ESI)                     //pop esi
		;
		const addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("'@' check not found");

		/**==============================================
		Note: The above will be followed by MOV AL,1
				and POP EBP/EBX statements
		==============================================**/

		$$(_, 3.2, `Change 0 to 1 in MOV byte ptr`)
		Exe.SetUint8(addr + 5, 1);
	}

	return true;
};

///
/// \brief Disable for unsupported clients
///
FixChatAt.validate = IsPost2010;
