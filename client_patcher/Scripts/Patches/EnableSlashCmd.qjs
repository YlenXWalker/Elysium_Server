/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2024 Neo-Mind                                       *
*   Copyright (C) 2021-2024 Ai4rei/AN                                      *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind, Ai4rei/AN                                    *
*   Created Date  : 2020-11-10                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the conditional jump for Langtype comparison inside CGameMode::SendMsg function
///        for /w & /who command as well as inside CGameMode::Zc_User_Count
///
EnableWho = function(_)
{
	$$(_, 1.1, `Ensure the LANGTYPE is loaded`)
	LANGTYPE.load();

	$$(_, 1.2, `Find Langtype comparison`)
	let code =
		MOV(EAX, [LANGTYPE]) //mov eax, dword ptr [g_serviceType]
	+	CMP(EAX, 3)          //cmp eax, 3
	+	JE(POS2WC)           //je _next
	+	CMP(EAX, 8)          //cmp eax, 8
	+	JE(POS2WC)           //je _next
	+	CMP(EAX, 9)          //cmp eax, 9
	+	JE(POS2WC)           //je _next
	;

	let addr = Exe.FindHex(code + LEA()); //lea ecx, [esp + dispB]
	if (addr < 0)
		addr = Exe.FindHex(code + MOV(EAX)); //mov eax, immA

	if (addr < 0)
		throw Error("Langtype comparison not found");

	$$(_, 1.3, `NOP out all the comparisons from first JE (essentially creates a JMP in the exe)`)
	Exe.SetNOPs(addr + 5, code.byteCount() - 5);

	$$(_, 2.1, `Find the common pattern to identify Zc_User_Count function`)
	code =
		(Exe.Version < 11 ?
		PUSH_R               //push regA
	:
		ROC.FullVer == 14.29 ?
		MOV(R32, [R32, WCp]) //mov regA, dword ptr [regA + dispA]
	:
		PUSH([R32, WCp])     //push dword ptr [regA + dispA]
	)
	+	PUSH(0xB2)           //push 0B2h
	+	CALL(ALLWC)          //call MsgStr
	+	(ROC.FullVer == 14.29 ?
		PUSH_R               //push regA
	:
		ADD(ESP, 4)          //add eSp, 4
	);

	addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Zc_User_Count not found");

	$$(_, 2.2, `Find the Langtype comparison before the pattern`)
	code =
		JNE(WCp)            //jne short _skip#2
	+	(Exe.Version < 11
	?
		MOV(EAX, [POS3WC])  //mov eax, dword ptr [refAddr]
	+	PUSH_EAX            //push eax
	:
		PUSH([POS4WC])      //push dword ptr [refAddr]
	)
	+	CALL(ALLWC)         //call IsGravityAid
	+	ADD(ESP, 4)         //add esp, 4
	+	TEST(AL, AL)        //test al, al
	+	JNE(WCp)            //jne short _proceed
	;

	const cmpAddr = Exe.FindHex(code, addr - 0x60, addr);
	if (cmpAddr < 0)
		throw Error("2nd Langtype comparison not found");

	$$(_, 2.3, `Change the first JNE`)
	Exe.SetJMP(cmpAddr);

	if (Exe.Version >= 9) //VC9+ has additional steps
	{
		$$(_, 3.1, `Find the last Langtype comparison`)
		code =
			CMP(EAX, 0xF) //cmp eax, 0Fh
		+	JE(5)         //je short _proceed#2
		+	CMP(EAX, 4)   //cmp eax, 4
		+	JNE(WCp)      //jne short _skip#3
		;
		addr = Exe.FindHex(code);

		if (addr > 0)
		{
			$$(_, 3.2, `Retrieve the JNE SHORT target address`)
			let tgtAddr = Exe.GetTgtAddr(addr + code.byteCount() - 1, 1);

			$$(_, 3.3, `Create a JMP to it right after the CMP`)
			Exe.SetJMP(addr + 3, tgtAddr);
		}
	}

	return true;
};

///
/// \brief Change the conditional jump to JMP after Langtype comparison inside
///        CSession::SetTextType function when using '/showname'
///
EnableShowName = function(_)
{
	$$(_, 1, `Find the Langtype comparison (don't need the langtype value to look for the pattern)`)
	const code =
		TEST(EAX, EAX) //test eax, eax
	+	JZ(WCp)        //jz short _load -> loading setting for showname
	+	CMP(EAX, 6)    //cmp eax, 6
	+	JZ(WCp)        //jz short _load -> loading setting for showname
	+	CMP(EAX, 0xA)  //cmp eax, 0Ah
	;

	const addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Langtype comparison not found");

	$$(_, 2, `Change the conditional jump`)
	Exe.SetJMP(addr + 2);

	return true;
};

///
/// \brief Turns TT_UNKNOWN return value into TT_NORMAL inside CSession::GetNoParamTalkType and set chatStartOffset
///        to 0 in caller (CSession::GetTalkType) instead of -1 when the return value was indeed TT_NORMAL.
///
EnableUnknCmds = function(_)
{
	$$(_, 1.1, `Prep code to find the ending point of CSession::GetNoParamTalkType function. Also setup the register to be modified`)
	const cmn =
		(ROC.HasFP
	?
		FP_STOP           //mov esp, ebp
		                  //pop ebp
	:
		''
	)
	+	RETN(4)           //retn 4
	;

	let prefix = MOV(EAX, [R32, 4]); //mov eax, dword ptr [regA + 4]
	let suffix = MOV(EAX, 3);        //mov eax, 3
	let movPos, tgtReg;

	switch (Exe.Version)
	{
		case 6: //VC6
		{
			prefix +=
				POP(EDI)  //pop edi
			+	POP(ESI)  //pop esi
			+	POP(EBX)  //pop ebx
			+	cmn       //stack restore + retn
			;
			suffix =
				POP(EDI)  //pop edi
			+	POP(ESI)  //pop esi
			+	suffix    //mov eax, 3
			+	POP(EBX)  //pop ebx
			+	cmn       //stack restore + retn
			;
			movPos = 2;
			tgtReg = ESI;
			break;
		}
		case 9: //VC9
		{
			prefix +=
				POP(EDI)  //pop edi
			+	POP(ESI)  //pop esi
			+	POP(ECX)  //pop ecx
			+	cmn       //stack restore + retn
			;
			suffix =
				POP(EDI)  //pop edi
			+	suffix    //mov eax, 3
			+	POP(ESI)  //pop esi
			+	POP(ECX)  //pop ecx
			+	cmn       //stack restore + retn
			;
			movPos = 1;
			tgtReg = EBP;
			break;
		}
		case 10: //VC10 &
		case 11: //VC11
		{
			prefix +=
				cmn       //stack restore + retn
			;
			suffix +=
				cmn       //stack restore + retn
			;
			movPos = 0;
			tgtReg = EDI;
			break;
		}
		default: //VC14.16
		{
			prefix +=
				POP(EDI)  //pop edi
			+	POP(ESI)  //pop esi
			+	cmn       //stack restore + retn
			;
			suffix =
				POP(EDI)  //pop edi
			+	suffix    //mov eax, 3
			+	POP(ESI)  //pop esi
			+	cmn       //stack restore + retn
			;
			movPos = 1;
			tgtReg = EDI;
			break;
		}
	}

	let addr = Exe.FindHex(prefix + suffix);
	if (addr < 0)
		throw Error("Function end missing");

	$$(_, 1.2, `Modify the MOV statement to unset EAX & increment the target register`)
	Exe.SetHex(addr + prefix.byteCount() + movPos,
		XOR(EAX, EAX)  //xor eax, eax
	+	ADD(tgtReg, 1) //add regA, 1
	);

	$$(_, 1.3, `Find the beginning of the function`)
	prefix =
		(ROC.HasFP
	?
		FP_START       //push ebp
		               //mov ebp, esp
	:
		''
	)
	+	(Exe.Version < 9 || Exe.Version > 11
	?
		SUB(ESP, 8)    //sub esp, 8
	:
		PUSH(ECX)      //push ecx
	+	PUSH(ESI)      //push esi
	)
	;
	addr = Exe.FindLastHex(prefix, addr, addr - 0x100);
	if (addr < 0)
		throw Error("Function start missing");

	$$(_, 1.4, `Save it's VIRTUAL address`)
	const funcAddr = Exe.Phy2Vir(addr, CODE);

	$$(_, 2.1, `Find the location where the function is CALLed (the pattern would match multiple locations)`)
	if (Exe.Version === 6)
	{
		prefix =
			MOV(EAX, [EAX, 4])                            //mov eax, dword ptr [EAX + 4]
		+	TEST(EAX, EAX)                                //test eax, eax
		+	JNZ(5)                                        //jnz short _skip#1
		+	MOV(EAX, POS3WC)                              //mov eax, offset#1
		;
	}
	else
	{
		prefix =
			CMP([EAX, ' 1?'], 0x10)                       //cmp dword ptr [eax + dispA], 10h ; dispA is either 14 or 18
		+	JB(WCp)                                       //jb short _skip#2
		+	MOV(EAX, Exe.Version < 10 ? [EAX, 4] : [EAX]) //mov eax, dword ptr [memLoc] ; memLoc is either EAX + 4 (for older clients) or EAX
		;
	}
	suffix =
		MOV(ECX, [ROC.StkReg, WC])                        //mov ecx, dword ptr [LOCAL.x]
	+	PUSH_EAX                                          //push eax
	+	CALL();                                           //call CSession::GetNoParamTalkType

	const addrs = Exe.FindHexN(prefix + suffix);
	if (addrs.isEmpty())
		throw Error("Function CALL missing");

	const csize = prefix.byteCount() + suffix.byteCount();

	$$(_, 2.2, `Find the correct one by checking the function being called`)
	addr = addrs.find(memAddr => Exe.GetTgtAddr(memAddr + csize) === funcAddr);
	if (!addr)
		throw Error("Only False matches found");

	$$(_, 2.3, `Find the long JMP after the CALL (occurs twice for VC9). NOP away any OR regA, -1 instructions in between`)
	let hookAddrs = [];
	let ins = Instr.FromAddr(addr + csize + 4);
	let count = Exe.Version === 9 ? 2 : 1;
	for ( ; count > 0; )
	{
		if (ins.Codes[0] === 0xE9)
		{
			count--;
			hookAddrs.push(ins.Addr);
		}
		else if (ins.Codes[0] === 0x83 && ins.Immd === -1 )
		{
			let {Mode, RegO, RegM} = ins.MRM;
			if (Mode === 3 && RegO === 1 && RegM === tgtReg.Index) //OR tgtReg, -1
				Exe.SetNOPs(ins.Addr, 3);
		}

		ins.moveToNext(); //move to next instruction
	}

	$$(_, 2.4, `Extract the jump target`)
	let retnAddr = Exe.GetTgtAddr(hookAddrs[0] + 1);

	$$(_, 2.5, `Check if the instruction at the target is OR regA, -1`)
	ins = Instr.FromAddr(retnAddr, VIRTUAL);
	if (ins.Codes[0] === 0x83 && ins.Immd === -1)
	{
		let {Mode, RegO, RegM} = ins.MRM;
		if (Mode === 3 && RegO === 1 && RegM === tgtReg.Index) //Skip over if it is OR tgtReg, -1
			retnAddr += 3;
	}

	$$(_, 3.1, `Construct the code to setup TT_NORMAL & chatStartOffset`)
	const code =
		DEC(tgtReg)    //dec regA ; for TT_NORMAL reg value becomes 0
	+	JZ(Filler(1))  //jz <retnAddr>
	+	OR(tgtReg, -1) //or regA, FFFFFFFFh ; for all others reg value is -1
	+	JMP(Filler(1)) //jmp <retnAddr>
	;

	$$(_, 3.2, `Add our code and update the jump targets`)
	AutoHook(hookAddrs, code, { targets : { 1 : retnAddr } });

	return true;
};
