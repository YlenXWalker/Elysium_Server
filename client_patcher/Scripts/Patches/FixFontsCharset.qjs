/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2024 CH.C (jchcc)                                   *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : CH.C (jchcc)                                           *
*   Created Date  : 2021-06-14                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Use a custom table to apply the correct charset for Official Custom Fonts on all Langtypes
///
FixFontsCharset = function(_)
{
	$$(_, 1.1, `Find the g_fontCharSet assignment inside DrawDC::SetFont function`)
	let parts;

	switch (Exe.Version)
	{
		case 6:
		case 9:
			if (Exe.BuildDate < 20130000)
			{
				parts =
				[//0
					TEST(ESI, ESI)       //test esi, esi
				+	POP(ESI)             //pop esi
				+	JNZ(WCp)             //jnz short _skip
				+	CMP(EAX, 0x14)       //cmp eax, 14h
				+	JL(WCp)              //jl short _skip
				+	MOV([ECX, WCp], EAX) //mov dword ptr [ecx + DrawDC.m_fontType], eax
				+	MOV(EAX, [ROC.StkReg, ROC.HasFP ? 0xC : 0x8]) //mov eax, dword ptr [ARG.2] ;  ARG.2 = ebp+0Ch with fp OR esp+8 without fp
				+	MOV([ECX, WCp], EAX) //mov dword ptr [ecx + DrawDC.m_fontHeight], eax

				,//1
					MOV(EDX, [POS4WC])   //mov dword ptr edx, [g_fontCharSet]
				];
				break;
			}

		case 10:
			parts =
			[//0
				TEST(EDI, EDI)       //test edi, edi
			+	POP(EDI)             //pop edi
			+	POP(ESI)             //pop esi
			+	JNZ(POS1WC)          //jnz _skip
			+	CMP(EAX, 0x14)       //cmp eax, 14h
			+	JL(POS1WC)           //jl _skip
			+	MOV([ECX, WCp], EDX) //mov dword ptr [ecx + DrawDC.m_fontHeight], edx
			+	MOV(DL, [ROC.StkReg, ROC.HasFP ? 0x10 : 0xC]) //mov dl, byte ptr [ARG.3] ; where ARG.3 = ebp+0x10 with fp and esp+0xC without fp
			+	MOV([ECX, WCp], EAX) //mov dword ptr [ecx + DrawDC.m_fontType], eax

			,//1
				MOV(EAX, [POS4WC])   //mov dword ptr edx, [g_fontCharSet]
			];
			break;

		case 11:
			parts =
			[//0
				TEST(EDI, EDI)       //test edi, edi
			+	JNZ(POS1WC)          //jnz _skip
			+	CMP(EDX, 0x14)       //cmp edx, 14h
			+	JL(POS1WC)           //jl _skip
			+	MOV([ESI, WCp], EDX) //mov dword ptr [esi + DrawDC.m_fontType], edx
			+	MOV([ESI, WCp], ECX) //mov dword ptr [esi + DrawDC.m_fontHeight], ecx

			,//1
				MOV(EAX, [POS4WC])   //mov dword ptr eax, [g_fontCharSet]
			];
			break;

		default: //VC14.16
			parts =
			[//0
				MOV([ESI, WCp], EDX) //mov dword ptr [esi + DrawDC.m_fontType], edx
			+	MOV([ESI, WCp], ECX) //mov dword ptr [esi + DrawDC.m_fontHeight], ecx
			+	TEST(EDI, EDI)       //test edi, edi
			+	JNZ(0xA)             //jnz short _skip

			,//1
				MOV(EAX, [POS4WC])   //mov dword ptr eax, [g_fontCharSet]
			+	CMP(EDX, 0x14)       //cmp edx, 14h
			+	JGE(7)               //jge short _next
			];
			break;
	}

	let addr = Exe.FindHex(parts);
	if (addr < 0)
		throw Error("Function not found");

	$$(_, 1.2, `Extract the g_fontCharSet assignment instruction`)
	let movIns = Instr.FromAddr(addr + parts.byteCount(0));

	$$(_, 1.3, `Find the table value retrieval using g_fontCharSet`)
	addr = Exe.FindHex(MOV(EAX, [4, R32, movIns.Disp])); //mov eax, dword ptr [regA*4 + g_fontCharSet]
	if (addr < 0)
		throw Error("Table value retrieval missing");

	$$(_, 1.4, `Extract the instruction`)
	movIns = Instr.FromAddr(addr);

	$$(_, 2.1, `Load the LANGTYPE object`)
	LANGTYPE.load();

	$$(_, 2.2, `Add the charsets`)
	const [, csTbl] = Exe.AddHex(" 81 00 80 86 88 DE 00 00 00 00 00 00 00 00 CC A3 00 00 00 B2 00");

	$$(_, 2.3, `Construct our code in parts`)
	parts =
	[
		CMP(movIns.SIB.getReg('I'), 0x14)   //cmp dword ptr regA, 14h
	+	JGE(Filler(1,1))                    //jge short _next
	+	movIns                              //mov eax, dword ptr [regA*4 + g_fontCharSet]
	+	JMP(Filler(2))                      //jmp <retnAddr>
	,
		MOV(EDI, [LANGTYPE])                //mov edi, dword ptr [g_serviceType] ; _next
	+	MOVZX(EAX, BYTE_PTR, [EDI, csTbl])  //movzx eax, byte ptr [edi + csTbk]
	+	JMP(Filler(2))                      //jmp <retnAddr>
	];
	const [, _next, allocSize] = MapAddrs(parts);

	$$(_, 2.4, `Prepare the arguments for auto-hook`)
	const args =
	{
		localTgts : { '1,1' : _next },
		targets : { 2 : Exe.Phy2Vir(movIns.NextAddr, CODE) },
		nops : movIns.Size - 5 //for clean replacement
	};

	$$(_, 2.5, `Add our code and jump to it from movIns.Addr`)
	AutoHook(movIns.Addr, parts, args);

	return true;
};
