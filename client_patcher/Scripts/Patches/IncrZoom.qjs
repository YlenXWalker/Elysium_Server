/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Shinryo                                           *
*   Copyright (C) 2020-2024 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo, Andrei (4144)                                 *
*   Created Date  : 2020-11-06                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Modify the Max Height from Ground (FAR_DIST) to accomodate for larger zoom
///
IncrZoom = function(_)
{
	$$(_, 1.1, `Find the FAR_DIST location`)
	const code =
		(230.0).toIEEE()    //dd float 230.000 (0x43660000) <- NEAR_DIST
	+   (400.0).toIEEE()    //dd float 400.000 (0x43C80000) <- FAR_DIST
	+   (300.0).toIEEE()    //dd float 300.000 (0x43960000) <- FAR_DIST for Indoors
	;

	let addr = Exe.FindHex(code, Exe.GetSectBegin(DATA), Exe.FileSize);//It may or may not be limited to end of data section
	if (addr < 0)
		throw Error("FAR_DIST storage not found");

	$$(_, 1.2, `Retrieve the new distance for the patch`)
	const newDist = this.Data.get(_);

	$$(_, 1.3, `Change to the value specified`)
	Exe.SetFloat(addr + 4, newDist);

	$$(_, 2.1, `Find the string '/zoom'`)
	if (Exe.FindText("/zoom", CASE_INSENSITIVE, PHYSICAL) > 0)
	{
		// If present, then we need some additional patching done - 4144

		$$(_, 2.2, `Retrieve the VIRTUAL address where we patched`)
		const distAddr = Exe.Phy2Vir(addr + 4);

		$$(_, 2.3, `Search for an assignment to this address - enabled /zoom (we are looking for 2 matches, 1 from UIGraphicSettingWnd_virt136 & 1 from CGameMode_func`)
		const mov1 = MOV([distAddr], (480.0).toIEEE()); //mov dword ptr [distAddr], 43F00000h ; 480.0
		let addrs = Exe.FindHexN(2, 3, mov1);
		if (addrs.isEmpty())
			throw Error("Expected 2 or 3 matches for 1st /zoom assignment");

		$$(_, 2.4, `Change the assigned value to our new distance value`)
		const updater = addr => Exe.SetFloat(addr + 6, newDist);
		addrs.forEach( updater );

		$$(_, 2.5, `Search for similar assignment to this address - disabled /zoom (it will be in the same functions as before)`)
		const mov2 = MOV([distAddr], (400.0).toIEEE()); //mov dword ptr [distAddr], 43C80000h ; 400.0

		addrs = Exe.FindHexN(2, 3, mov2);
		if (addrs.isEmpty())
			throw Error("Expected 2 or 3 matches for 2nd /zoom assignment");

		$$(_, 2.6, `Repeat 2.4 for this set of addresses`)
		addrs.forEach( updater );

		$$(_, 3.1, `Find the '/zoom' enabled/disabled load configuration (in CSession_lua_configuration)`)
		const parts = [
			MOVSS(XMM1, [POS4WC])  //movss xmm1, dword ptr [zoom_max_load_enabled]

		,//1
			Exe.Version > 11
		?
			mov1                   //mov dword ptr [distAddr], 0x43F00000 ; 480.0
		+	JMP(0x12)              //jmp short _next
		:
			JMP(8)                 //jmp short _next

		,//2
			MOVSS(XMM1, [POS4WC])  //movss xmm1, dword ptr [zoom_max_load_disabled]

		,//3
			(Exe.Version > 11
		?
			mov2                   //mov dword ptr [distAddr], 43C80000h ; 400.0
		:
			''
		)
		+	MOVSS(XMM0, [POS4WC])  //movss xmm0, dword ptr [some_addr] ; _next
		+	MOVSS(XMM2, [POS4WC])  //movss xmm2, dword ptr [g_outdoorViewLatitude]
		+	COMISS(XMM0, XMM2)	   //comiss xmm0, xmm2

		,//4
			Exe.Version <= 11
		?
			MOVSS([POS4WC], XMM1)  //movss dword ptr [zoom2_max_outdoor], xmm1
		:
			''
		];

		addr = Exe.FindHex(parts);
		if (addr < 0)
			throw Error("/zoom configuration missing");

		$$(_, 3.2, `Insert the new distance`)
		const [, newDistAddr] = Exe.AddFloat(newDist);
		
		$$(_, 3.3, `Change the 2 locations used with the new distance address`)
		addr += parts.byteCount(0) - 4;
		Exe.SetInt32(addr, newDistAddr);
		
		addr += parts.byteCount(1, 2);
		Exe.SetInt32(addr, newDistAddr);
	}

	return true;
};

///
/// \brief Wrappers for individual patches
///
Zoom25Percent = IncrZoom;
Zoom50Percent = IncrZoom;
Zoom75Percent = IncrZoom;
ZoomMax       = IncrZoom;

///
/// \brief Data to be used for the patches
///
IncrZoom.Data = MakeMap(
	'Zoom25Percent' ,  256.0,
	'Zoom50Percent' ,  510.0,
	'Zoom75Percent' ,  816.0,
	'ZoomMax'       , 1224.0,
);
