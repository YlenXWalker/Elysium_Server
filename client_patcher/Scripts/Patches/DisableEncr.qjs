/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2023 Ai4rei/AN                                         *
*   Copyright (C) 2013-2023 Neo-Mind                                       *
*   Copyright (C) 2017-2023 Andrei Karas (4144)                            *
*   Copyright (C) 2017-2023 Jchcc                                          *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Neo-Mind, Andrei (4144), Jchcc              *
*   Created Date  : 2020-11-10                                             *
*   Last Modified : 2023-08-26                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Make the code inside CLoginMode::OnChangepktON which sends 0x2B0,
///        use the original password (available as argument 1) instead of encrypted one
///
NoLoginEncr = function(_)
{
	$$(_, 1.1, `Find Encryptor function CALL`)
	let code =
		PUSH_R        //push regA
	+	CALL(NEG3WC)  //call Encryptor
	+	MOV(ECX, 6)   //mov ecx, 6
	+	LEA() 		  //lea regB, [LOCAL.x]
	;
	let addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Encryptor CALL not found");

	$$(_, 1.2, `Extract the register PUSHed before the CALL (i.e. Arg.1). It has the unencrypted password`)
	const regA = R32.List[Exe.GetUint8(addr) - 0x50];

	$$(_, 1.3, `Set addr to location of LEA`)
	addr += code.byteCount() - 1;

	$$(_, 2, `Change source argument in LEA from EBP-x to extracted register `)
	const ins = Instr.FromAddr(addr);
	const regB = ins.MRM.getReg('O');

	code =
		LEA(regB, [regA])         //lea regB, [regA]
	+   NOP.repeat(ins.Size - 2)  //NOP fill rest of the space
	;

	Exe.SetHex(addr, code);
	return true;
};

///
/// \brief Disable for unsupported clients
///
NoLoginEncr.validate  = () =>
	Exe.BuildDate > 20080600 && Exe.BuildDate < 20100803;

///
/// \brief Find call to the encryption function and substitute it with XOR EAX, EAX
///
NoPacketEncr = function(_)
{
	$$(_, 1.1, `Ensure all the Packet Key patches are deselected (unless in test mode)`)
	if (!Warp.TestMode)
	{
		for (const name of CustomEncKeys.Members)
			Warp.SetPatchState(name, false);
	}

	$$(_, 1.2, `Ensure the PACKET object has been loaded with valid data`)
	PACKET.load();

	// Now we diverge a little based on how the keys are assigned.
	if (PACKET.KS_Type === PACKET.Pusher)
	{
		$$(_, 2.1, `Find the Packet Encryption CALL (may or may not be PACKET.KeySetter)`)
		const code =
			PACKET.MovECX    //mov ecx, dword ptr [KeyAddr]
		+	CALL()			 //call CRagConnection::Encryptor
		;

		const addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("Encryption CALL not found");

		$$(_, 2.2, `Change the MOV & CALL to EAX = 0 followed by NOPs (internally could be JMP to skip over code)`)
		Exe.SetHex(addr, XOR(EAX, EAX));
		Exe.SetNOPs(addr + 2, code.byteCount() + 2);
	}
	else
	{
		$$(_, 3.1, `Retrieve the PHYSICAL address of the KeySetter (which serves as the obfuscator/encryptor as well)`)
		const addr = Exe.Vir2Phy(PACKET.KeySetter, CODE);

		$$(_, 3.2, `Change it to EAX = 0 and RETN 4. It will affect all the CALLs but it shouldnt matter`)
		Exe.SetHex(addr, XOR(EAX, EAX) + RETN(4));
	}

	return true;
};

///
/// \brief Disable for unsupported clients
///
NoPacketEncr.validate = HasPktKeys;

///
/// \brief Disable usage of Packet obfuscation for Login & Char packets in latest clients
///
NoEncrForLC = function(_)
{
	$$(_, 1, `Find the Obfuscation Call`)
	let parts =
	[
		MOV([POS4WC], EAX)    //mov dword ptr [addr#1], eax
	,
		CALL(ALLWC)           //call ObfuscateOrInit
	+	MOV(R32, [EBP, 0xC])  //mov regA, dword ptr [ARG.2]
	];

	let addr = Exe.FindHex(parts);
	if (addr < 0)
	{
		parts[0] = PUSH_0;   //push 0
		addr = Exe.FindHex(parts);
	}
	if (addr < 0)
		throw Error("Function call missing");

	addr += parts.byteCount(0);

	$$(_, 2.1, `Add the id table`)
	const tbl = [
		0x64, 0x277, 0x2b0, 0x27c, 0x825,
		0x1db, 0xacf, 0x200, 0x204,

		0x827, 0x829, 0x82b, 0x65, 0x66,
		0x68, 0x1fb, 0xa39, 0x187, 0x28d,
		0x28f, 0x8fc, 0x7e5, 0x7e7, 0x8b8,
		0x8c5, 0x8be, 0x8ba, 0x8d4, 0x9a1
	];
	const [, tblBegin, tblSize] = Exe.AddHex(tbl.map(v => v.toHex(2)));
	const tblEnd = tblBegin + tblSize;

	$$(_, 2.2, `Construct the new function`)
	parts =
	[//0
		MOV(EAX, [EBP, 0xC]) //mov eax, dword ptr [ARG.2]
	+	MOV(AX, [EAX])       //mov ax, word ptr [eax]
	+	PUSH(ECX)            //push ecx
	+	PUSH(EDI)            //push edi
	+	MOV(ECX, tblBegin)   //mov ecx, <tblBegin>
	+	MOV(EDI, tblEnd)     //mov edi, <tblEnd>

	,//1
		CMP(AX, [ECX])       //cmp ax, word ptr [ecx] ; _loop
	+	JE(Filler(3,1))      //je short _skip
	+	ADD(ECX, 2)          //add ecx, 2
	+	CMP(ECX, EDI)        //cmp ecx, edi
	+	JL(Filler(4,1))      //jl short _loop
	+	POP(EDI)             //pop edi
	+	POP(ECX)             //pop ecx
	+	JMP(Filler(5))       //jmp <ObfuscateOrInit>

	,//2
		POP(EDI)             //pop edi ; _skip
	+	POP(ECX)             //pop ecx
	+	XOR(EAX, EAX)        //xor eax, eax
	+	RETN(4)              //retn 4
	];

	$$(_, 2.3, `Prepare the arguments for auto-hook`)
	const [, _loop, _skip, allocSize] = MapAddrs(parts);
	const args =
	{
		allocSize,
		localTgts : {
			'3,1' : _skip,
			'4,1' : _loop,
		},
		targets : {
			5 : Exe.GetTgtAddr(addr + 1)
		},
		isCall : true
	};

	$$(_, 2.4, `Add our code and call it from addr`)
	AutoHook(addr, parts, args);

	return true;
};

///
/// \brief Disable for older clients which didnt have the issue (will be uncommented in future)
///
NoEncrForLC.validate = () =>
	Exe.BuildDate > 20180309;

///
/// \brief Enforce the jumps after comparisons with Langtypes 7 and 4.
///
NoPassEncr = function(_)
{
	$$(_, 1.1, `Ensure the LANGTYPE is loaded`)
	LANGTYPE.load();

	$$(_, 1.2, `Find the langtype comparison for sending login packet inside CLoginMode::ChangeState`)
	let code =
		CMP(BYTE_PTR, [POS4WC], 0) //cmp byte ptr [g_passwordencrypt], 0
	+	JNE(POS2WC)                //jne _skip
	+	MOV(R32, [LANGTYPE])       //mov regA, dword ptr [g_serviceType]
	+	TEST(R32, R32)             //test regA, regA
	+	JZ(POS2WC)                 //jz _sendSSO -> Send SSO Packet (ID = 0x825. was 0x2B0 in Old clients)
	+	CMP(R32, 0x12)             //cmp regA, 12h
	+	JZ(POS2WC)                 //jz _sendSSO
	;

	let addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Langtype comparison missing");

	$$(_, 1.3, `Move address to after the code`)
	addr += code.byteCount();

	$$(_, 2.1, `Find the langtype comparison with 7`)
	code =
		CMP(R32, 7)  //cmp regA, 7
	+	JNE(WCp)     //jne short _to_nextcmp
	;
	addr = Exe.FindHex(code, addr, addr + 0x50);
	if (addr < 0)
		throw Error("Comparison with 7 missing");

	$$(_, 2.2, `Enforce the conditional jump`)
	Exe.SetJMP(addr + 3);

	$$(_, 2.3, `Find the langtype comparison with 4 after it`)
	code =
		CMP(R32, 4)  //cmp regA, 7
	+	JNE(WCp)     //jne short _skip#2
	;
	addr = Exe.FindHex(code, addr + 4, addr + 0x50);
	if (addr < 0)
		throw Error("Comparison with 4 missing");

	$$(_, 2.4, `Enforce the conditional jump`)
	Exe.SetJMP(addr + 3);

	return true;
};

///
/// \brief Disable for older clients which didnt have the issue
///
NoPassEncr.validate = () =>
	!ROC.HasLWhidden && Exe.BuildDate > 20170000;
