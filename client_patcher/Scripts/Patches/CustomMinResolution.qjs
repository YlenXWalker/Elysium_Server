/**************************************************************************\
*                                                                          *
*   Copyright (C) 2019-2024 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Andrei (4144)                                          *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2024-08-08                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the limit values used for comparing resolution.
///
CustomMinResolution = function(_)
{
	$$(_, 1.1, `Find where 'OLD_HEIGHT' is PUSHed`)
	let code =
		PUSH_0              //push 0
	+	PUSH(this.StrAddr)  //push offset "OLD_HEIGHT"
	+	MOV(ECX, R32)       //mov ecx, regA
	+	MOV([POS4WC], EAX)  //mov dword ptr [screen_old_width], eax
	;
	let addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("'OLD_HEIGHT' reference missing");

	$$(_, 1.2, `Save the location after as reference`)
	const refAddr = addr + code.byteCount();

	$$(_, 1.3, `Set the previous value`)
	const oldMinW = 1024;
	const oldMinH = 768;

	$$(_, 2.1, `Get the new values from user`)
	const result = Exe.GetUserInput('$newScreenSize', D_VecU32, "Screen Resolution", "Enter the new minimum resolution", [oldMinW, oldMinH], {
		max: 10000,
		name0: "Minimum Width",
		name1: "Minimum Height",
	});
	if (result === false)
		Cancel("Min Resolution", "1024x768");

	const [newMinW, newMinH] = result;

	if (newMinW !== oldMinW)
	{
		$$(_, 2.2, `Look for comparison against width. Only certain clients have it`)
		code =
			CMP(R32, oldMinW)  //cmp regB, 400h ; usually ECX
		+	JB(0xC)            //jb short _next#1
		;
		addr = Exe.FindHex(code, refAddr, refAddr + 0x80);

		$$(_, 2.3, `Replace with new width value`)
		if (addr > 0)
			Exe.SetUint32(addr + 2, newMinW);
	}

	if (newMinH !== oldMinH)
	{
		$$(_, 2.4, `Look for comparison against height. Only certain clients have it`)
		code =
			CMP(EAX, POS2WC)   //cmp eax, 300h ; or some lower value
		+	JNB(WCp)           //jnb short _next#2
		;
		addr = Exe.FindHex(code, refAddr, refAddr + 0x80);

		$$(_, 2.5, `Replace with new height value`)
		if (addr > 0)
		{
			const diff = Exe.GetUint32(addr + 1) - oldMinH;
			Exe.SetUint32(addr + 1, newMinH + diff);
		}
	}

	$$(_, 2.6, `Look for assignments of width and height`)
	code =
		MOV(ECX, oldMinW)      //MOV ECX, 400
	+	MOV(EAX, oldMinH)      //MOV EAX, 300
	;
	addr = Exe.FindHex(code, refAddr, refAddr + 0x80);
	if (addr < 0)
		throw Error("Limit assignments missing");

	$$(_, 2.7, `Replace both`)
	if (newMinW !== oldMinW)
		Exe.SetUint32(addr + 1, newMinW);

	if (newMinH !== oldMinH)
		Exe.SetUint32(addr + 6, newMinH);

	return true;
};

///
/// \brief Disable for old unsupported clients
///
CustomMinResolution.validate = function()
{
	this.StrAddr = Exe.FindText("OLD_HEIGHT");
	return (this.StrAddr > 0);
};
