/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2023 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2021-01-15                                             *
*   Last Modified : 2023-08-26                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief: Change the Hardcoded loading & retrieval of Shield prefix to Lua based code
///
CustomShields = function(_)
{
	//===========================================================//
	// Find first inject & return locations - table loading area //
	//===========================================================//

	$$(_, 1.1, `Find address of _가드 (Guard's suffix)`)
	let sufAddr = Exe.FindText("_\xB0\xA1\xB5\xE5"); //"_°¡µå"
	if (sufAddr < 0)
		throw Error("Guard suffix not found");

	$$(_, 1.2, `Find where it gets loaded to the table (Inject location)`)
	let code, argSetup;
	if (Exe.Version === 6) //VC6
	{
		code =
			PUSH(3)              //push 3
		+	MOV(ECX, R32)        //mov ecx, regA
		+	MOV([EAX], sufAddr)  //mov dword ptr [eax], offset "_°¡µå"
		;

		argSetup =
			SUB(EAX, 4)          //sub eax, 4
		+	PUSH_EAX             //push eax
		;
	}
	else //VC9+
	{
		code =
			MOV([R32, 4], sufAddr); //mov dword ptr [regA + 4], offset "_°¡µå"
	}

	const hookReq = Exe.FindHex(code);
	if (hookReq < 0)
		throw Error("Guard suffix not used");

	$$(_, 1.3, `Save the instruction & extract the register that points to the location to store the suffix & push it (for VC9+)`)
	let hookIns;
	if (Exe.Version >= 9)
	{
		hookIns = Instr.FromAddr(hookReq);
		argSetup = PUSH(hookIns.MRM.getReg('M')); //push regA
	}

	$$(_, 1.4, `Find the address of _버클러 (Buckler's suffix)`)
	sufAddr = Exe.FindText("_\xB9\xF6\xC5\xAC\xB7\xAF"); //"_¹öÅ¬·¯"
	if (sufAddr < 0)
		throw Error("Buckler suffix not found");

	$$(_, 1.5, `Find where it gets loaded to the table (Return location)`)
	code = MOV(Exe.Version === 6 ? [EAX] : [R32, 8], sufAddr); //mov dword ptr [eax], offset "_¹öÅ¬·¯"
	                                                           //   OR
	                                                           //mov dword ptr [regA + 8], offset "_¹öÅ¬·¯"

	let addr = Exe.FindHex(code, hookReq, hookReq + 0x38);
	if (addr < 0)
		throw Error("Buckler suffix not used");

	$$(_, 1.6, `Return address is after code`)
	const retPhy = addr + code.byteCount();
	const retReq = Exe.Phy2Vir(retPhy, CODE);

	$$(_, 1.7, `Extract the extra instruction in between table assignments`)
	const extraIns = Exe.Version >= 9
		? FetchTillEnd(hookIns.NextAddr, 1, hookIns.getNext(), null, -1, ins => ins.Addr === retPhy)[1]
		: ''
		;

	$$(_, 1.8, `Obtain the new Max Shield count from the user`)
	const MaxShield = Exe.GetUserInput('$maxShield', D_Int8, "Shield Limit", "Enter the maximum number of shield types required", 10, {min: 6, saveDefault: true});
	if (MaxShield === false)
		Cancel("Limit reverted to default");

	$$(_, 2.1, `Ensure LUA object is loaded`)
	LUA.load();

	$$(_, 2.2, `Construct the code to be added`)
	const [prep, main, restore] = LUA.createCaller("ReqShieldName", "d>s", EDI, EAX);

	let parts =
	[//0
		PUSHAD                         //pushad
	+	MOV(EBX, MaxShield)            //mov ebx, <MaxShield>
	+	MOV(EDI, 1)                    //mov edi, 1
	+	prep                           //Stack Prep

	,//1
		main                           //LUA Function call code ; _loop
	+	MOV(CL, [EAX])                 //mov cl, byte ptr [eax]
	+	TEST(CL, CL)                   //test cl, cl
	+	JE(7)                          //je short _idxInc
	+	MOV(ECX, [ESP, 0x24])          //mov ecx, dword ptr [esp+24h] ; 20 = 8 registers * 4 due to PUSHAD + 4 for the starting memory address which was PUSHed before the PUSHAD
	+	MOV([4, EDI, ECX], EAX)        //mov dword ptr [edi*4 + ecx], eax
	+	INC(EDI)                       //inc edi ; _idxInc
	+	CMP(EDI, EBX)                  //cmp edi, ebx

	,//2
		JLE(Filler(1,1))               //jle short _loop ; to start of the calling code
	+	restore                        //Stack Restore
	+	POPAD                          //popad
	+	ADD(ESP, 4)                    //add esp, 4
	+	extraIns                       //<extra instructions>
	+	JMP(Filler(2))                 //jmp <retReq>
	];

	$$(_, 2.2, `Prepare the arguments for auto-hook`)
	let args =
	{
		localTgts : {
			'1,1' : parts.byteCount(0), // _loop
		},
		postProc : LUA.finalize,
		procArgs : {
			2 : retReq
		}
	};

	$$(_, 2.3, `Put the argument setup`)
	Exe.SetHex(hookReq, argSetup);

	$$(_, 2.4, `Add our code and jump to it after hookReq`)
	AutoHook(hookReq + argSetup.byteCount(), parts, args);

	//=========================//
	// Inject Lua file loading //
	//=========================//
	LUA.addLoaders(
		[
			"Lua Files\\DataInfo\\ShieldTable",
			"Lua Files\\DataInfo\\ShieldTable_F"
		],
		"Lua Files\\DataInfo\\jobName"
	);

	//========================================================//
	// Find second inject location - CSession::GetShieldType. //
	//========================================================//

	$$(_, 3.1, `Load the SSN`)
	SSN.load();

	let refAddr;
	if (Exe.BuildDate < 20170700)
	{
		$$(_, 3.2, `Find location where the GetShieldType is called - there are multiple matches but all of them are same`)
		code =
			CMP(EAX, 0x7D0) //cmp eax, 7D0h
		+	JLE(WCp)        //jle short addr1
		+	PUSH(EAX)       //push eax
		+	MOV(ECX, SSN)   //mov ecx, <g_session> ; Note: this is the reference value for all the tables
		+	CALL()          //call CSession::GetShieldType
		;

		const addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("GetShieldType call missing");

		$$(_, 3.3, `Save the address of the CALL`)
		refAddr = addr + code.byteCount() - 1;
	}
	else
	{
		$$(_, 3.4, `Find location where the GetShieldType is called (Only 1 match now)`)
		code =
			MOV(BYTE_PTR, [EBP, WCn], 3) //mov byte ptr [LOCAL.x], 3
		+	(Exe.Version === 11
		?
			PUSH(EBX)                    //push ebx
		:
			''
		)
		+	MOV(ECX, SSN)                //mov ecx, <g_session>
		+	(Exe.Version > 11
		?
			PUSH([EBP, NEG2WC])          //push dword ptr [LOCAL.y]
		:
			''
		)
		;

		const suffix =
			CALL(ALLWC)                  //call CSession::GetShieldType
		+	(Exe.Version === 11
		?
			MOV(ECX, [EBP, NEG2WC])      //mov ecx, dword ptr [LOCAL.z]
		:                                //   OR
			MOV([EBP, NEG2WC], EAX)      //mov dword ptr [LOCAL.z], eax
		)
		;

		addr = Exe.FindHex(code + suffix);
		if (addr < 0)
			throw Error("GetShieldType call missing (New)");

		$$(_, 3.5, `Save the location of the CALL`)
		refAddr = addr + code.byteCount();
	}

	$$(_, 3.6, `Extract the PHYSICAL address of the GetShieldType function`)
	const hookMap = Exe.GetTgtAddr(refAddr + 1, PHYSICAL);

	$$(_, 4.1, `Construct the code to be injected`)
	parts = LUA.createCaller("GetShieldID", "d>d", EDX, EAX);

	code =
		PUSH(EDX)            //push edx
	+	MOV(EDX, [ESP, 8])   //mov edx, dword ptr [ARG.1]
	+	parts.join('')       //Function caller (result saved to eax)
	+	POP(EDX)             //pop edx
	+	RETN(4)              //retn 4
	;

	$$(_, 4.2, `Add our code and jump to it from hookMap`)
	let [, newMapVir] = AutoHook(hookMap, code, { postProc : LUA.finalize });

	if (Exe.Version === 9 || Exe.Version === 10)
	{
		$$(_, 5.1, `Find Register assignment to 5 and replace with MaxShield`)
		code =
			MOV(R32, 5)   //mov regA, 5
		+	SUB(R32, R32) //sub regA, regB
		;

		addr = Exe.FindHex(code, hookReq - 0x60, hookReq);
		if (addr < 0)
			throw Error("No Allocator MOVes found");

		Exe.SetInt32(addr + 1, MaxShield);

		$$(_, 5.2, `Find EAX comparison with 5 before assignment and replace with MaxShield`)
		code =
			CMP(EAX, 5) //cmp eax, 5
		+	JAE(WC)     //jae short _skip
		;

		addr = Exe.FindHex(code, addr - 0x10, addr);
		if (addr < 0)
			throw Error("Shield Limit comparison missing");

		Exe.SetInt8(addr + 2, MaxShield)
	}
	else
	{
		$$(_, 5.3, `Find "push 5" before hookReq and replace with MaxShield if its there`)
		code =
			PUSH_EAX      //push eax
		+	PUSH(5)       //push 5
		+	(Exe.BuildDate > 20211000
		?
			MOV([EBP, WCn], POS4WC)
		:
			''
		)
		+	(Exe.Version > 11 && (!ROC.IsZero || Exe.BuildDate > 20190910)
		?
			CALL(POS3WC)  //call <allocator>
		:
			MOV(ECX, R32) //mov ecx, regA
		);

		addr = Exe.FindHex(code, hookReq - 0x30, hookReq);
		if (addr < 0)
			throw Error("No Allocator PUSHes found");

		Exe.SetInt8(addr + 2, MaxShield);
	}

	let funcAddr;
	if (Exe.BuildDate < 20170700)
	{
		$$(_, 6.1, `Find the function directly since its CALLed much later in the call stack`)
		if (ROC.HasFP)
		{
			code =
				FP_START                //push ebp
				                        //mov ebp, esp
			+	(Exe.Version === 11
			?
				MOV(EAX, ECX)           //mov eax, ecx
			+	MOV(ECX, [EBP, 0xC])    //mov ecx, dword ptr [ebp+0Ch] ; ARG.2
			:                           //  OR
				MOV(EAX, [EBP, 0xC])    //mov ecx, dword ptr [ebp+0Ch] ; ARG.2
			)
			;
		}
		else
		{
			code =
				MOV(EAX, [ESP, 0x8])    //mov eax, dword ptr [esp+8] ; ARG.2
		}

		code +=
			PUSH(ESI)                   //push esi
		+	XOR(ESI, ESI)               //xor esi, esi
		;

		let suffix =
			Exe.Version === 11
		?
			CMP(ECX, 0x88D)             //cmp ecx, 88Dh
		:                               //  OR
			CMP(EAX, 0x7D0)             //cmp eax, 7D0h
		;

		funcAddr = Exe.FindHex(code + suffix);
		if (funcAddr < 0 && Exe.Version === 11)
		{
			suffix = CMP(ECX, 0x7D0);
			funcAddr = Exe.FindHex(code + suffix);
		}
		if (funcAddr < 0)
			throw Error("Missing shield id check (Pre-2018)");
	}
	else
	{
		$$(_, 6.2, `For later clients, its CALLed after the GetShieldType CALL.`)
		code =
			CMP(R32, 5)             //cmp regA, 5
		+	JL(POS2WC)              //jl _skip
		+	PUSH_R                  //push regA
		+	(Exe.Version === 11
		?
			PUSH_R                  //push regB
		:                           // or
			PUSH([EBP, 0x10])       //push dword ptr [ebp+10h] ; ARG.3
		)
		+	MOV(ECX, POS4WC)        //mov ecx, offset#1
		+	CALL()                  //call <validator>
		;

		addr = Exe.FindHex(code, refAddr + 5, refAddr + 0x80);
		if (addr < 0)
			throw Error("Missing shield id checker CALL");

		$$(_, 6.3, `Save the CALLed address (PHYSICAL one)`)
		funcAddr = Exe.GetTgtAddr(addr + code.byteCount(), PHYSICAL);
	}

	$$(_, 6.4, `Now convert to VIRTUAL`)
	const funcVir = Exe.Phy2Vir(funcAddr, CODE);

	$$(_, 6.5, `Prep the code to be replaced with`)
	parts = LUA.createCaller("ValidateShieldID", "dd>b", [EBP, 0xC], [EBP, 8], AL);

	code =
		FP_START       //push ebp
		               //mov ebp, esp
	+	parts.join('') //Function caller code
	+	POP(EBP)       //pop ebp
	+	RETN(8)        //retn 8
	+	ALL00          //Null bytes for gap
	;

	$$(_, 6.6, `Fill in the blanks`)
	code = LUA.finalize(code, funcVir);

	$$(_, 6.7, `Replace the function with our code`)
	Exe.SetHex(funcAddr, code);

	$$(_, 7.1, `Find the extra comparison function that got added from 2012-04-18RE onwards. ugh`)
	const prefix =
		(ROC.HasFP
	?
		FP_START                              //push ebp
		                                      //mov ebp, esp
	:
		''
	)
	+	PUSH(ESI)                             //push esi
	+	MOV(ESI, [ROC.StkReg, 8])             //mov esi, dword ptr [ARG.1]
	+	PUSH(ESI)                             //push esi
	+	CALL(ALLWC)                           //call func#1
	;
	let dispLoc = 2; //position of the displacement after the CALL

	switch (Exe.Version)
	{
		case 6:  //VC6 ; this is probably not needed
		case 9:  // to
		case 10: //VC10
		{
			code =
				MOV(EAX, [EAX, WCp])          //mov eax, dword ptr [eax + dispA]
			+	ADD(ESI, -0x835)              //add esi, -835h
			+	ADD(ESP, 4)                   //add esp, 4
			;
			break;
		}

		case 11: //VC11
		{
			code =
				MOV(R32, [EAX, WCp])          //mov regA, dword ptr [eax + dispA]
			+	(Exe.BuildDate < 20150500
			?
				LEA(ECX, [ESI, -0x835])
			:
				''
			)
			+	ADD(ESP, 4)                   //add esp, 4
			+	(Exe.BuildDate < 20150500
			?
				''
			:
				CMP(ESI, 0x834)               //cmp esi, 834h
			)
			;
			break;
		}

		default: //VC14.16
		{
			code =
				ADD(ESP, 4)                   //add esp, 4
			+	MOV(EAX, [EAX, WCp])          //mov eax, dword ptr [eax + dispA]
			+	CMP(ESI, 0x834)               //cmp esi, 834h
			;
			dispLoc = 5;
			break;
		}
	}

	addr = Exe.FindHex(prefix + code);
	if (addr < 0 && Exe.BuildDate > 20130000) //Mandatory for 2013+
		throw Error("Extra Limiter missing");

	$$(_, 7.2, `Move to the position after the call (all the code till that point is relevant)`)
	addr += prefix.byteCount();

	$$(_, 7.3, `Retrieve the displacement wrt EAX`)
	const disp = Exe.GetInt8(addr + dispLoc);

	$$(_, 7.4, `Retrieve the target address (this retrieve the weapon ID)`)
	funcAddr = Exe.GetTgtAddr(addr - 4);

	$$(_, 7.5, `Create our replacement code (At this point the earlier hookMap function has been called to retrieve the shield id)`)
	parts =
	[//0
		TEST(EAX, EAX)         //test eax, eax
	+	JZ(Filler(1,1))        //jz _skip_OR
	+	OR(EAX, -1)            //or eax, FFFFFFFFh
	+	POP(ESI)               //pop esi
	+	(ROC.HasFP
	?
		POP(EBP)               //pop ebp
	:
		''
	)
	+	RETN(4)                //retn 4

	,//1
		PUSH(ESI)              //push esi ; _skip_OR
	+	CALL(Filler(2))        //call <funcAddr>
	+	ADD(ESP, 4)            //add esp, 4
	+	MOV(EAX, [EAX, disp])  //mov eax, dword ptr [eax + dispB]
	+	POP(ESI)               //pop esi
	+	(ROC.HasFP
	?
		POP(EBP)               //pop ebp
	:
		''
	)
	+	RETN(4)                //retn 4
	];

	$$(_, 7.6, `Fill the blanks`)
	const firstAddr = Exe.Phy2Vir(addr, CODE);
	code = SetFillTargets(parts,
	{
		start : firstAddr,
		'1,1' : firstAddr + parts.byteCount(0), // _skip_OR
		 2    : funcAddr
	});

	$$(_, 7.7, `Replace the function being CALLed`)
	Exe.SetTgtAddr(addr - 4, newMapVir);

	$$(_, 7.8, `Append our code after the CALL`)
	Exe.SetHex(addr, code);

	$$(_, 8, `Check with user if they want to copy the supporting files to the target area's data folder`)
	if (!Warp.TestMode)
		Exe.GetUserInput('$copyCSLub', D_Bool, "Copy Custom Shield Lua", "Do you want the supporting Lub files copied to <b>'data'</b> folder when patch is applied?", true);

	return true;
};

///
/// \brief Disable for unsupported clients (Need Lua interface)
///
CustomShields.validate = IsPost2010;

///
/// \brief Extra steps when the patch is applied (Copy the Lua files if requested)
///
CustomShields.onApplied = function()
{
	if (!Warp.TestMode && Exe.GetSavedInput('$copyCSLub'))
	{
		const _ = 'CustomShields.onApplied';

		$$(_, 1.1, `Prepare the directory paths`)
		const suffix = "/LuaFiles514/Lua Files/DataInfo";
		const srcDir = Warp.Path + "Inputs" + suffix;
		let tgtDir = System.DirPath(Warp.TgtExe) + "/data" + suffix;

		$$(_, 1.2, `For old clients the version prefix is not there`)
		if (Exe.BuildDate < 20120000)
			tgtDir = tgtDir.replace("LuaFiles514/", '');

		$$(_, 1.3, `Create the target directory`)
		const ready = System.MkDir(tgtDir);
		if (!ready)
			return;

		$$(_, 1.4, `Retrieve the max shield value`)
		const MaxShield = Exe.GetSavedInput('$maxShield');

		$$(_, 2.1, `Copy the lua file containing the tables`)
		System.Copy(srcDir + "/ShieldTable.lub", tgtDir);

		if (MaxShield != 10)
		{
			$$(_, 2.2, `If the limit is different read the lua file containing functions`)
			let fp = new TextFile(srcDir + "/ShieldTable_F.lub", ASCII, "r");
			let contents = fp.Read(fp.Size);

			$$(_, 2.3, `Change the limit inside`)
			contents = contents.replace("Max_Shield = 10", `Max_Shield = ${MaxShield}`);

			$$(_, 2.4, `Write to the target folder`)
			if (fp.Open(tgtDir + "/ShieldTable_F.lub", 'w')) //encoding is already ASCII
			{
				fp.Write(contents);
				fp.Close();
			}
		}
		else
		{
			$$(_, 2.5, `If limit is 10 then just copy the lua file containing functions`)
			System.Copy(srcDir + "/ShieldTable_F.lub", tgtDir, true);
		}
	}
};
