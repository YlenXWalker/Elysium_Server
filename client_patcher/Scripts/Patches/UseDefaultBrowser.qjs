/**************************************************************************\
*                                                                          *
*   Copyright (C) 2018-2024 CH.C (jchcc)                                   *
*   Copyright (C) 2020-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : CH.C (jchcc), Neo-Mind                                 *
*   Created Date  : 2020-11-21                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Enforce usage of default browser using ShellExecuteA function
///       (after URL is parsed) instead of ROWebBrowser
///
UseDefaultBrowser = function(_)
{
	$$(_, 1.1, `Find the location where client is parsing the URL`)
	let code =
		PUSH_EAX           //push eax
	+	CALL(ESI)          //call esi ; atoi
	+	ADD(ESP, 4)        //add esp, 4
	+	MOV(EBX, EAX)      //mov ebx, eax
	;

	const addrs = Exe.FindHexN(code);
	if (addrs.isEmpty())
		throw Error("Parsing not found");

	$$(_, 1.2, `Find location where client start parsing first argument of URL`)
	const memLoc = [ROC.StkReg, ROC.HasFP ? WC : POS2WC];
	code =
		PUSH_0              //push 0
	+	LEA(R32, memLoc)    //lea regA, [LOCAL.x] ; usually EAX
	+	PUSH_R              //push regA
	+	MOV(ECX, EDI)       //mov ecx, edi
	+	CALL(ALLWC)         //call func#1
	+	MOV(memLoc, ALLWC)  //mov dword ptr [LOCAL.y], immA ; could be different register too
	;

	const result = addrs.findAs( memAddr =>
	{
		const found = Exe.FindHex(code, memAddr - 0x80, memAddr);
		if (found > 0)
			return [memAddr, found + code.byteCount() - 7]; //Save location of the MOV DWORD as well
	});
	if (!result)
		throw Error("Function not found");

	const [parseAddr, jmpAddr] = result;

	$$(_, 1.3, `Save original instruction for later use`)
	const saveIns = Instr.FromAddr(jmpAddr);

	$$(_, 2.1, `Get SHELL32.ShellExecuteA address`)
	const ShExec = Exe.FindFunc("ShellExecuteA", "SHELL32.dll");
	if (ShExec < 0)
		throw Error("ShellExecuteA not found");

	$$(_, 2.2, `Find the string 'open' to use for lpOperation`)
	const OpenStr = Exe.FindText("open");
	if (OpenStr < 0)
		throw Error("'open' not found");

	$$(_, 2.3, `Construct the code for CALLing ShellExecuteA`)
	code =
		PUSH_EAX         //push eax
	+	MOV(EAX, [EAX])  //mov eax, dword ptr [eax]
	+	PUSH(0xA)        //push 0Ah           ; nShowCmd
	+	PUSH_0           //push 0             ; lpDirectory
	+	PUSH_0           //push 0             ; lpParameters
	+	PUSH_EAX         //push eax           ; lpFile -> URL
	+	PUSH(OpenStr)    //PUSH offset 'open' ; lpOperation -> 'open'
	+	PUSH_0           //PUSH 0             ; hwnd
	+	CALL([ShExec])   //call dword ptr [SHELL32.ShellExecuteA]
	+	POP_EAX          //pop eax
	+	saveIns          //mov dword ptr [LOCAL.y], immA
	+	RETN()           //retn
	;

	$$(_, 2.4, `Add the code`)
	const [, freeVir] = Exe.AddHex(code, 0x10);

	$$(_, 2.5, `Create a CALL to the function from the MOV DWORD location`)
	Exe.SetCALL(jmpAddr, freeVir, saveIns.Size - 5); //Extra NOPs at the end

	$$(_, 3.1, `Find offset where ROWebBrowser is CALLed`)
	switch (Exe.Version)
	{
		case 6: //VC6 &
		case 9: //VC9
		{
			code =
				PUSH(EBP)         //push ebp
			+	PUSH(EBX)         //push ebx
			+	MOV(ECX, POS3WC)  //mov ecx, offset#1
			;
			break;
		}
		case 10: //VC10
		{
			code =
				MOV(R32, [EBP, NEG2WC]) //mov regA, dword ptr [LOCAL.x]
			+	PUSH(EBX)               //push ebx
			+	PUSH_R                  //push regA
			;
			break;
		}
		default: //VC11 & VC14.16
		{
			code =
				PUSH(EBX)            //push ebx
			+	PUSH([EBP, NEG2WC])  //push dword ptr [LOCAL.x]
			;
			break;
		}
	}

	const rAddr = Exe.FindHex(code, parseAddr + 8, parseAddr + 0xB0);
	if (rAddr < 0)
		throw Error("ROWebBrowser pattern missing");

	$$(_, 3.2, `Find the destination when create ROWebBrowser failed after rAddr`)
	code =
		MOV(ESI, EAX)  //mov esi, eax
	+	TEST(ESI, ESI) //test esi,esi
	+	JE(WCp)        //je short _skip
	;

	addr = Exe.FindHex(code, rAddr, rAddr + 0x20);
	if (addr < 0)
		throw Error("ROWebBrowser test missing");

	$$(_, 3.3, `Get the JE target location`)
	const tgtAddr = Exe.GetTgtAddr(addr + code.byteCount() - 1, VIRTUAL, 1);

	$$(_, 3.4, `Create a JMP from rAddr to the target`)
	Exe.SetJMP(rAddr, tgtAddr);

	return true;
};

///
/// \brief Disable for clients which don't use ROWebBrowser
///
UseDefaultBrowser.validate = () =>
	Exe.BuildDate < 20181020 && (Exe.BuildDate > 20120400 || (ROC.IsRenewal && Exe.BuildDate > 20120300));
