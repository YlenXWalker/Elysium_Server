/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2024 Neo-Mind                                       *
*   Copyright (C) 2018-2024 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind, Andrei (4144)                                *
*   Created Date  : 2020-11-10                                             *
*   Last Modified : 2024-08-09                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the PUSHed argument & mode value to Mode Setting calls after disconnection
///        to make it return to login window instead of exiting client.
///
DisConnToLogin = function(_)
{
	if (Exe.Version < 11)
	{
		$$(_, 1.1, `Find all locations where the MsgString ID (635) is PUSHed for the specific error message`)
		///   "Sorry the character you are trying to use is banned for testing connection."
		///   We expect 2 matches 1 for Login/Char & 1 for Map server disconnection

		let addrs = Exe.FindHexN(2, 2, PUSH(0x635) );
		if (addrs.isEmpty())
			addrs = Exe.FindHexN(2, 2, PUSH(0x7E5) + CALL()); //new clients have different ID
	
		if (addrs.isEmpty())
			throw Error("Expected 2 MsgString ID PUSHes");
	
		$$(_, 1.2, `Save location after the PUSH for both addrs`)
		const mapAddr = addrs[0] + 5; //for Map
		const lcAddr  = addrs[1] + 5; //for Login/Char
	
		/******* First we will work on Disconnection from Login/Char Server ********/
	
		$$(_, 2.1, `Find the format string used for error message`)
		let addr = Exe.FindText("%s(%d)");
		if (addr < 0)
			throw Error("Format string not found");
	
		$$(_, 2.2, `Find where it is PUSHed after the MsgString ID PUSH (within 0x120 bytes)`)
		addr = Exe.FindHex( PUSH(addr), lcAddr, lcAddr + 0x120);
		if (addr < 0)
			throw Error("Format string not used");
	
		$$(_, 2.3, `Find the refAddr movement after it (We will inject a Jump to our code here)`)
		code =
			CALL(NEG3WC)             //CALL func#1
		+	MOV(ECX, [POS3WC])       //mov ecx, dword ptr [refAddr]
		;
		let addr2 = Exe.FindHex(code, addr + 0x5, addr + 0x80);
	
		if (addr2 < 0)
		{
			code =
				RETN(4)              //retn 4
			+	MOV(ECX, [POS3WC])   //mov ecx, dword ptr [refAddr]
			+	PUSH_0               //push 0
			;
			addr2 = Exe.FindHex(code, addr + 0x5, addr + 0xB0);
		}
		if (addr2 < 0)
			throw Error("Reference Address assignment missing");
	
		$$(_, 2.4, `Save location of the MOV ECX instruction`)
		let jmpAddr = Instr.FromAddr(addr2).NextAddr;
	
		$$(_, 2.5, `Extract the MOV instruction`)
		const MovECX = Exe.GetHex(jmpAddr, 6);
	
		$$(_, 3.1, `Find the Mode changer CALL after jmpAddr`)
		code =
			PUSH_2     //push 2
		+	CALL(EAX)  //call eax
		;
		addr = Exe.FindHex(code, jmpAddr + 0x6, jmpAddr + 0x20);
		if (addr < 0)
		{
			code = code.replace( CALL(EAX), CALL([EAX, 0x18]) ); //Change CALL EAX to CALL dword ptr [EAX+18]
			addr = Exe.FindHex(code, jmpAddr + 0x6, jmpAddr + 0x20);
		}
		if (addr < 0)
			throw Error("Mode changer CALL missing");
	
		$$(_, 3.2, `Get the number of PUSH 0 instructions between the Mode Change and refAddr assignment before`)
		///       We need to push the same number in our code
		const zeros = Exe.FindHexN( PUSH_0, jmpAddr + 6, addr );
		if (zeros.isEmpty())
			throw Error("PUSH 0s not found");
	
		const PUSH0s = PUSH_0.repeat(zeros.length);
	
		$$(_, 3.3, `Save location after the CALL (the address we need to return to after Mode Changer call)`)
		let retnAddr = addr + code.byteCount();
	
		$$(_, 4.1, `Prepare our code (same as what was there but arg1 will be 271D and [this + 3] is assigned 3 before the call)`)
		code =
			MovECX                             //mov ecx, dword ptr [refAddr]
		+	MOV(EAX, [ECX])                    //mov eax, dword ptr [ecx]
		+	PUSH0s                             //push 0 - n times
		+	PUSH(0x271D)                       //push 271Dh
		+	MOV([ECX, 0xC], 3)                 //mov dword ptr [ecx+0Ch], 3
		+	PUSH(Exe.Phy2Vir(retnAddr, CODE))  //push <retnAddr>
		+	JMP([EAX, 0x18])                   //jmp dword ptr [eax+18h]
		;
	
		$$(_, 4.2, `Add the code`)
		let [, freeVir] = Exe.AddHex(code, 0x10);
	
		$$(_, 4.3, `Change the MOV instruction to a JMP to our code and NOP out rest of the stuff between jmpAddr & retnAddr`)
		Exe.SetJMP(jmpAddr, freeVir, retnAddr - (jmpAddr + 5));
	
		/******* Next we will work on Disconnection from Map server during Gameplay *******/
	
		$$(_, 5.1, `Check if there is a short Jump right after the MsgString ID PUSH. If its there go to the address`)
		if (Exe.GetUint8(mapAddr) === 0xEB)
		{
			addr2 = Exe.GetTgtAddr(mapAddr + 1, PHYSICAL, 1);
		}
		else
		{
			$$(_, 5.2, `If not look for a Long Jump after the PUSH`)
			addr = Exe.FindHex( JMP(POS2WC), mapAddr, mapAddr + 0x100);
			if (addr < 0)
				throw Error("JMP to Mode changer CALL location not found");
	
			$$(_, 5.3, `Goto the JMP address`)
			addr2 = Exe.GetTgtAddr(addr + 1, PHYSICAL);
		}
	
		$$(_, 5.4, `Find the CALL to ErrorMsg function (i.e. Error Message Window displayer function) after the addr`)
		code =
			MOV(ECX, POS3WC)    //mov ecx, <g_windowMgr>
		+	CALL(NEG3WC)        //call UIWindowMgr::ErrorMsg
		;
		let offset = 10;
	
		addr = Exe.FindHex(code, addr2, addr2 + 0x100);
		if (addr < 0)
		{
			code =
				CALL(NEG3WC)    //call UIWindowMgr::ErrorMsg
			+	MOV(EAX, [EDI]) //mov eax, dword ptr [edi]
			;
			offset = 5;
	
			addr = Exe.FindHex(code, addr2, addr2 + 0x100);
		}
		if (addr < 0)
			throw Error("ErrorMsg CALL not found");
	
		$$(_, 5.5, `Save location after the CALL`)
		jmpAddr = addr + offset;
	
		$$(_, 6.1, `Find the Mode changer CALL afterwards`)
		switch (Exe.Version)
		{
			case 9: //VC9
			{
				code =
					PUSH_2               //push 2
				+	MOV(ECX, EDI)        //mov ecx, edi
				+	CALL(EAX)            //call eax
				;
				break;
			}
	
			case 10: //VC10
			{
				code =
					PUSH_2               //push 2
				+	CALL(EDX)            //call edx
				;
				break;
			}
	
			default: //VC6 & VC11+
			{
				code =
					PUSH_2               //push 2
				+	(Exe.Version === 11
				?
					MOV(ECX, EDI)        //mov ecx, edi
				:
					''
				)
				+	CALL([EAX, 0x18])    //call dword ptr [eax+18h]
				;
				break;
			}
		}
	
		retnAddr = Exe.FindHex(code, addr, addr + 0x20);
		if (retnAddr < 0 && Exe.Version === 9) //VC9 2nd format
		{
			code = code.replace( MOV(ECX, EDI), MOV(ECX, EBP) ); //Change EDI to EBP in ECX assignment
			retnAddr = Exe.FindHex(code, addr, addr + 0x20);
		}
		if (retnAddr < 0)
			throw Error("Mode changer CALL not found");
	
		$$(_, 6.2, `Set retnAddr to location after the CALL. This is the Return address`)
		retnAddr += code.byteCount();
	
		$$(_, 7.1, `Prepare our 2nd code. Similar to 1st one we have done few changes`)
		///           (arg1 is 8D and ECX is loaded from refAddr instead of depending on some local - value will be same either way)
		code =
			MovECX                               //mov ecx, dword ptr [refAddr]
		+	MOV(EAX, [ECX])                      //mov eax, dword ptr [ecx]
		+	PUSH0s                               //push 0 - n times
		+	PUSH(0x8D)                           //push 8Dh
		+	PUSH(Exe.Phy2Vir(retnAddr, CODE))    //push retnAddr
		+	JMP([EAX, 0x18])                     //jmp dword ptr [eax+18h]
		;
	
		$$(_, 7.2, `Add the code`);
		[, freeVir] = Exe.AddHex(code, 0x10);
	
		$$(_, 7.3, `Change the instruction from PUSH 2 onwards into a JMP to our code`)
		Exe.SetJMP(jmpAddr, freeVir, retnAddr - (jmpAddr + 5));
	}
	else
	{
		$$(_, 8.1, `Find all locations where the MsgString ID (718) is PUSHed`)
		///    "Sorry the character you are trying to use is banned for testing connection."
		///       We expect 2 matches 1 for Login/Char & 1 for Map server disconnection

		let addrs = Exe.FindHexN(PUSH(0x718) + CALL());
		if (addrs.isEmpty())
			throw Error("Msg ID PUSHes missing");
		
		$$(_, 8.2, `Find the correct one amongst the matches`)
		let code = PUSH_0.repeat(4) + PUSH_2;
		let addr = addrs.findAs( memAddr => {
			const addr = Exe.FindHex(code, memAddr + 20, memAddr + 0x100);
			return (addr > 0 ? addr : null);
		});
		
		$$(_, 9.1, `Create the new code which changes the second last argument`)
		code =
			PUSH_0.repeat(4) //push 0
			                 //push 0
			                 //push 0
			                 //push 0
		+	PUSH(0x8D)       //push 8Dh
		+	JMP(Filler(1))   //jmp <retnAddr>
		;
		
		$$(_, 9.2, `Insert and jump to it from the address found`)
		AutoHook(addr, code, { targets: { 1 : Exe.Phy2Vir(addr + 10) } });
	}
	return true;
};

///
/// \brief Modify the Cancel Button Case in UISelectCharWnd::SendMsg to disconnect and show the Login Window
///
CancelToLogin = function(_)
{
	$$(_, 1.1, `Find the case branch that occurs before the Cancel Button case.`)
	///       The pattern will match multiple locations of which first (or recently second) is the one we need
	let code =
		LEA(R32, [8, R32, POS4WC])  //lea regB, [regA*8 + refAddr]
	+	PUSH_R                      //push regB
	+	PUSH(0x337)                 //push 337h
	+	CALL()                      //call func#2
	;
	const addrs = Exe.FindHexN(code);
	if (addrs.isEmpty())
		throw Error("Reference case branch not found");

	const csize = code.byteCount() + 4;

	$$(_, 1.2, `Find CConnection::Disconnect & CRagConnection::instanceR CALLs`)
	code =
		ADD(ESP, 8)       //add esp, 8
	+	CALL(POS3WC)      //call CRagConnection::instanceR
	+	MOV(ECX, EAX)     //mov ecx, eax
	+	CALL(POS3WC)      //call CConnection::Disconnect
	+	MOV(ECX, POS3WC)  //mov ecx, offset
	;
	let addr = Exe.FindHex(code);

	if (addr < 0)
	{
		code = code.replace(CALL(POS3WC), CALL(NEG3WC));//Change 1st CALL
		code = code.replace(CALL(POS3WC), CALL(NEG3WC));//Change 2nd CALL
		addr = Exe.FindHex(code);
	}
	if (addr < 0)
		throw Error("Disconnect & instanceR CALLs not found");

	$$(_, 1.3, `Extract the function addresses`)
	const InstR = Exe.GetTgtAddr(addr +  4, PHYSICAL);
	const DConn = Exe.GetTgtAddr(addr + 11, PHYSICAL);

	$$(_, 2.1, `Find 메시지 => Korean version of "Message"`)
	addr = Exe.FindText("\xB8\xDE\xBD\xC3\xC1\xF6");
	if (addr < 0)
		throw Error("'Message' not found");

	$$(_, 2.2, `Prepare pattern of the Cancel case branch to look for. It creates the msgBox that shows the quit message`)
	const canceller =
		PUSH(addr)  //push offset "메시지"
	+	PUSH_R      //push regA ; contains 0
	+	PUSH_R      //push regA
	+	PUSH_1      //push 1
	+	PUSH_2      //push 2
	+	PUSH(0x11)  //push 11h
	;
	const cancSize = canceller.byteCount();

	const found = addrs.filter( memAddr =>
	{
		/***** First we find all required addresses *****/

		$$(_, 2.3, `Find the cancel case after memAddr`)
		memAddr += csize;

		let zeroPush;
		addr = Exe.FindHex(canceller, memAddr, memAddr + 0x80);
		if (addr < 0)
		{
			zeroPush = PUSH_0;
			addr = Exe.FindHex(canceller.replace(PUSH_R + PUSH_R, PUSH_0 + PUSH_0), memAddr, memAddr + 0x80);

			if (addr < 0)
				return false;
		}
		else
		{
			zeroPush = Exe.GetHex(addr + 5, 1);
		}

		$$(_, 2.4, `Check if there is a PUSH 118 (only 2013+ clients have that for msgBox creation)`)
		$$(_, 2.4, `and a PUSH 0   (only 2017+ has it extra)`)
		if (Exe.GetHex(addr - 5, 5) === PUSH(0x118))
			addr -= 7;

		if (Exe.BuildDate > 20170000 && Exe.GetHex(addr - 2, 2) === PUSH_0)
			addr -= 2;

		$$(_, 2.5, `Find the end point of the msgBox call. There will be a comparison for the return code`)
		code =
			CMP(EAX, POS1WC)  //cmp eax, immA
		+	JNE(ALLWC)        //jne _skip ; skip quitting.
		;

		let addr2 = Exe.FindHex(code, addr + cancSize, addr + cancSize + 0x40);
		if (addr2 < 0)
		{
			code = code.replace(CMP(EAX, POS1WC), CMP(EAX, WC)); //immA is only 1 byte long
			addr2 = Exe.FindHex(code, addr + cancSize, addr + cancSize + 0x40);
		}
		if (addr2 < 0)
			return false;

		$$(_, 2.6, `Set addr2 to location after the JNE`)
		addr2 += code.byteCount();

		$$(_, 3.1, `Lastly we find the PUSH 2 below addr2 which serves as argument to the register call i.e. (call reg32 / call dword ptr [reg32+18h]) - Window Maker?.`)
		///       What we need to do is to substitute the 2 with 2723 for it to show Login Window instead of quitting.
		code =
			zeroPush.repeat(3)  //push regC x3 OR push 0 x3
		+	PUSH_2              //push 2
		;

		let addr3 = Exe.FindHex(code, addr2, addr2 + 0x20);
		if (addr3 < 0)
			return false;

		$$(_, 3.2, `Set addr3 to location of PUSH 2`)
		addr3 += code.byteCount() - 2;

		$$(_, 4.1, `Prepare our code for returning to login screen`)

		// First Disconnect from Char Server
		code =
			CALL(InstR, addr)     //call CRagConnection::instanceR
		+	MOV(ECX, EAX)         //mov ecx, eax
		+	CALL(DConn, addr + 7) //call CConnection::disconnect

		// Extract and paste all the code between addr2 and addr3 to prep the register call (Window Maker)
		+	Exe.GetHex(addr2, addr3 - addr2)

		// PUSH 2723 and go to the location after the original PUSH 2 => addr3 + 2
		+	PUSH(0x2723)           //push 2723h
		;

		code +=
			JMP(addr3 + 2, addr + code.byteCount()) //jmp addr ; after PUSH 2.
		;

		$$(_, 4.2, `Replace with prepared code`)
		Exe.SetHex(addr, code);
		return true;

	});
	$$(_, 4.3, `Ensure we got atleast 1 match`)
	if (found.isEmpty())
		throw Error("No references matched");

	return true;
};

///
/// \brief Wrappers for individual patch validation
///
DisConnToLogin.validate = () =>
	ROC.HasLWhidden || Exe.Version > 10;

CancelToLogin.validate  = HasHiddenLogWin;
