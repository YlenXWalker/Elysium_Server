/**************************************************************************\
*                                                                          *
*   Copyright (C) 2015-2024 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-21                                             *
*   Last Modified : 2024-08-30                                             *
*                                                                          *
\**************************************************************************/

// TODO - Some clients in 2012 dont seem to comply to any of the patterns... Need to investigate in future.

///
/// \brief Hijack the MsgStr function CALL inside the Booking OnCreate function
///        for filtering out user specified Job ID List. The function creates the combobox
///        so this is the apt location for patch
///
RemoveBookingJobs = function(_)
{
	$$(_, 1.1, `Find the MsgStr CALL used for Job Name loading`)
	let code, type;
	switch (Exe.Version)
	{
		case 6: //VC6
		{
			code =
				LEA(R32, [R32, 0x65D])  //lea regA, [regB + 65D]
			+	ADD(R32, R32)           //add regB, regC
			+	MOV([EBP, WCn], R32)    //mov dword ptr [LOCAL.1], regA
			+	MOV([EBP, WCn], R32)    //mov dword ptr [LOCAL.2], regB
			+	MOV(EAX, [EBP, WCn])    //mov eax, dword ptr [LOCAL.3]
			+	PUSH_EAX                //push eax
			+	CALL()                  //call MsgStr
			;
			type = 1;
			break;
		}
		case 9:  //VC9 &
		case 11: //VC11
		{
			code =
				LEA(ECX, [ECX, 0])      //lea ecx, [ecx] ; 0 is required since it is looking for the 3 byte version
			+	LEA(R32, [R32, 0x65D])  //lea regA, [regB + 65Dh]
			+	PUSH_R                  //push regA
			+	CALL()                  //call MsgStr
			;
			type = 2;
			break;
		}
		default: //VC10 & VC14+
		{
			const reg = Exe.Version === 10 ? R32 : EAX;
			code =
				MOV(reg, [EBP, WCn])    //MOV regA, dword ptr [LOCAL.x]
			+	(Exe.Version > 11 && Exe.MinorVer < 20
			?
				NOP                     //nop
			:
				''
			)
			+	ADD(reg, 0x65D)         //add regA, 65Dh
			+	PUSH_R                  //push regA
			+	CALL()                  //call MsgStr
			;
			type = 3;
			break;
		}
	}

	let addr = Exe.FindHex(code);
	if (addr < 0 && type === 1) //Some VC6 clients need this one
	{
		code = code.replace(MOV(EAX, [EBP, WCn]),
			JMP(2)                 //jmp short _skip
		+	XOR(R32, R32)          //xor regD, regD
		+	MOV(EAX, [EBP, WCn])   //mov eax, dword ptr [LOCAL.y] ; _skip
		)
		;
		addr = Exe.FindHex(code);
	}
	if (addr < 0)
		throw Error("Loop start not found");

	$$(_, 1.2, `Save location of CALL`)
	const callAddr = addr + code.byteCount() - 1;

	$$(_, 1.3, `Extract MsgStr address`)
	const MsgStr = Exe.GetTgtAddr(callAddr + 1);

	$$(_, 2.1, `Prepare Pattern for finding end of the loop`)
	///          (We need to RETN to the location before Loop counter increment which is what jmpDelta is for)
	///
	let jmpDelta;
	switch (type)
	{
		case 1: //VC6
		{
			code =
				ADD(ESP, 4)                      //add esp, 4
			+	MOV(R32, [EBP, WCn])             //mov regA, dword ptr [LOCAL.1]
			+	MOV(R32, [EBP, WCn])             //mov regB, dword ptr [LOCAL.2]
			+	INC(R32)                         //inc regA
			+	INC(R32)                         //inc regB
			+	MOV([EBP, WCn], R32)             //mov dword ptr [LOCAL.3], regC
			+	MOV([EBP, WCn], R32)             //mov dword ptr [LOCAL.4], regC
			+	MOV([EBP, WCn], R32)             //mov dword ptr [LOCAL.5], regC
			+	MOV([EBP, WCn], R32)             //mov dword ptr [LOCAL.1], regA
			+	MOV([EBP, WCn], R32)             //mov dword ptr [LOCAL.2], regB
			+	JNZ(NEG1WC)                      //jnz _loop
			;
			jmpDelta = 3;
			break;
		}
		case 2:
		{
			if (Exe.Version === 11) //VC11
			{
				code =
					ADD(ESP, 4)                  //add esp, 4
				+	INC(R32)                     //inc regA
				+	MOV([EBP, WCn], 0xF)         //mov dword ptr [LOCAL.1], 0Fh
				+	MOV([EBP, WCn], 0)           //mov dword ptr [LOCAL.2], 0
				+	MOV(BYTE_PTR, [EBP, WCn], 0) //mov byte ptr [LOCAL.3], 0
				+	DEC(R32)                     //dec regB
				+	JNZ(NEG1WC)                  //jnz _loop
				;
				jmpDelta = 3;
			}
			else //VC9
			{
				code =
					CALL([POS3WC])               //call dword ptr [<&MSVCP#.$basic*>]
				+	INC(R32)                     //inc regA
				+	SUB([ESP, WCp], 1)           //sub dword ptr [LOCAL.4], 1
				+	JNZ(WCn)                     //jnz short _loop
				;
				jmpDelta = 6;
			}

			break;
		}
		case 3: //VC10 & VC14.16
		{
			if (Exe.Version === 10) //VC10
			{
				code =
					MOV(R32, 1)                  //mov regA, 1
				+	ADD([EBP, WCn], R32)         //add dword ptr [LOCAL.1], regA
				+	SUB([EBP, WCn], R32)         //sub dword ptr [LOCAL.2], regA
				+	MOV([EBP, WCn], 0xF)         //mov dword ptr [LOCAL.3], 0Fh
				+	MOV([EBP, WCn], R32)         //mov dword ptr [LOCAL.4], regB
				+	MOV([EBP, WCn], R8)          //mov byte ptr [LOCAL.5], reg8C
				+	JNZ(WCn)                     //jnz short _loop
				;
			}
			else //VC14.16
			{
				code =
					MOV(R32, [EBP, WCn])         //mov regA, dword ptr [LOCAL.1]
				+	INC(R32)                     //inc regA
				+	MOV(R32, [EBP, WCn])         //mov regB, dword ptr [LOCAL.2]
				+	INC(R32)                     //inc regB
				+	MOV([EBP, WCn], 0)           //mov dword ptr [LOCAL.3], 0
				+	MOV([EBP, WCn], 0xF)         //mov dword ptr [LOCAL.4], 0Fh
				+	MOV(BYTE_PTR, [EBP, WCn], 0) //mov byte ptr [LOCAL.5], 0
				+	MOV([EBP, WCn], R32)         //mov dword ptr [LOCAL.2], regB
				+	CMP(R32, [4, R32, EBP, WCn]) //cmp regA, dword ptr [4*regA + EBP + dispB]
				+	JL(NEG2WC)                   //jl _loop
				;
			}

			jmpDelta = 0;
			break;
		}
	}

	$$(_, 2.2, `Find the pattern`)
	addr = Exe.FindHex(code, callAddr + 5, callAddr + 0x100);
	if (addr < 0)
		throw Error("Loop End not found");

	$$(_, 2.3, `Get the VIRTUAL location to return to (add jmpDelta value to addr)`)
	let retnAddr = Exe.Phy2Vir(addr + jmpDelta, CODE);

	$$(_, 3.1, `Get the Skip List file from User`)
	const inFile = Exe.GetUserInput('$bookingList', D_InFile, "Booking Skip List", "Enter the List file containing Job IDs to skip", "Inputs/BookSkipList.yml", {filters : YMLFILTER});
	if (inFile === false)
		Cancel("No list file specified");

	$$(_, 3.2, `Retrieve the list from the file`)
	let idList = Warp.LoadYaml(inFile);
	if (idList === false)
		return false;

	else if (!IsArr(idList))
		throw Error("Need a list of Job IDs");

	$$(_, 3.3, `Prune out invalid values.`)
	idList = idList.filter( id => IsNum(id) && id >= 0x65D );
	if (idList.isEmpty())
		throw Error("List file contains no valid Job IDs");

	$$(_, 3.4, `Finish off with NULL at end of the Array`)
	idList.push(0);

	$$(_, 4.1, `Construct our function to check the ID`)
	const parts =
	[
		PUSH_EAX               //push eax
	+	PUSH(ECX)              //push ecx
	+	PUSH(EDX)              //push edx
	+	MOV(EAX, [ESP, 0x10])  //mov eax, dword ptr [esp+10h] ; ARG.1
	+	INC(EAX)               //inc eax ; Needed because the ids start from 0
	+	MOV(ECX, Filler(1))    //mov ecx, <listaddr>

	,//1
		MOVZX(EDX, [ECX])      //movzx edx, word ptr [ecx] ; _next
	+	TEST(EDX, EDX)         //test edx, edx
	+	JE(Filler(4,1))        //je short _msgIt
	+	CMP(EAX, EDX)          //CMP EAX, EDX
	+	JE(Filler(5,1))        //je short _return
	+	INC(ECX)               //inc ecx
	+	INC(ECX)               //inc ecx
	+	JMP(Filler(6,1))       //jmp short _next

	,//2
		POP(EDX)               //pop edx ; _msgIt
	+	POP(ECX)               //pop ecx
	+	POP_EAX                //pop eax
	+	JMP(Filler(2))         //jmp <MsgStr>

	,//3
		POP(EDX)               //pop edx ; _return
	+	POP(ECX)               //pop ecx
	+	POP_EAX                //pop eax
	+	ADD(ESP, 8)            //add esp, 8
	+	JMP(Filler(3))         //jmp <retnAddr>
	+	" 00 00"               //2 NULL byte gap
	];

	const [, _next, _msgIt, _return, listAddr] = MapAddrs(parts);

	$$(_, 4.2, `Construct the id table at the end`)
	parts.push(idList.map( id => id.toHex(2) ).join(''));

	$$(_, 4.3, `Prepare the arguments for auto-hook`)
	const args =
	{
		allocSize : listAddr + idList.length * 2,
		localVals : {
			1 : listAddr
		},
		localTgts : {
			'4,1' : _msgIt,
			'5,1' : _return,
			'6,1' : _next
		},
		targets : {
			2 : MsgStr,
			3 : retnAddr,
		},
		isCall : true
	};

	$$(_, 4.4, `Add our code and call it from callAddr`)
	AutoHook(callAddr, parts, args);

	return true;
};

///
/// \brief Disable for Unsupported Clients
///
RemoveBookingJobs.validate = () =>
	Exe.FindText("map_list") > 0;
