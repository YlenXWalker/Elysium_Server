/**************************************************************************\
*                                                                          *
*   Copyright (C) 2018-2024 Unknown                                        *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Unknown                                                *
*   Created Date  : 2021-06-11                                             *
*   Last Modified : 2024-08-08                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Modify the respective Skill ID checker function (returns 1)
///        to use Custom Lua functions instead of hardcoded checks
///
CustomSkills = function(_)
{
	$$(_, 1.1, `Retrieve the data corresponding to the patch`)
	const data = this.Data.get(_);

	$$(_, 1.2, `Find the skill id checker function`)
	let prefix = ROC.HasFP
	?
		FP_START           //push ebp
		                   //mov ebp, esp
	+	MOV(R32, [EBP, 8]) //mov reg32_A, [ebp+8] ; ARG.1
	:
		MOV(R32, [ESP, 4]) //mov reg32_A, [esp+4] ; ARG.1
	;

	let suffix = data[Exe.Version] ?? data.default;
	if (IsNum(suffix))
		suffix = data[suffix]; //option to inherit from another version

	let fnBegin = Exe.FindHex(prefix + suffix);
	if (fnBegin < 0 && Exe.BuildDate > 20211000 && data.extra_2021)
	{
		const addr = Exe.FindHex(data.extra_2021);
		if (addr < 0)
			throw Error("ID Comparison missing");

		prefix =
			FP_START      //push ebp
			              //mov ebp, esp
		+	PUSH(-1)      //push -1
		+	PUSH(POS3WC)  //push <addr>
		;
		fnBegin = Exe.FindLastHex(prefix, addr, addr - 0x50);
	}
	if (fnBegin < 0)
		throw Error("ID Checker missing");

	$$(_, 1.3, `Load the LUA object`)
	LUA.load();

	$$(_, 1.4, `Construct the code to call the lua function & place the function name after it with a 4 byte gap`)
	const [prep, main, restore] = LUA.createCaller(data.funcName, "d>d", EAX, EAX);
	prefix =
		MOV(EAX, [ESP, 4]) //mov eax, [esp+4] ; ARG.1
	+	prep               //Stack Prep
	+	main               //Lua function call & result retrieval to 'eax'
	+	restore            //Stack Restoration
	+	RETN()             //retn
	;

	const csize = prefix.byteCount();

	$$(_, 2, `Diverge based on the patch name`)
	let luaLoadAddr; //address where the lua file loading code need to be placed
	if (_ === "CustomPlayerSkills")
	{
		$$(_, 2.1, `Since this function is big we can place everything here itself. Fill the blanks with current values`)
		const fnVir = Exe.Phy2Vir(fnBegin, CODE);
		const code = LUA.finalize(prefix + ALL00, fnVir);

		$$(_, 2.2, `Replace the original`)
		Exe.SetHex(fnBegin, code);

		$$(_, 2.3, `Set luaLoadAddr to address after the code`)
		luaLoadAddr = fnBegin + csize + 4;
	}
	else
	{
		$$(_, 2.4, `Prepare the arguments for auto-hook (not enough space to put at original location)`)
		const args =
		{
			allocSize : csize,
			postProc : LUA.finalize,
		};

		$$(_, 2.5, `Add our code and jump to it from fnBegin`)
		AutoHook(fnBegin, prefix, args);

		$$(_, 2.6, `Set luaLoadAddr to -1 (function will allocate space on it's own)`)
		luaLoadAddr = -1;
	}

	$$(_, 3, `Add code to load the lua files (if not already done)`)
	const cacheKey = 'CSK';
	const noPrevUsers = !CACHE.hasUsers(cacheKey);

	CACHE.addUser(cacheKey, _);

	if (noPrevUsers)  //if it's the first user then we need to perform the loading
	{
		$$(_, 3.1, `Activate the global patch`)
		Exe.ActivateGlobal();

		$$(_, 3.2, `Start the tag`)
		Exe.BeginTag(CACHE.getTag(cacheKey));

		$$(_, 3.3, `Add the Lua loaders`)
		const prefix = "Lua Files\\SkillInfo" + (Exe.BuildDate > 20100400 ? 'z\\' : '\\');
		LUA.addLoaders(
			prefix + "SkillInfo_F",
			[
				prefix + "SkillType",
				prefix + "SkillType_F"
			],
			luaLoadAddr
		);
		
		$$(_, 3.4, `Finish the tag`)
		Exe.EndTag();
		
		$$(_, 3.5, `Revert to the active patch we started with`)
		Exe.SetActivePatch(_);
	}

	return true;
};

///
/// \brief Enable only for 2010+ clients
///
CustomSkills.validate = IsPost2010;

///
/// \brief Delete the patch name from the users list and clear out the tag if no users remain.
///
CustomSkills.cleanup = patchName =>
	CACHE.delUser('CSK', patchName); //will auto-clean the tag if the last user has pulled out.


///
/// \brief Wrappers for individual patches
///
CustomPlayerSkills = CustomSkills;
CustomHomunSkills  = CustomSkills;
CustomMerceSkills  = CustomSkills;

///
/// \brief Data to be used by the Patch function
///
CustomSkills.Data = MakeMap(
	'CustomPlayerSkills',
	{
		6:
			CMP(EAX, 0x27D)  //cmp eax, 27Dh
		+	JG(POS2WC)       //jg _skip
		+	CMP(EAX, 0x27C)  //cmp eax, 27Ch
		,

		default:
			CMP(EAX, 0x106)  //cmp eax, 106h
		+	JG(WC)           //jg short _skip
		+	JE(POS2WC)       //je _valid
		,

		extra_2021:
			CMP(R32, 0x106)  //cmp eax, 106h
		+	JG(WC)           //jg short _skip
		+	JE(POS2WC)       //je _valid
		,

		funcName: "IsPlayerSkill"
	},

	'CustomHomunSkills',
	{
		6:
			CMP(EAX, 0x1F40)       //cmp eax, 1F40h
		+	JL(WC)                 //jl short _skip
		+	CMP(EAX, 0x1F51)       //cmp eax, 1F51h
		,

		14:
			MOV(ECX, ' [001.1100] 00 00 00')  //mov ecx, 2Ch or 3Ch (for new clients)
		+	ADD(EAX, -0x1F40)      //add eax, -1F40h
		,

		default:
			ADD(EAX, -0x1F40)      //add eax, -1F40h
		+	MOV(ECX, 0x2C)         //mov ecx, 2Ch
		,

		funcName: "IsHomunSkill"
	},

	'CustomMerceSkills',
	{
		6:
			CMP(EAX, 0x2008)       //cmp eax, 2008h
		+	JL(WC)                 //jl short _skip
		+	CMP(EAX, 0x2031)       //cmp eax, 2031h
		,

		default:
			LEA(R32, [R32, -0x2008])  //lea regA, [regB - 2008h]
		+	CMP(R32, ' [0010100.]')   //cmp regA, 28h or 29h
		,

		funcName: "IsMercenarySkill"
	}
);
