/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2024 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Andre (4144)                                           *
*   Created Date  : 2020-10-02                                             *
*   Last Modified : 2024-08-08                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Changes the Sleep function references to custom function which alters the delay value provided before jumping to Sleep.
///
CustomSleep = function(_)
{
	$$(_, 1, `Get the delay value from user`)
	const idx = this.Names.indexOf(_);
	const val = Exe.GetUserInput('$newSleepDelay' + idx, D_Uint16, "Delay input", "Enter the new delay (in ms)", idx, {max : 1000});
	if (val === false)
		Cancel("Delay", idx);

	$$(_, 2, `Add to CACHE`)
	CACHE.put('CSlp_Delay' + idx, val);

	$$(_, 3, `Stage the changes`)
	this.setup();

	return true;
};

///
/// \brief Data needed for the 2 patches
///
CustomSleep.Names = ["AddInpDelay", "CustomGameLoopDelay"];


///
/// \brief Undo the staging
///
CustomSleep.cleanup = function(patchName)
{
	CACHE.del('CSlp_Delay' + this.Names.indexOf(patchName));
	this.setup();
};

///
/// \brief Helper function which does the staging process
///
CustomSleep.setup = function()
{
	const _ = 'CustomSleep.setup';

	$$(_, 1, `Get the function address & references`)
	const {funcAddr, refAddrs} = GetImpRefs("Sleep", "KERNEL32.dll");
	if (funcAddr < 0)
		throw Error("Sleep missing");

	if (refAddrs.isEmpty())
		throw Error("Sleep never used");

	$$(_, 2.1, `Construct the new function by parts`)
	let parts = [ MOV(EAX, [ESP, 4]) ];                  //mov eax, dword ptr [ARG.1]
	for (const idx of [0, 1])
	{
		if (CACHE.has('CSlp_Delay' + idx))
		{
			parts.push(
				CMP(EAX, idx)                            //cmp eax, <0 or 1>
			+	JNE(7)                                   //jne short _skip
			+	MOV(EAX, CACHE.get('CSlp_Delay' + idx))  //mov eax, <newValue>
			+	JMP(Filler(1,1))                         //jmp short _next
			);
		}
	}

	if (parts.length === 1) //no extra code added.
		return true;

	let code = SetFillTargets(parts, {'1,1' : parts.byteCount()});
	code +=
		MOV([ESP, 4], EAX)                               //mov dword ptr [ARG.1], eax
	+	JMP([funcAddr])                                  //jmp dword ptr [<&KERNEL32.Sleep>]
	;

	$$(_, 2.2, `Start the tag`)
	Exe.BeginTag("Adjust_Sleep", true);

	$$(_, 2.3, `Allocate the space for it`)
	const [free, freeVir] = Exe.Allocate(4 + code.byteCount());

	$$(_, 2.4, `Add at allocated space`)
	Exe.SetHex(free, (freeVir + 4).toHex() + code);

	$$(_, 2.5, `Change the references to access our function instead`)
	for (const addr of refAddrs)
		Exe.SetUint32(Instr.FromAddr(addr).NextAddr - 4, freeVir);
};

///
/// \brief Wrappers for individual patches
///
AddInpDelay         = CustomSleep;
CustomGameLoopDelay = CustomSleep;
